{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":false},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":false},{"_id":"source/temple/temp.js","path":"temple/temp.js","modified":false},{"_id":"source/blog/css/base.css","path":"blog/css/base.css","modified":false},{"_id":"source/blog/css/common.css","path":"blog/css/common.css","modified":false},{"_id":"source/blog/css/default.css","path":"blog/css/default.css","modified":false},{"_id":"source/blog/css/mobile.css","path":"blog/css/mobile.css","modified":false},{"_id":"source/blog/css/typo.css","path":"blog/css/typo.css","modified":false},{"_id":"source/blog/js/common.js","path":"blog/js/common.js","modified":false},{"_id":"source/blog/js/jquery-1.9.0.min.js","path":"blog/js/jquery-1.9.0.min.js","modified":false},{"_id":"source/blog/js/jquery.easing.min.js","path":"blog/js/jquery.easing.min.js","modified":false},{"_id":"source/blog/images/2014-05-28-use-google-chrome-capture-data/1.png","path":"blog/images/2014-05-28-use-google-chrome-capture-data/1.png","modified":false},{"_id":"source/blog/images/2014-05-28-use-google-chrome-capture-data/2.png","path":"blog/images/2014-05-28-use-google-chrome-capture-data/2.png","modified":false},{"_id":"source/blog/images/2014-06-04-hybrid-h5-framework/ios_1.png","path":"blog/images/2014-06-04-hybrid-h5-framework/ios_1.png","modified":false},{"_id":"source/blog/images/2014-06-04-hybrid-h5-framework/ios_3.png","path":"blog/images/2014-06-04-hybrid-h5-framework/ios_3.png","modified":false},{"_id":"source/blog/images/2014-06-04-hybrid-h5-framework/v1_1.png","path":"blog/images/2014-06-04-hybrid-h5-framework/v1_1.png","modified":false},{"_id":"source/blog/images/2014-06-04-hybrid-h5-framework/v1_2.png","path":"blog/images/2014-06-04-hybrid-h5-framework/v1_2.png","modified":false},{"_id":"source/blog/images/2014-06-04-hybrid-h5-framework/v1_3.png","path":"blog/images/2014-06-04-hybrid-h5-framework/v1_3.png","modified":false},{"_id":"source/blog/images/2014-06-04-hybrid-h5-framework/v1_4.png","path":"blog/images/2014-06-04-hybrid-h5-framework/v1_4.png","modified":false},{"_id":"source/blog/images/2014-06-04-hybrid-h5-framework/v1_5.png","path":"blog/images/2014-06-04-hybrid-h5-framework/v1_5.png","modified":false},{"_id":"source/blog/images/2014-06-02-a-casserole/1.png","path":"blog/images/2014-06-02-a-casserole/1.png","modified":false},{"_id":"source/blog/images/2014-06-02-a-casserole/2.png","path":"blog/images/2014-06-02-a-casserole/2.png","modified":false},{"_id":"source/blog/images/2014-06-02-a-casserole/3.png","path":"blog/images/2014-06-02-a-casserole/3.png","modified":false},{"_id":"source/blog/images/2014-06-17-ios8-is-good-for-hybrid-app-developer/Chrome_for_iOS_SunSpider.jpg","path":"blog/images/2014-06-17-ios8-is-good-for-hybrid-app-developer/Chrome_for_iOS_SunSpider.jpg","modified":false},{"_id":"source/blog/images/2014-06-17-ios8-is-good-for-hybrid-app-developer/iOS_Safari_SunSpider.jpg","path":"blog/images/2014-06-17-ios8-is-good-for-hybrid-app-developer/iOS_Safari_SunSpider.jpg","modified":false},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/1.jpg","path":"blog/images/2014-06-23-hangzhou-zhigu-train/1.jpg","modified":false},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/2.jpg","path":"blog/images/2014-06-23-hangzhou-zhigu-train/2.jpg","modified":false},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/3.jpg","path":"blog/images/2014-06-23-hangzhou-zhigu-train/3.jpg","modified":false},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/4.jpg","path":"blog/images/2014-06-23-hangzhou-zhigu-train/4.jpg","modified":false},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/5.jpg","path":"blog/images/2014-06-23-hangzhou-zhigu-train/5.jpg","modified":false},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/6.jpg","path":"blog/images/2014-06-23-hangzhou-zhigu-train/6.jpg","modified":false},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/7.jpg","path":"blog/images/2014-06-23-hangzhou-zhigu-train/7.jpg","modified":false},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/8.jpg","path":"blog/images/2014-06-23-hangzhou-zhigu-train/8.jpg","modified":false},{"_id":"source/blog/images/2014-07-10-cordova-generator/1_c.png","path":"blog/images/2014-07-10-cordova-generator/1_c.png","modified":false},{"_id":"source/blog/images/2014-07-10-cordova-generator/3_c.png","path":"blog/images/2014-07-10-cordova-generator/3_c.png","modified":false},{"_id":"source/blog/images/2014-07-10-cordova-generator/2_c.png","path":"blog/images/2014-07-10-cordova-generator/2_c.png","modified":false},{"_id":"source/blog/images/2014-07-14-learning-clure-1/*eshell*","path":"blog/images/2014-07-14-learning-clure-1/*eshell*","modified":false},{"_id":"source/blog/images/2014-07-14-learning-clure-1/0.png","path":"blog/images/2014-07-14-learning-clure-1/0.png","modified":false},{"_id":"source/blog/images/2014-07-14-learning-clure-1/1.png","path":"blog/images/2014-07-14-learning-clure-1/1.png","modified":false},{"_id":"source/blog/images/2014-07-14-learning-clure-1/2.png","path":"blog/images/2014-07-14-learning-clure-1/2.png","modified":false},{"_id":"source/blog/images/2014-07-14-learning-clure-1/3.png","path":"blog/images/2014-07-14-learning-clure-1/3.png","modified":false},{"_id":"source/blog/images/2014-07-14-learning-clure-1/4.png","path":"blog/images/2014-07-14-learning-clure-1/4.png","modified":false},{"_id":"source/blog/images/2014-07-14-learning-clure-1/5.png","path":"blog/images/2014-07-14-learning-clure-1/5.png","modified":false},{"_id":"source/blog/images/2014-07-14-learning-clure-1/6.png","path":"blog/images/2014-07-14-learning-clure-1/6.png","modified":false},{"_id":"source/blog/images/2014-07-14-learning-clure-1/7.png","path":"blog/images/2014-07-14-learning-clure-1/7.png","modified":false},{"_id":"source/temple/css/bootstrap.css","path":"temple/css/bootstrap.css","modified":false},{"_id":"source/temple/css/forkme-ie.css","path":"temple/css/forkme-ie.css","modified":false},{"_id":"source/temple/css/forkme.css","path":"temple/css/forkme.css","modified":false},{"_id":"source/temple/css/md.css","path":"temple/css/md.css","modified":false},{"_id":"source/temple/js/ace.js","path":"temple/js/ace.js","modified":false},{"_id":"source/temple/js/mode-javascript.js","path":"temple/js/mode-javascript.js","modified":false},{"_id":"source/temple/js/theme-tomorrow_night.js","path":"temple/js/theme-tomorrow_night.js","modified":false},{"_id":"source/temple/js/theme-tomorrow_night_blue.js","path":"temple/js/theme-tomorrow_night_blue.js","modified":false},{"_id":"source/temple/js/theme-twilight.js","path":"temple/js/theme-twilight.js","modified":false},{"_id":"source/temple/js/theme-vibrant_ink.js","path":"temple/js/theme-vibrant_ink.js","modified":false},{"_id":"source/temple/js/worker-javascript.js","path":"temple/js/worker-javascript.js","modified":false},{"_id":"source/blog/css/md/default.css","path":"blog/css/md/default.css","modified":false},{"_id":"source/blog/js/highlight/LICENSE","path":"blog/js/highlight/LICENSE","modified":false},{"_id":"source/blog/js/highlight/highlight.pack.js","path":"blog/js/highlight/highlight.pack.js","modified":false},{"_id":"source/blog/js/highlight/styles/arta.css","path":"blog/js/highlight/styles/arta.css","modified":false},{"_id":"source/blog/js/highlight/styles/ascetic.css","path":"blog/js/highlight/styles/ascetic.css","modified":false},{"_id":"source/blog/js/highlight/styles/atelier-dune.dark.css","path":"blog/js/highlight/styles/atelier-dune.dark.css","modified":false},{"_id":"source/blog/js/highlight/styles/atelier-dune.light.css","path":"blog/js/highlight/styles/atelier-dune.light.css","modified":false},{"_id":"source/blog/js/highlight/styles/atelier-forest.dark.css","path":"blog/js/highlight/styles/atelier-forest.dark.css","modified":false},{"_id":"source/blog/js/highlight/styles/atelier-forest.light.css","path":"blog/js/highlight/styles/atelier-forest.light.css","modified":false},{"_id":"source/blog/js/highlight/styles/atelier-heath.dark.css","path":"blog/js/highlight/styles/atelier-heath.dark.css","modified":false},{"_id":"source/blog/js/highlight/styles/atelier-heath.light.css","path":"blog/js/highlight/styles/atelier-heath.light.css","modified":false},{"_id":"source/blog/js/highlight/styles/atelier-lakeside.dark.css","path":"blog/js/highlight/styles/atelier-lakeside.dark.css","modified":false},{"_id":"source/blog/js/highlight/styles/atelier-lakeside.light.css","path":"blog/js/highlight/styles/atelier-lakeside.light.css","modified":false},{"_id":"source/blog/js/highlight/styles/atelier-seaside.dark.css","path":"blog/js/highlight/styles/atelier-seaside.dark.css","modified":false},{"_id":"source/blog/js/highlight/styles/atelier-seaside.light.css","path":"blog/js/highlight/styles/atelier-seaside.light.css","modified":false},{"_id":"source/blog/js/highlight/styles/brown_paper.css","path":"blog/js/highlight/styles/brown_paper.css","modified":false},{"_id":"source/blog/js/highlight/styles/brown_papersq.png","path":"blog/js/highlight/styles/brown_papersq.png","modified":false},{"_id":"source/blog/js/highlight/styles/dark.css","path":"blog/js/highlight/styles/dark.css","modified":false},{"_id":"source/blog/js/highlight/styles/default.css","path":"blog/js/highlight/styles/default.css","modified":false},{"_id":"source/blog/js/highlight/styles/docco.css","path":"blog/js/highlight/styles/docco.css","modified":false},{"_id":"source/blog/js/highlight/styles/far.css","path":"blog/js/highlight/styles/far.css","modified":false},{"_id":"source/blog/js/highlight/styles/foundation.css","path":"blog/js/highlight/styles/foundation.css","modified":false},{"_id":"source/blog/js/highlight/styles/github.css","path":"blog/js/highlight/styles/github.css","modified":false},{"_id":"source/blog/js/highlight/styles/googlecode.css","path":"blog/js/highlight/styles/googlecode.css","modified":false},{"_id":"source/blog/js/highlight/styles/idea.css","path":"blog/js/highlight/styles/idea.css","modified":false},{"_id":"source/blog/js/highlight/styles/ir_black.css","path":"blog/js/highlight/styles/ir_black.css","modified":false},{"_id":"source/blog/js/highlight/styles/magula.css","path":"blog/js/highlight/styles/magula.css","modified":false},{"_id":"source/blog/js/highlight/styles/mono-blue.css","path":"blog/js/highlight/styles/mono-blue.css","modified":false},{"_id":"source/blog/js/highlight/styles/monokai.css","path":"blog/js/highlight/styles/monokai.css","modified":false},{"_id":"source/blog/js/highlight/styles/monokai_sublime.css","path":"blog/js/highlight/styles/monokai_sublime.css","modified":false},{"_id":"source/blog/js/highlight/styles/obsidian.css","path":"blog/js/highlight/styles/obsidian.css","modified":false},{"_id":"source/blog/js/highlight/styles/paraiso.dark.css","path":"blog/js/highlight/styles/paraiso.dark.css","modified":false},{"_id":"source/blog/js/highlight/styles/paraiso.light.css","path":"blog/js/highlight/styles/paraiso.light.css","modified":false},{"_id":"source/blog/js/highlight/styles/pojoaque.css","path":"blog/js/highlight/styles/pojoaque.css","modified":false},{"_id":"source/blog/js/highlight/styles/pojoaque.jpg","path":"blog/js/highlight/styles/pojoaque.jpg","modified":false},{"_id":"source/blog/js/highlight/styles/railscasts.css","path":"blog/js/highlight/styles/railscasts.css","modified":false},{"_id":"source/blog/js/highlight/styles/rainbow.css","path":"blog/js/highlight/styles/rainbow.css","modified":false},{"_id":"source/blog/js/highlight/styles/school_book.css","path":"blog/js/highlight/styles/school_book.css","modified":false},{"_id":"source/blog/js/highlight/styles/school_book.png","path":"blog/js/highlight/styles/school_book.png","modified":false},{"_id":"source/blog/js/highlight/styles/solarized_dark.css","path":"blog/js/highlight/styles/solarized_dark.css","modified":false},{"_id":"source/blog/js/highlight/styles/solarized_light.css","path":"blog/js/highlight/styles/solarized_light.css","modified":false},{"_id":"source/blog/js/highlight/styles/sunburst.css","path":"blog/js/highlight/styles/sunburst.css","modified":false},{"_id":"source/blog/js/highlight/styles/tomorrow-night-blue.css","path":"blog/js/highlight/styles/tomorrow-night-blue.css","modified":false},{"_id":"source/blog/js/highlight/styles/tomorrow-night-bright.css","path":"blog/js/highlight/styles/tomorrow-night-bright.css","modified":false},{"_id":"source/blog/js/highlight/styles/tomorrow-night-eighties.css","path":"blog/js/highlight/styles/tomorrow-night-eighties.css","modified":false},{"_id":"source/blog/js/highlight/styles/tomorrow-night.css","path":"blog/js/highlight/styles/tomorrow-night.css","modified":false},{"_id":"source/blog/js/highlight/styles/tomorrow.css","path":"blog/js/highlight/styles/tomorrow.css","modified":false},{"_id":"source/blog/js/highlight/styles/vs.css","path":"blog/js/highlight/styles/vs.css","modified":false},{"_id":"source/blog/js/highlight/styles/xcode.css","path":"blog/js/highlight/styles/xcode.css","modified":false},{"_id":"source/blog/js/highlight/styles/zenburn.css","path":"blog/js/highlight/styles/zenburn.css","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":false},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1405769151000},{"_id":"scaffolds/page.md","mtime":1405769151000},{"_id":"scaffolds/photo.md","mtime":1405769151000},{"_id":"scaffolds/post.md","mtime":1405769151000},{"_id":"source/_posts/2013-10-26-jekyll-hilightjs.md","mtime":1405769711000},{"_id":"source/_posts/2013-10-26-md-syntax.md","mtime":1405769708000},{"_id":"source/_posts/2013-10-27-temple-intro.md","mtime":1405769722000},{"_id":"source/_posts/2013-10-29-emacs-tricks.md","mtime":1405770117000},{"_id":"source/_posts/2013-11-14-make-iconfont-method-a.md","mtime":1405769151000},{"_id":"source/_posts/2013-11-21-ubuntu13.10-npm-grunt-error.md","mtime":1405769151000},{"_id":"source/_posts/2013-11-27-chrome-vnc-ubuntu-to-win7.md","mtime":1405769151000},{"_id":"source/_posts/2013-11-28-raphaeljs-ie8-performance.md","mtime":1405769151000},{"_id":"source/_posts/2013-11-29-nodejs-call-java.md","mtime":1405769151000},{"_id":"source/_posts/2013-12-22-use-google-road-plan.md","mtime":1405769151000},{"_id":"source/_posts/2014-05-28-use-google-chrome-capture-data.md","mtime":1405769151000},{"_id":"source/_posts/2014-05-30-sleep-improve.md","mtime":1405769151000},{"_id":"source/_posts/2014-06-02-a-casserole.md","mtime":1405769151000},{"_id":"source/_posts/2014-06-04-hybrid-h5-framework.md","mtime":1405769151000},{"_id":"source/_posts/2014-06-04-mongodb-note.md","mtime":1405769151000},{"_id":"source/_posts/2014-06-17-ios8-is-good-for-hybrid-app-developer.md","mtime":1405769151000},{"_id":"source/_posts/2014-06-23-hangzhou-zhigu-train.md","mtime":1405769151000},{"_id":"source/_posts/2014-07-10-cordova-generator.md","mtime":1405769151000},{"_id":"source/_posts/2014-07-12-ios-dev-first-impression.md","mtime":1405769151000},{"_id":"source/_posts/2014-07-14-learning-clojure-1.md","mtime":1405769151000},{"_id":"source/_posts/2014-07-15-learning-clojure-2.md","mtime":1405769151000},{"_id":"source/_posts/2014-07-16-learning-clojure-3.md","mtime":1405769151000},{"_id":"source/_posts/2014-07-19-learning-clojure-company.md","mtime":1405769151000},{"_id":"themes/landscape/Gruntfile.js","mtime":1405769151000},{"_id":"themes/landscape/LICENSE","mtime":1405769151000},{"_id":"themes/landscape/README.md","mtime":1405769151000},{"_id":"themes/landscape/_config.yml","mtime":1405769151000},{"_id":"themes/landscape/package.json","mtime":1405769151000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1405769151000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/category.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/index.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/page.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/post.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1405769151000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1405769151000},{"_id":"themes/landscape/source/js/script.js","mtime":1405769151000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/style.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1405769151000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1405769151000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1405769151000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1405769151000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1405769151000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1405769151000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1405769151000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1405769151000},{"_id":"source/temple/index.html","mtime":1405769151000},{"_id":"source/temple/temp.js","mtime":1405769151000},{"_id":"source/temple/css/bootstrap.css","mtime":1405769151000},{"_id":"source/temple/css/forkme-ie.css","mtime":1405769151000},{"_id":"source/temple/css/forkme.css","mtime":1405769151000},{"_id":"source/temple/css/md.css","mtime":1405769151000},{"_id":"source/temple/js/ace.js","mtime":1405769151000},{"_id":"source/temple/js/mode-javascript.js","mtime":1405769151000},{"_id":"source/temple/js/theme-tomorrow_night.js","mtime":1405769151000},{"_id":"source/temple/js/theme-tomorrow_night_blue.js","mtime":1405769151000},{"_id":"source/temple/js/theme-twilight.js","mtime":1405769151000},{"_id":"source/temple/js/theme-vibrant_ink.js","mtime":1405769151000},{"_id":"source/temple/js/worker-javascript.js","mtime":1405769151000},{"_id":"source/blog/css/base.css","mtime":1405769151000},{"_id":"source/blog/css/common.css","mtime":1405769151000},{"_id":"source/blog/css/default.css","mtime":1405769151000},{"_id":"source/blog/css/mobile.css","mtime":1405769151000},{"_id":"source/blog/css/typo.css","mtime":1405769151000},{"_id":"source/blog/css/md/default.css","mtime":1405769151000},{"_id":"source/blog/images/2014-05-28-use-google-chrome-capture-data/1.png","mtime":1405769151000},{"_id":"source/blog/images/2014-05-28-use-google-chrome-capture-data/2.png","mtime":1405769151000},{"_id":"source/blog/images/2014-06-02-a-casserole/1.png","mtime":1405769151000},{"_id":"source/blog/images/2014-06-02-a-casserole/2.png","mtime":1405769151000},{"_id":"source/blog/images/2014-06-02-a-casserole/3.png","mtime":1405769151000},{"_id":"source/blog/images/2014-06-04-hybrid-h5-framework/ios_1.png","mtime":1405769151000},{"_id":"source/blog/images/2014-06-04-hybrid-h5-framework/ios_3.png","mtime":1405769151000},{"_id":"source/blog/images/2014-06-04-hybrid-h5-framework/v1_1.png","mtime":1405769151000},{"_id":"source/blog/images/2014-06-04-hybrid-h5-framework/v1_2.png","mtime":1405769151000},{"_id":"source/blog/images/2014-06-04-hybrid-h5-framework/v1_3.png","mtime":1405769151000},{"_id":"source/blog/images/2014-06-04-hybrid-h5-framework/v1_4.png","mtime":1405769151000},{"_id":"source/blog/images/2014-06-04-hybrid-h5-framework/v1_5.png","mtime":1405769151000},{"_id":"source/blog/images/2014-06-17-ios8-is-good-for-hybrid-app-developer/Chrome_for_iOS_SunSpider.jpg","mtime":1405769151000},{"_id":"source/blog/images/2014-06-17-ios8-is-good-for-hybrid-app-developer/iOS_Safari_SunSpider.jpg","mtime":1405769151000},{"_id":"source/blog/images/2014-07-10-cordova-generator/1_c.png","mtime":1405769151000},{"_id":"source/blog/images/2014-07-10-cordova-generator/2_c.png","mtime":1405769151000},{"_id":"source/blog/images/2014-07-10-cordova-generator/3_c.png","mtime":1405769151000},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/1.jpg","mtime":1405769151000},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/2.jpg","mtime":1405769151000},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/3.jpg","mtime":1405769151000},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/4.jpg","mtime":1405769151000},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/5.jpg","mtime":1405769151000},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/6.jpg","mtime":1405769151000},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/7.jpg","mtime":1405769151000},{"_id":"source/blog/images/2014-06-23-hangzhou-zhigu-train/8.jpg","mtime":1405769151000},{"_id":"source/blog/images/2014-07-14-learning-clure-1/*eshell*","mtime":1405769151000},{"_id":"source/blog/images/2014-07-14-learning-clure-1/0.png","mtime":1405769151000},{"_id":"source/blog/images/2014-07-14-learning-clure-1/1.png","mtime":1405769151000},{"_id":"source/blog/images/2014-07-14-learning-clure-1/2.png","mtime":1405769151000},{"_id":"source/blog/images/2014-07-14-learning-clure-1/3.png","mtime":1405769151000},{"_id":"source/blog/images/2014-07-14-learning-clure-1/4.png","mtime":1405769151000},{"_id":"source/blog/images/2014-07-14-learning-clure-1/5.png","mtime":1405769151000},{"_id":"source/blog/images/2014-07-14-learning-clure-1/6.png","mtime":1405769151000},{"_id":"source/blog/images/2014-07-14-learning-clure-1/7.png","mtime":1405769151000},{"_id":"source/blog/js/common.js","mtime":1405769151000},{"_id":"source/blog/js/jquery-1.9.0.min.js","mtime":1405769151000},{"_id":"source/blog/js/jquery.easing.min.js","mtime":1405769151000},{"_id":"source/blog/js/highlight/CHANGES.md","mtime":1405769151000},{"_id":"source/blog/js/highlight/LICENSE","mtime":1405769151000},{"_id":"source/blog/js/highlight/README.md","mtime":1405769151000},{"_id":"source/blog/js/highlight/README.ru.md","mtime":1405769151000},{"_id":"source/blog/js/highlight/highlight.pack.js","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/arta.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/ascetic.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/atelier-dune.dark.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/atelier-dune.light.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/atelier-forest.dark.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/atelier-forest.light.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/atelier-heath.dark.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/atelier-heath.light.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/atelier-lakeside.dark.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/atelier-lakeside.light.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/atelier-seaside.dark.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/atelier-seaside.light.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/brown_paper.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/brown_papersq.png","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/dark.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/default.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/docco.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/far.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/foundation.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/github.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/googlecode.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/idea.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/ir_black.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/magula.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/mono-blue.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/monokai.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/monokai_sublime.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/obsidian.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/paraiso.dark.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/paraiso.light.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/pojoaque.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/pojoaque.jpg","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/railscasts.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/rainbow.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/school_book.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/school_book.png","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/solarized_dark.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/solarized_light.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/sunburst.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/tomorrow-night-blue.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/tomorrow-night-bright.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/tomorrow-night-eighties.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/tomorrow-night.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/vs.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/tomorrow.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/xcode.css","mtime":1405769151000},{"_id":"source/blog/js/highlight/styles/zenburn.css","mtime":1405769151000},{"_id":"source/_posts/2014-07-19-testmd.md","mtime":1405770501000}],"Category":[],"Page":[{"content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"stylesheet\" charset=\"utf-8\" href=\"http://a.tbcdn.cn/s/kissy/1.3.0/css/dpl/base-min.css\">\n    <link rel=\"stylesheet\" href=\"css/bootstrap.css\" type=\"text/css\">\n    <link rel=\"stylesheet\" href=\"css/md.css\" type=\"text/css\">\n    <link rel=\"stylesheet\" href=\"css/forkme.css\">\n    <!--[if IE]>\n        <link rel=\"stylesheet\" href=\"css/forkme-ie.css\" />\n    <![endif]-->\n    <script src=\"js/ace.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    <script charset=\"utf-8\" src=\"http://a.tbcdn.cn/s/kissy/1.3.0/kissy-min.js\"></script>\n    <!-- <script type=\"text/javascript\" src=\"/Dropbox/gits/gallery/temple/1.0/build/index-min.js\"></script> -->\n    <title>Editor</title>\n    <style type=\"text/css\" media=\"screen\">\n     .ace_editor {\n       position: relative !important;\n       border: 1px solid lightgray;\n     }\n     .editors{margin:0 auto;width:85%;}\n     .onerow{margin-top:20px;clear:left;}\n     .editor-con,.result-con{\n       margin:0;\n       width: 40%;\n       float:left;\n     }\n     .editor{\n       height: 182px;\n     }\n     .editor-result{resize:none;border-color:#ccc;padding:0;margin-left:5px;height:200px;width:100%;margin-top:2px;}\n     .result-info{padding-left:8px;}\n     .result-info label{display:inline;margin-left:10px;}\n     .check-radio{position:relative;top:-1px;}\n     .github-fork-ribbon-wrapper{position:fixed;}\n    </style>\n  </head>\n  <body>\n    <div class=\"github-fork-ribbon-wrapper left\">\n      <div class=\"github-fork-ribbon\">\n        <a href=\"https://github.com/WeweTom/temple\" target=\"_blank\" rel=\"external\">Fork me on GitHub</a>\n      </div>\n    </div>\n<div class=\"editors\">\n    <h1> Temple 模板语法与编译结果示例</h1>\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    综合例子 if/else/if/each嵌套 \n  </p>\n<pre class=\"editor\">\n{#if items.length}\n{#each items as item index}\n  {#if index == 0}\n  first one: {item}\n  {#elseif index == 1}\n  second one\n  {#else}\n  rest one\n  {/if}\n{/each}\n{/if}\n</pre>\n</div>\n\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n    <!-- \n    <label>\n      <input class=\"check-radio\" type=\"radio\" name=\"each-radio\"/>\n      js\n    </label>\n    <label>\n      <input class=\"check-radio\" type=\"radio\" name=\"each-radio\"/>\n      vm\n    </label>\n    -->\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    <code>each</code> \n  </p>\n<pre class=\"editor\">\n{#each items as item index}\n  {index} : {item}\n{/each}\n</pre>\n</div>\n\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n    <!-- \n    <label>\n      <input class=\"check-radio\" type=\"radio\" name=\"each-radio\"/>\n      js\n    </label>\n    <label>\n      <input class=\"check-radio\" type=\"radio\" name=\"each-radio\"/>\n      vm\n    </label>\n    -->\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n\n\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    <code>if/elseif/else</code> \n  </p>\n<pre class=\"editor\">\n{#if name == \"tom\"}\n  say hello to {name}\n{#else}\n  say good by to {name}\n{/if}\n</pre>\n</div>\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    <code>include</code> \n  </p>\n<pre class=\"editor\" type=\"code\" data-lang=\"js\">\nTemple.add(\"head\",\"this is head , my name is {name} !\");\nwindow.TempleResult = Temple.to_js('{#include head} \\n this is body');\n</pre>\n</div>\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    <code>extend</code> \n  </p>\n<pre class=\"editor\" type=\"code\" data-lang=\"js\">\nTemple.add(\"base\",\"this is head , my name is {#block name} jerry {/block}!\");\n\nwindow.TempleResult = Temple.to_js('{#extend base} {#block name} john {/block}');\n</pre>\n</div>\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    注释\n  </p>\n\n<pre class=\"editor\">\n{#!this is a line of comment}\n{#! 可以包含\"{\"、\"#\"、\"\\\\}\" }\n{#! 中文注释} 中文字符串abc\n</pre>\n</div>\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    自定义函数\n  </p>\n<pre class=\"editor\" type=\"code\" data-lang=\"js\">\nTemple.reg(\"escape\",function(s){\nreturn escape(s);\n});\nwindow.TempleResult = Temple.to_js('{escape(\"name\")}');\n</pre>\n</div>\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    复杂表达式\n  </p>\n<pre class=\"editor\">\n{ a+(b-c*d/(ef%3))}\n</pre>\n</div>\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n</div>\n    <script>\n     KISSY.use(\"dom,event,gallery/temple/1.0/index\",function(S,D,E,Temple){\n       window.Temple = Temple;\n       // create first editor\n       var els = D.query(\".editor\");\n       S.each(els,function(el){\n         var editor = ace.edit(el);\n         var lang = D.attr(el,\"data-lang\");\n         var con = D.parent(el,\".onerow\");\n         var txtarea = D.get('.J_Result',con);\n         var opt = {};\n         if(lang){\n           editor.getSession().setMode(\"ace/mode/javascript\");\n           opt = {exec:true};\n           compile(editor,txtarea,opt);\n         }else{\n           compile(editor,txtarea,opt);\n         }\n         editor.on(\"change\",S.buffer(function(){\n           compile(editor,txtarea,opt);\n         },500));\n         editor.setTheme(\"ace/theme/twilight\");\n       });\n       \n       function compile(editor,txtarea,opt){\n         if(opt.exec){\n           eval(editor.getValue());\n           var result = window.TempleResult;\n         }else{\n           var result = Temple.to_js(editor.getValue());\n         }\n         D.val(txtarea,result);\n       }\n     });\n    </script>\n  </body>\n</html>","source":"temple/index.html","raw":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <link rel=\"stylesheet\" charset=\"utf-8\" href=\"http://a.tbcdn.cn/s/kissy/1.3.0/css/dpl/base-min.css\">\n    <link rel=\"stylesheet\" href=\"css/bootstrap.css\" type=\"text/css\"/>\n    <link rel=\"stylesheet\" href=\"css/md.css\" type=\"text/css\"/>\n    <link rel=\"stylesheet\" href=\"css/forkme.css\" />\n    <!--[if IE]>\n        <link rel=\"stylesheet\" href=\"css/forkme-ie.css\" />\n    <![endif]-->\n    <script src=\"js/ace.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    <script charset=\"utf-8\" src=\"http://a.tbcdn.cn/s/kissy/1.3.0/kissy-min.js\"></script>\n    <!-- <script type=\"text/javascript\" src=\"/Dropbox/gits/gallery/temple/1.0/build/index-min.js\"></script> -->\n    <title>Editor</title>\n    <style type=\"text/css\" media=\"screen\">\n     .ace_editor {\n       position: relative !important;\n       border: 1px solid lightgray;\n     }\n     .editors{margin:0 auto;width:85%;}\n     .onerow{margin-top:20px;clear:left;}\n     .editor-con,.result-con{\n       margin:0;\n       width: 40%;\n       float:left;\n     }\n     .editor{\n       height: 182px;\n     }\n     .editor-result{resize:none;border-color:#ccc;padding:0;margin-left:5px;height:200px;width:100%;margin-top:2px;}\n     .result-info{padding-left:8px;}\n     .result-info label{display:inline;margin-left:10px;}\n     .check-radio{position:relative;top:-1px;}\n     .github-fork-ribbon-wrapper{position:fixed;}\n    </style>\n  </head>\n  <body>\n    <div class=\"github-fork-ribbon-wrapper left\">\n      <div class=\"github-fork-ribbon\">\n        <a href=\"https://github.com/WeweTom/temple\">Fork me on GitHub</a>\n      </div>\n    </div>\n<div class=\"editors\">\n    <h1> Temple 模板语法与编译结果示例</h1>\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    综合例子 if/else/if/each嵌套 \n  </p>\n<pre class=\"editor\">\n{#if items.length}\n{#each items as item index}\n  {#if index == 0}\n  first one: {item}\n  {#elseif index == 1}\n  second one\n  {#else}\n  rest one\n  {/if}\n{/each}\n{/if}\n</pre>\n</div>\n\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n    <!-- \n    <label>\n      <input class=\"check-radio\" type=\"radio\" name=\"each-radio\"/>\n      js\n    </label>\n    <label>\n      <input class=\"check-radio\" type=\"radio\" name=\"each-radio\"/>\n      vm\n    </label>\n    -->\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    <code>each</code> \n  </p>\n<pre class=\"editor\">\n{#each items as item index}\n  {index} : {item}\n{/each}\n</pre>\n</div>\n\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n    <!-- \n    <label>\n      <input class=\"check-radio\" type=\"radio\" name=\"each-radio\"/>\n      js\n    </label>\n    <label>\n      <input class=\"check-radio\" type=\"radio\" name=\"each-radio\"/>\n      vm\n    </label>\n    -->\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n\n\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    <code>if/elseif/else</code> \n  </p>\n<pre class=\"editor\">\n{#if name == \"tom\"}\n  say hello to {name}\n{#else}\n  say good by to {name}\n{/if}\n</pre>\n</div>\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    <code>include</code> \n  </p>\n<pre class=\"editor\" type=\"code\" data-lang=\"js\">\nTemple.add(\"head\",\"this is head , my name is {name} !\");\nwindow.TempleResult = Temple.to_js('{#include head} \\n this is body');\n</pre>\n</div>\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    <code>extend</code> \n  </p>\n<pre class=\"editor\" type=\"code\" data-lang=\"js\">\nTemple.add(\"base\",\"this is head , my name is {#block name} jerry {/block}!\");\n\nwindow.TempleResult = Temple.to_js('{#extend base} {#block name} john {/block}');\n</pre>\n</div>\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    注释\n  </p>\n\n<pre class=\"editor\">\n{#!this is a line of comment}\n{#! 可以包含\"{\"、\"#\"、\"\\\\}\" }\n{#! 中文注释} 中文字符串abc\n</pre>\n</div>\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    自定义函数\n  </p>\n<pre class=\"editor\" type=\"code\" data-lang=\"js\">\nTemple.reg(\"escape\",function(s){\nreturn escape(s);\n});\nwindow.TempleResult = Temple.to_js('{escape(\"name\")}');\n</pre>\n</div>\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n\n<div class=\"onerow ks-clear\">\n<div class=\"editor-con\">\n  <p>\n    复杂表达式\n  </p>\n<pre class=\"editor\">\n{ a+(b-c*d/(ef%3))}\n</pre>\n</div>\n<div class=\"result-con\">\n  <p class=\"result-info\"> \n    编译结果\n  </p>\n  <textarea readonly class=\"editor-result J_Result\" resize=\"none\"></textarea>\n</div>\n</div>\n</div>\n    <script>\n     KISSY.use(\"dom,event,gallery/temple/1.0/index\",function(S,D,E,Temple){\n       window.Temple = Temple;\n       // create first editor\n       var els = D.query(\".editor\");\n       S.each(els,function(el){\n         var editor = ace.edit(el);\n         var lang = D.attr(el,\"data-lang\");\n         var con = D.parent(el,\".onerow\");\n         var txtarea = D.get('.J_Result',con);\n         var opt = {};\n         if(lang){\n           editor.getSession().setMode(\"ace/mode/javascript\");\n           opt = {exec:true};\n           compile(editor,txtarea,opt);\n         }else{\n           compile(editor,txtarea,opt);\n         }\n         editor.on(\"change\",S.buffer(function(){\n           compile(editor,txtarea,opt);\n         },500));\n         editor.setTheme(\"ace/theme/twilight\");\n       });\n       \n       function compile(editor,txtarea,opt){\n         if(opt.exec){\n           eval(editor.getValue());\n           var result = window.TempleResult;\n         }else{\n           var result = Temple.to_js(editor.getValue());\n         }\n         D.val(txtarea,result);\n       }\n     });\n    </script>\n  </body>\n</html>","date":1405769151000,"updated":1405769151000,"path":"temple/index.html","excerpt":"","_id":"mjx4t3bmo32h3ssq","title":"","comments":true,"layout":"page"},{"content":"<h2 id=\"Version_8-0_beta\">Version 8.0 beta</h2>\n<p>This new major release is quite a big overhaul bringing both new features and<br>some backwards incompatible changes. However, chances are that the majority of<br>users won’t be affected by the latter: the basic scenario described in the<br>README is left intact.</p>\n<p>Here’s what did change in an incompatible way:</p>\n<ul>\n<li><p>We’re now prefixing all classes located in <a href=\"http://highlightjs.readthedocs.org/en/latest/css-classes-reference.html\" target=\"_blank\" rel=\"external\">CSS classes reference</a> with<br><code>hljs-</code>, by default, because some class names would collide with other<br>people’s stylesheets. If you were using an older version, you might still want<br>the previous behavior, but still want to upgrade. To suppress this new<br>behavior, you would initialize like so:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  hljs.configure({classPrefix: <span class=\"string\">''</span>});</div><div class=\"line\">  hljs.initHighlightingOnLoad();</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p><code>tabReplace</code> and <code>useBR</code> that were used in different places are also unified<br>into the global options object and are to be set using <code>configure(options)</code>.<br>This function is documented in our <a href=\"http://highlightjs.readthedocs.org/en/latest/api.html\" target=\"_blank\" rel=\"external\">API docs</a>. Also note that these<br>parameters are gone from <code>highlightBlock</code> and <code>fixMarkup</code> which are now also<br>rely on <code>configure</code>.</p>\n</li>\n<li><p>We removed public-facing (though undocumented) object <code>hljs.LANGUAGES</code> which<br>was used to register languages with the library in favor of two new methods:<br><code>registerLanguage</code> and <code>getLanguage</code>. Both are documented in our <a href=\"http://highlightjs.readthedocs.org/en/latest/api.html\" target=\"_blank\" rel=\"external\">API docs</a>.</p>\n</li>\n<li><p>Result returned from <code>highlight</code> and <code>highlightAuto</code> no longer contains two<br>separate attributes contributing to relevance score, <code>relevance</code> and<br><code>keyword_count</code>. They are now unified in <code>relevance</code>.</p>\n</li>\n</ul>\n<p>Another technically compatible change that nonetheless might need attention:</p>\n<ul>\n<li>The structure of the NPM package was refactored, so if you had installed it<br>locally, you’ll have to update your paths. The usual <code>require(&#39;highlight.js&#39;)</code><br>works as before. This is contributed by <a href=\"https://github.com/dimsmol\" target=\"_blank\" rel=\"external\">Dmitry Smolin</a>.</li>\n</ul>\n<p>New features:</p>\n<ul>\n<li><p>Languages now can be recognized by multiple names like “js” for JavaScript or<br>“html” for, well, HTML (which earlier insisted on calling it “xml”). These<br>aliases can be specified in the class attribute of the code container in your<br>HTML as well as in various API calls. For now there are only a few very common<br>aliases but we’ll expand it in the future. All of them are listed in the<br>[class reference][].</p>\n</li>\n<li><p>Language detection can now be restricted to a subset of languages relevant in<br>a given context — a web page or even a single highlighting call. This is<br>especially useful for node.js build that includes all the known languages.<br>Another example is a StackOverflow-style site where users specify languages<br>as tags rather than in the markdown-formatted code snippets. This is<br>documented in the [API reference][] (see methods <code>highlightAuto</code> and<br><code>configure</code>).</p>\n</li>\n<li><p>Language definition syntax streamlined with <a href=\"https://groups.google.com/d/topic/highlightjs/VoGC9-1p5vk/discussion\" target=\"_blank\" rel=\"external\">variants</a> and<br><a href=\"https://github.com/isagalaev/highlight.js/commit/6c7fdea002eb3949577a85b3f7930137c7c3038d\" target=\"_blank\" rel=\"external\">beginKeywords</a>.</p>\n</li>\n</ul>\n<p>New languages and styles:</p>\n<ul>\n<li><em>Oxygene</em> by <a href=\"https://github.com/carlokok\" target=\"_blank\" rel=\"external\">Carlo Kok</a></li>\n<li><em>Mathematica</em> by <a href=\"https://github.com/dkvasnicka\" target=\"_blank\" rel=\"external\">Daniel Kvasnička</a></li>\n<li><em>Autohotkey</em> by <a href=\"https://github.com/dlimpid\" target=\"_blank\" rel=\"external\">Seongwon Lee</a></li>\n<li><em>Atelier</em> family of styles in 10 variants by <a href=\"https://github.com/atelierbram\" target=\"_blank\" rel=\"external\">Bram de Haan</a></li>\n<li><em>Paraíso</em> styles by <a href=\"https://github.com/idleberg\" target=\"_blank\" rel=\"external\">Jan T. Sott</a></li>\n</ul>\n<p>Miscelleanous improvements:</p>\n<ul>\n<li>Highlighting <code>=&gt;</code> prompts in Clojure.</li>\n<li><a href=\"https://github.com/sourrust\" target=\"_blank\" rel=\"external\">Jeremy Hull</a> fixed a lot of styles for consistency.</li>\n<li>Finally, highlighting PHP and HTML <a href=\"https://twitter.com/highlightjs/status/408890903017689088\" target=\"_blank\" rel=\"external\">mixed in peculiar ways</a>.</li>\n<li>Objective C and C# now properly highlight titles in method definition.</li>\n<li>Big overhaul of relevance counting for a number of languages. Please do report<br>bugs about mis-detection of non-trivial code snippets!</li>\n</ul>\n<h2 id=\"Version_7-5\">Version 7.5</h2>\n<p>A catch-up release dealing with some of the accumulated contributions. This one<br>is probably will be the last before the 8.0 which will be slightly backwards<br>incompatible regarding some advanced use-cases.</p>\n<p>One outstanding change in this version is the addition of 6 languages to the<br><a href=\"/soft/highlight/en/download/\">hosted script</a>: Markdown, ObjectiveC, CoffeeScript, Apache, Nginx and<br>Makefile. It now weighs about 6K more but we’re going to keep it under 30K.</p>\n<p>New languages:</p>\n<ul>\n<li>OCaml by <a href=\"https://github.com/mehdid\" target=\"_blank\" rel=\"external\">Mehdi Dogguy</a> and <a href=\"https://github.com/nbraud\" target=\"_blank\" rel=\"external\">Nicolas Braud-Santoni</a></li>\n<li><a href=\"http://livecode.com/developers/guides/server/\" target=\"_blank\" rel=\"external\">LiveCode Server</a> by <a href=\"https://github.com/revig\" target=\"_blank\" rel=\"external\">Ralf Bitter</a></li>\n<li>Scilab by <a href=\"https://github.com/sylvestre\" target=\"_blank\" rel=\"external\">Sylvestre Ledru</a></li>\n<li>basic support for Makefile by <a href=\"https://github.com/isagalaev\" target=\"_blank\" rel=\"external\">Ivan Sagalaev</a></li>\n</ul>\n<p>Improvements:</p>\n<ul>\n<li>Ruby’s got support for characters like <code>?A</code>, <code>?1</code>, <code>?\\012</code> etc. and <code>%r{..}</code><br>regexps.</li>\n<li>Clojure now allows a function call in the beginning of s-expressions<br><code>(($filter &quot;myCount&quot;) (arr 1 2 3 4 5))</code>.</li>\n<li>Haskell’s got new keywords and now recognizes more things like pragmas,<br>preprocessors, modules, containers, FFIs etc. Thanks to <a href=\"https://github.com/treep\" target=\"_blank\" rel=\"external\">Zena Treep</a><br>for the implementation and to <a href=\"https://github.com/sourrust\" target=\"_blank\" rel=\"external\">Jeremy Hull</a> for guiding it.</li>\n<li>Miscelleanous fixes in PHP, Brainfuck, SCSS, Asciidoc, CMake, Python and F#.</li>\n</ul>\n<h2 id=\"New_core_developers\">New core developers</h2>\n<p>The latest long period of almost complete inactivity in the project coincided<br>with growing interest to it led to a decision that now seems completely obvious:<br>we need more core developers.</p>\n<p>So without further ado let me welcome to the core team two long-time<br>contributors: <a href=\"https://github.com/sourrust\" target=\"_blank\" rel=\"external\">Jeremy Hull</a> and <a href=\"https://github.com/sannis\" target=\"_blank\" rel=\"external\">Oleg<br>Efimov</a>.</p>\n<p>Hope now we’ll be able to work through stuff faster!</p>\n<p>P.S. The historical commit is <a href=\"http://roudakov.ru/\" target=\"_blank\" rel=\"external\">here</a> for the record.</p>\n<h2 id=\"Version_7-4\">Version 7.4</h2>\n<p>This long overdue version is a snapshot of the current source tree with all the<br>changes that happened during the past year. Sorry for taking so long!</p>\n<p>Along with the changes in code highlight.js has finally got its new home at<br><a href=\"http://highlightjs.org/\" target=\"_blank\" rel=\"external\">http://highlightjs.org/</a>, moving from its craddle on Software Maniacs which it<br>outgrew a long time ago. Be sure to report any bugs about the site to</p>\n<p><a href=\"&#109;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#x69;&#x6e;&#102;&#x6f;&#64;&#x68;&#105;&#x67;&#x68;&#x6c;&#105;&#103;&#104;&#x74;&#x6a;&#x73;&#46;&#x6f;&#114;&#x67;\">&#x69;&#x6e;&#102;&#x6f;&#64;&#x68;&#105;&#x67;&#x68;&#x6c;&#105;&#103;&#104;&#x74;&#x6a;&#x73;&#46;&#x6f;&#114;&#x67;</a>.</p>\n<p>On to what’s new…</p>\n<p>New languages:</p>\n<ul>\n<li>Handlebars templates by <a href=\"https://github.com/eviltrout\" target=\"_blank\" rel=\"external\">Robin Ward</a></li>\n<li>Oracle Rules Language by <a href=\"https://github.com/jayce7\" target=\"_blank\" rel=\"external\">Jason Jacobson</a></li>\n<li>F# by <a href=\"https://github.com/follesoe\" target=\"_blank\" rel=\"external\">Joans Follesø</a></li>\n<li>AsciiDoc and Haml by <a href=\"https://github.com/mojavelinux\" target=\"_blank\" rel=\"external\">Dan Allen</a></li>\n<li>Lasso by <a href=\"https://github.com/EricFromCanada\" target=\"_blank\" rel=\"external\">Eric Knibbe</a></li>\n<li>SCSS by <a href=\"https://github.com/kemch\" target=\"_blank\" rel=\"external\">Kurt Emch</a></li>\n<li>VB.NET by <a href=\"https://github.com/rschiang\" target=\"_blank\" rel=\"external\">Poren Chiang</a></li>\n<li>Mizar by <a href=\"https://github.com/kelleyvanevert\" target=\"_blank\" rel=\"external\">Kelley van Evert</a></li>\n</ul>\n<p>New style themes:</p>\n<ul>\n<li>Monokai Sublime by <a href=\"http://nn.mit-license.org/\" target=\"_blank\" rel=\"external\">noformnocontent</a></li>\n<li>Railscasts by <a href=\"https://github.com/visoft\" target=\"_blank\" rel=\"external\">Damien White</a></li>\n<li>Obsidian by <a href=\"https://github.com/ioncreature\" target=\"_blank\" rel=\"external\">Alexander Marenin</a></li>\n<li>Docco by <a href=\"https://github.com/thingsinjars\" target=\"_blank\" rel=\"external\">Simon Madine</a></li>\n<li>Mono Blue by <a href=\"https://github.com/isagalaev\" target=\"_blank\" rel=\"external\">Ivan Sagalaev</a> (uses a single color hue for everything)</li>\n<li>Foundation by <a href=\"https://github.com/mojavelinux\" target=\"_blank\" rel=\"external\">Dan Allen</a></li>\n</ul>\n<p>Other notable changes:</p>\n<ul>\n<li>Corrected many corner cases in CSS.</li>\n<li>Dropped Python 2 version of the build tool.</li>\n<li>Implemented building for the AMD format.</li>\n<li>Updated Rust keywords (thanks to <a href=\"https://github.com/dmedvinsky\" target=\"_blank\" rel=\"external\">Dmitry Medvinsky</a>).</li>\n<li>Literal regexes can now be used in language definitions.</li>\n<li>CoffeeScript highlighting is now significantly more robust and rich due to<br>input from <a href=\"https://github.com/abe33\" target=\"_blank\" rel=\"external\">Cédric Néhémie</a>.</li>\n</ul>\n<h2 id=\"Version_7-3\">Version 7.3</h2>\n<ul>\n<li><p>Since this version highlight.js no longer works in IE version 8 and older.<br>It’s made it possible to reduce the library size and dramatically improve code<br>readability and made it easier to maintain. Time to go forward!</p>\n</li>\n<li><p>New languages: AppleScript (by <a href=\"https://github.com/nathan11g\" target=\"_blank\" rel=\"external\">Nathan Grigg</a> and <a href=\"https://github.com/drdrang\" target=\"_blank\" rel=\"external\">Dr. Drang</a>) and<br>Brainfuck (by <a href=\"https://github.com/bolknote\" target=\"_blank\" rel=\"external\">Evgeny Stepanischev</a>).</p>\n</li>\n<li><p>Improvements to existing languages:</p>\n<ul>\n<li>interpreter prompt in Python (<code>&gt;&gt;&gt;</code> and <code>...</code>)</li>\n<li>@-properties and classes in CoffeeScript</li>\n<li>E4X in JavaScript (by <a href=\"https://github.com/Sannis\" target=\"_blank\" rel=\"external\">Oleg Efimov</a>)</li>\n<li>new keywords in Perl (by <a href=\"https://github.com/kimmel\" target=\"_blank\" rel=\"external\">Kirk Kimmel</a>)</li>\n<li>big Ruby syntax update (by <a href=\"https://github.com/vast\" target=\"_blank\" rel=\"external\">Vasily Polovnyov</a>)</li>\n<li>small fixes in Bash</li>\n</ul>\n</li>\n<li><p>Also Oleg Efimov did a great job of moving all the docs for language and style<br>developers and contributors from the old wiki under the source code in the<br>“docs” directory. Now these docs are nicely presented at<br><a href=\"http://highlightjs.readthedocs.org/\" target=\"_blank\" rel=\"external\">http://highlightjs.readthedocs.org/</a>.</p>\n</li>\n</ul>\n<h2 id=\"Version_7-2\">Version 7.2</h2>\n<p>A regular bug-fix release without any significant new features. Enjoy!</p>\n<h2 id=\"Version_7-1\">Version 7.1</h2>\n<p>A Summer crop:</p>\n<ul>\n<li><a href=\"https://github.com/mfornos\" target=\"_blank\" rel=\"external\">Marc Fornos</a> made the definition for Clojure along with the matching<br>style Rainbow (which, of course, works for other languages too).</li>\n<li>CoffeeScript support continues to improve getting support for regular<br>expressions.</li>\n<li>Yoshihide Jimbo ported to highlight.js <a href=\"http://jmblog.github.com/color-themes-for-highlightjs/\" target=\"_blank\" rel=\"external\">five Tomorrow styles</a> from the<br><a href=\"https://github.com/ChrisKempson/Tomorrow-Theme\" target=\"_blank\" rel=\"external\">project by Chris Kempson</a>.</li>\n<li>Thanks to <a href=\"https://github.com/caseman\" target=\"_blank\" rel=\"external\">Casey Duncun</a> the library can now be built in the popular<br><a href=\"http://requirejs.org/docs/whyamd.html\" target=\"_blank\" rel=\"external\">AMD format</a>.</li>\n<li>And last but not least, we’ve got a fair number of correctness and consistency<br>fixes, including a pretty significant refactoring of Ruby.</li>\n</ul>\n<h2 id=\"Version_7-0\">Version 7.0</h2>\n<p>The reason for the new major version update is a global change of keyword syntax<br>which resulted in the library getting smaller once again. For example, the<br>hosted build is 2K less than at the previous version while supporting two new<br>languages.</p>\n<p>Notable changes:</p>\n<ul>\n<li><p>The library now works not only in a browser but also with <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"external\">node.js</a>. It is<br>installable with <code>npm install highlight.js</code>. <a href=\"http://softwaremaniacs.org/wiki/doku.php/highlight.js:api\" target=\"_blank\" rel=\"external\">API</a> docs are available on our<br>wiki.</p>\n</li>\n<li><p>The new unique feature (apparently) among syntax highlighters is highlighting<br><em>HTTP</em> headers and an arbitrary language in the request body. The most useful<br>languages here are <em>XML</em> and <em>JSON</em> both of which highlight.js does support.<br>Here’s <a href=\"http://bazaar.launchpad.net/~isagalaev/+junk/highlight/annotate/342/src/wp_highlight.js.php\" target=\"_blank\" rel=\"external\">the detailed post</a> about the feature.</p>\n</li>\n<li><p>Two new style themes: a dark “south” <em><a href=\"http://web-cms-designs.com/ftopict-10-pojoaque-style-for-highlight-js-code-highlighter.html\" target=\"_blank\" rel=\"external\">Pojoaque</a></em> by Jason Tate and an<br>emulation of<em>XCode</em> IDE by <a href=\"https://github.com/angelolloqui\" target=\"_blank\" rel=\"external\">Angel Olloqui</a>.</p>\n</li>\n<li><p>Three new languages: <em>D</em> by <a href=\"https://github.com/raleksandar\" target=\"_blank\" rel=\"external\">Aleksandar Ružičić</a>, <em>R</em> by <a href=\"https://github.com/seejohnrun\" target=\"_blank\" rel=\"external\">Joe Cheng</a><br>and <em>GLSL</em> by <a href=\"https://github.com/tikhomirov\" target=\"_blank\" rel=\"external\">Sergey Tikhomirov</a>.</p>\n</li>\n<li><p><em>Nginx</em> syntax has become a million times smaller and more universal thanks to<br>remaking it in a more generic manner that doesn’t require listing all the<br>directives in the known universe.</p>\n</li>\n<li><p>Function titles are now highlighted in <em>PHP</em>.</p>\n</li>\n<li><p><em>Haskell</em> and <em>VHDL</em> were significantly reworked to be more rich and correct<br>by their respective maintainers <a href=\"https://github.com/sourrust\" target=\"_blank\" rel=\"external\">Jeremy Hull</a> and <a href=\"http://kalnitsky.org.ua/\" target=\"_blank\" rel=\"external\">Igor Kalnitsky</a>.</p>\n</li>\n</ul>\n<p>And last but not least, many bugs have been fixed around correctness and<br>language detection.</p>\n<p>Overall highlight.js currently supports 51 languages and 20 style themes.</p>\n<h2 id=\"Version_6-2\">Version 6.2</h2>\n<p>A lot of things happened in highlight.js since the last version! We’ve got nine<br>new contributors, the discussion group came alive, and the main branch on GitHub<br>now counts more than 350 followers. Here are most significant results coming<br>from all this activity:</p>\n<ul>\n<li><p>5 (five!) new languages: Rust, ActionScript, CoffeeScript, MatLab and<br>experimental support for markdown. Thanks go to <a href=\"https://github.com/vlasovskikh\" target=\"_blank\" rel=\"external\">Andrey Vlasovskikh</a>,<br><a href=\"https://github.com/myadzel\" target=\"_blank\" rel=\"external\">Alexander Myadzel</a>, <a href=\"https://github.com/dnagir\" target=\"_blank\" rel=\"external\">Dmytrii Nagirniak</a>, <a href=\"https://github.com/Sannis\" target=\"_blank\" rel=\"external\">Oleg Efimov</a>, <a href=\"https://github.com/btd\" target=\"_blank\" rel=\"external\">Denis<br>Bardadym</a> and <a href=\"https://github.com/seejohnrun\" target=\"_blank\" rel=\"external\">John Crepezzi</a>.</p>\n</li>\n<li><p>2 new style themes: Monokai by <a href=\"http://grigio.org/\" target=\"_blank\" rel=\"external\">Luigi Maselli</a> and stylistic imitation of<br>another well-known highlighter Google Code Prettify by <a href=\"http://anton.kovalyov.net/\" target=\"_blank\" rel=\"external\">Aahan Krish</a>.</p>\n</li>\n<li><p>A vast number of <a href=\"https://github.com/isagalaev/highlight.js/commits/\" target=\"_blank\" rel=\"external\">correctness fixes and code refactorings</a>, mostly made<br>by <a href=\"https://github.com/Sannis\" target=\"_blank\" rel=\"external\">Oleg Efimov</a> and <a href=\"https://github.com/bolknote\" target=\"_blank\" rel=\"external\">Evgeny Stepanischev</a>.</p>\n</li>\n</ul>\n<h2 id=\"Version_6-1_—_Solarized\">Version 6.1 — Solarized</h2>\n<p><a href=\"https://github.com/sourrust\" target=\"_blank\" rel=\"external\">Jeremy Hull</a> has implemented my dream feature — a port of <a href=\"http://ethanschoonover.com/solarized\" target=\"_blank\" rel=\"external\">Solarized</a><br>style theme famous for being based on the intricate color theory to achieve<br>correct contrast and color perception. It is now available for highlight.js in<br>both variants — light and dark.</p>\n<p>This version also adds a new original style Arta. Its author pumbur maintains a<br><a href=\"https://github.com/pumbur/highlight.js\" target=\"_blank\" rel=\"external\">heavily modified fork of highlight.js</a> on GitHub.</p>\n<h2 id=\"Version_6-0\">Version 6.0</h2>\n<p>New major version of the highlighter has been built on a significantly<br>refactored syntax. Due to this it’s even smaller than the previous one while<br>supporting more languages!</p>\n<p>New languages are:</p>\n<ul>\n<li>Haskell by <a href=\"https://github.com/sourrust\" target=\"_blank\" rel=\"external\">Jeremy Hull</a></li>\n<li>Erlang in two varieties — module and REPL — made collectively by <a href=\"http://desh.su/\" target=\"_blank\" rel=\"external\">Nikolay<br>Zakharov</a>, <a href=\"https://github.com/arhibot\" target=\"_blank\" rel=\"external\">Dmitry Kovega</a> and <a href=\"https://github.com/ignatov\" target=\"_blank\" rel=\"external\">Sergey Ignatov</a></li>\n<li>Objective C by <a href=\"https://github.com/vhbit\" target=\"_blank\" rel=\"external\">Valerii Hiora</a></li>\n<li>Vala by <a href=\"https://github.com/antono\" target=\"_blank\" rel=\"external\">Antono Vasiljev</a></li>\n<li>Go by <a href=\"https://github.com/steplg\" target=\"_blank\" rel=\"external\">Stephan Kountso</a></li>\n</ul>\n<p>Also this version is marginally faster and fixes a number of small long-standing<br>bugs.</p>\n<p>Developer overview of the new language syntax is available in a <a href=\"http://softwaremaniacs.org/blog/2011/04/25/highlight-js-60-beta/en/\" target=\"_blank\" rel=\"external\">blog post about<br>recent beta release</a>.</p>\n<p>P.S. New version is not yet available on a Yandex’ CDN, so for now you have to<br>download <a href=\"/soft/highlight/en/download/\">your own copy</a>.</p>\n<h2 id=\"Version_5-14\">Version 5.14</h2>\n<p>Fixed bugs in HTML/XML detection and relevance introduced in previous<br>refactoring.</p>\n<p>Also test.html now shows the second best result of language detection by<br>relevance.</p>\n<h2 id=\"Version_5-13\">Version 5.13</h2>\n<p>Past weekend began with a couple of simple additions for existing languages but<br>ended up in a big code refactoring bringing along nice improvements for language<br>developers.</p>\n<h3 id=\"For_users\">For users</h3>\n<ul>\n<li>Description of C++ has got new keywords from the upcoming <a href=\"http://ru.wikipedia.org/wiki/C%2B%2B0x\" target=\"_blank\" rel=\"external\">C++ 0x</a> standard.</li>\n<li>Description of HTML has got new tags from <a href=\"http://en.wikipedia.org/wiki/HTML5\" target=\"_blank\" rel=\"external\">HTML 5</a>.</li>\n<li>CSS-styles have been unified to use consistent padding and also have lost<br>pop-outs with names of detected languages.</li>\n<li><a href=\"http://kalnitsky.org.ua/\" target=\"_blank\" rel=\"external\">Igor Kalnitsky</a> has sent two new language descriptions: CMake и VHDL.</li>\n</ul>\n<p>This makes total number of languages supported by highlight.js to reach 35.</p>\n<p>Bug fixes:</p>\n<ul>\n<li>Custom classes on <code>&lt;pre&gt;</code> tags are not being overridden anymore</li>\n<li>More correct highlighting of code blocks inside non-<code>&lt;pre&gt;</code> containers:<br>highlighter now doesn’t insist on replacing them with its own container and<br>just replaces the contents.</li>\n<li>Small fixes in browser compatibility and heuristics.</li>\n</ul>\n<h3 id=\"For_developers\">For developers</h3>\n<p>The most significant change is the ability to include language submodes right<br>under <code>contains</code> instead of defining explicit named submodes in the main array:</p>\n<pre><code><span class=\"operator\">contains</span>: [\n  <span class=\"string\">'string'</span>,\n  <span class=\"string\">'number'</span>,\n  {begin: <span class=\"string\">'\\\\n'</span>, <span class=\"function\"><span class=\"keyword\">end</span>: <span class=\"title\">hljs</span>.<span class=\"title\">IMMEDIATE_RE</span>}</span>\n]\n</code></pre><p>This is useful for auxiliary modes needed only in one place to define parsing.<br>Note that such modes often don’t have <code>className</code> and hence won’t generate a<br>separate <code>&lt;span&gt;</code> in the resulting markup. This is similar in effect to<br><code>noMarkup: true</code>. All existing languages have been refactored accordingly.</p>\n<p>Test file test.html has at last become a real test. Now it not only puts the<br>detected language name under the code snippet but also tests if it matches the<br>expected one. Test summary is displayed right above all language snippets.</p>\n<h2 id=\"CDN\">CDN</h2>\n<p>Fine people at <a href=\"http://yandex.com/\" target=\"_blank\" rel=\"external\">Yandex</a> agreed to host highlight.js on their big fast servers.<br><a href=\"http://softwaremaniacs.org/soft/highlight/en/download/\" target=\"_blank\" rel=\"external\">Link up</a>!</p>\n<h2 id=\"Version_5-10_—_“Paris”-\">Version 5.10 — “Paris”.</h2>\n<p>Though I’m on a vacation in Paris, I decided to release a new version with a<br>couple of small fixes:</p>\n<ul>\n<li>Tomas Vitvar discovered that TAB replacement doesn’t always work when used<br>with custom markup in code</li>\n<li>SQL parsing is even more rigid now and doesn’t step over SmallTalk in tests</li>\n</ul>\n<h2 id=\"Version_5-9\">Version 5.9</h2>\n<p>A long-awaited version is finally released.</p>\n<p>New languages:</p>\n<ul>\n<li>Andrew Fedorov made a definition for Lua</li>\n<li>a long-time highlight.js contributor <a href=\"http://kung-fu-tzu.ru/\" target=\"_blank\" rel=\"external\">Peter Leonov</a> made a definition for<br>Nginx config</li>\n<li><a href=\"http://fulc.ru/\" target=\"_blank\" rel=\"external\">Vladimir Moskva</a> made a definition for TeX</li>\n</ul>\n<p>Fixes for existing languages:</p>\n<ul>\n<li><a href=\"http://gnuu.org/\" target=\"_blank\" rel=\"external\">Loren Segal</a> reworked the Ruby definition and added highlighting for<br><a href=\"http://yardoc.org/\" target=\"_blank\" rel=\"external\">YARD</a> inline documentation</li>\n<li>the definition of SQL has become more solid and now it shouldn’t be overly<br>greedy when it comes to language detection</li>\n</ul>\n<p>The highlighter has become more usable as a library allowing to do highlighting<br>from initialization code of JS frameworks and in ajax methods (see.<br>readme.eng.txt).</p>\n<p>Also this version drops support for the <a href=\"http://wordpress.org/\" target=\"_blank\" rel=\"external\">WordPress</a> plugin. Everyone is<br>welcome to <a href=\"http://bazaar.launchpad.net/~isagalaev/+junk/highlight/annotate/342/src/wp_highlight.js.php\" target=\"_blank\" rel=\"external\">pick up its maintenance</a> if needed.</p>\n<h2 id=\"Version_5-8\">Version 5.8</h2>\n<ul>\n<li>Jan Berkel has contributed a definition for Scala. +1 to hotness!</li>\n<li>All CSS-styles are rewritten to work only inside <code>&lt;pre&gt;</code> tags to avoid<br>conflicts with host site styles.</li>\n</ul>\n<h2 id=\"Version_5-7-\">Version 5.7.</h2>\n<p>Fixed escaping of quotes in VBScript strings.</p>\n<h2 id=\"Version_5-5\">Version 5.5</h2>\n<p>This version brings a small change: now .ini-files allow digits, underscores and<br>square brackets in key names.</p>\n<h2 id=\"Version_5-4\">Version 5.4</h2>\n<p>Fixed small but upsetting bug in the packer which caused incorrect highlighting<br>of explicitly specified languages. Thanks to Andrew Fedorov for precise<br>diagnostics!</p>\n<h2 id=\"Version_5-3\">Version 5.3</h2>\n<p>The version to fulfil old promises.</p>\n<p>The most significant change is that highlight.js now preserves custom user<br>markup in code along with its own highlighting markup. This means that now it’s<br>possible to use, say, links in code. Thanks to <a href=\"http://dolzhenko.blogspot.com/\" target=\"_blank\" rel=\"external\">Vladimir Dolzhenko</a> for the<br><a href=\"http://roudakov.ru/\" target=\"_blank\" rel=\"external\">initial proposal</a> and for making a proof-of-concept patch.</p>\n<p>Also in this version:</p>\n<ul>\n<li><a href=\"http://vasily.polovnyov.ru/\" target=\"_blank\" rel=\"external\">Vasily Polovnyov</a> has sent a GitHub-like style and has implemented<br>support for CSS @-rules and Ruby symbols.</li>\n<li>Yura Zaripov has sent two styles: Brown Paper and School Book.</li>\n<li>Oleg Volchkov has sent a definition for <a href=\"http://www.parser.ru/\" target=\"_blank\" rel=\"external\">Parser 3</a>.</li>\n</ul>\n<h2 id=\"Version_5-2\">Version 5.2</h2>\n<ul>\n<li>at last it’s possible to replace indentation TABs with something sensible (e.g. 2 or 4 spaces)</li>\n<li>new keywords and built-ins for 1C by Sergey Baranov</li>\n<li>a couple of small fixes to Apache highlighting</li>\n</ul>\n<h2 id=\"Version_5-1\">Version 5.1</h2>\n<p>This is one of those nice version consisting entirely of new and shiny<br>contributions!</p>\n<ul>\n<li><a href=\"http://vehq.ru/about/\" target=\"_blank\" rel=\"external\">Vladimir Ermakov</a> created highlighting for AVR Assembler</li>\n<li><a href=\"http://rukeba.com/\" target=\"_blank\" rel=\"external\">Ruslan Keba</a> created highlighting for Apache config file. Also his<br>original visual style for it is now available for all highlight.js languages<br>under the name “Magula”.</li>\n<li><a href=\"http://drakeguan.org/\" target=\"_blank\" rel=\"external\">Shuen-Huei Guan</a> (aka Drake) sent new keywords for RenderMan<br>languages. Also thanks go to <a href=\"http://k-evdokimenko.moikrug.ru/\" target=\"_blank\" rel=\"external\">Konstantin Evdokimenko</a> for his advice on<br>the matter.</li>\n</ul>\n<h2 id=\"Version_5-0\">Version 5.0</h2>\n<p>The main change in the new major version of highlight.js is a mechanism for<br>packing several languages along with the library itself into a single compressed<br>file. Now sites using several languages will load considerably faster because<br>the library won’t dynamically include additional files while loading.</p>\n<p>Also this version fixes a long-standing bug with Javascript highlighting that<br>couldn’t distinguish between regular expressions and division operations.</p>\n<p>And as usually there were a couple of minor correctness fixes.</p>\n<p>Great thanks to all contributors! Keep using highlight.js.</p>\n<h2 id=\"Version_4-3\">Version 4.3</h2>\n<p>This version comes with two contributions from <a href=\"http://jason.diamond.name/weblog/\" target=\"_blank\" rel=\"external\">Jason Diamond</a>:</p>\n<ul>\n<li>language definition for C# (yes! it was a long-missed thing!)</li>\n<li>Visual Studio-like highlighting style</li>\n</ul>\n<p>Plus there are a couple of minor bug fixes for parsing HTML and XML attributes.</p>\n<h2 id=\"Version_4-2\">Version 4.2</h2>\n<p>The biggest news is highlighting for Lisp, courtesy of Vasily Polovnyov. It’s<br>somewhat experimental meaning that for highlighting “keywords” it doesn’t use<br>any pre-defined set of a Lisp dialect. Instead it tries to highlight first word<br>in parentheses wherever it makes sense. I’d like to ask people programming in<br>Lisp to confirm if it’s a good idea and send feedback to <a href=\"http://softwaremaniacs.org/forum/viewforum.php?id=6\" target=\"_blank\" rel=\"external\">the forum</a>.</p>\n<p>Other changes:</p>\n<ul>\n<li>Smalltalk was excluded from DEFAULT_LANGUAGES to save traffic</li>\n<li><a href=\"http://voldmar.ya.ru/\" target=\"_blank\" rel=\"external\">Vladimir Epifanov</a> has implemented javascript style switcher for<br>test.html</li>\n<li>comments now allowed inside Ruby function definition</li>\n<li><a href=\"http://en.wikipedia.org/wiki/Maya_Embedded_Language\" target=\"_blank\" rel=\"external\">MEL</a> language from <a href=\"http://drakeguan.org/\" target=\"_blank\" rel=\"external\">Shuen-Huei Guan</a></li>\n<li>whitespace now allowed between <code>&lt;pre&gt;</code> and <code>&lt;code&gt;</code></li>\n<li>better auto-detection of C++ and PHP</li>\n<li>HTML allows embedded VBScript (<code>&lt;% .. %&gt;</code>)</li>\n</ul>\n<h2 id=\"Version_4-1\">Version 4.1</h2>\n<p>Languages:</p>\n<ul>\n<li>Bash from Vah</li>\n<li>DOS bat-files from Alexander Makarov (Sam)</li>\n<li>Diff files from Vasily Polovnyov</li>\n<li>Ini files from myself though initial idea was from Sam</li>\n</ul>\n<p>Styles:</p>\n<ul>\n<li>Zenburn from Vladimir Epifanov, this is an imitation of a<br><a href=\"http://en.wikipedia.org/wiki/Zenburn\" target=\"_blank\" rel=\"external\">well-known theme for Vim</a>.</li>\n<li>Ascetic from myself, as a realization of ideals of non-flashy highlighting:<br>just one color in only three gradations :-)</li>\n</ul>\n<p>In other news. <a href=\"http://softwaremaniacs.org/forum/viewtopic.php?id=1823\" target=\"_blank\" rel=\"external\">One small bug</a> was fixed, built-in keywords were added for<br>Python and C++ which improved auto-detection for the latter (it was shame that<br><a href=\"http://alenacpp.blogspot.com/\" target=\"_blank\" rel=\"external\">my wife’s blog</a> had issues with it from time to time). And lastly<br>thanks go to Sam for getting rid of my stylistic comments in code that were<br>getting in the way of <a href=\"http://code.google.com/p/jsmin-php/\" target=\"_blank\" rel=\"external\">JSMin</a>.</p>\n<h2 id=\"Version_4-0\">Version 4.0</h2>\n<p>New major version is a result of vast refactoring and of many contributions.</p>\n<p>Visible new features:</p>\n<ul>\n<li>Highlighting of embedded languages. Currently is implemented highlighting of<br>Javascript and CSS inside HTML.</li>\n<li>Bundled 5 ready-made style themes!</li>\n</ul>\n<p>Invisible new features:</p>\n<ul>\n<li>Highlight.js no longer pollutes global namespace. Only one object and one<br>function for backward compatibility.</li>\n<li>Performance is further increased by about 15%.</li>\n</ul>\n<p>Changing of a major version number caused by a new format of language definition<br>files. If you use some third-party language files they should be updated.</p>\n<h2 id=\"Version_3-5\">Version 3.5</h2>\n<p>A very nice version in my opinion fixing a number of small bugs and slightly<br>increased speed in a couple of corner cases. Thanks to everybody who reports<br>bugs in he <a href=\"http://softwaremaniacs.org/forum/viewforum.php?id=6\" target=\"_blank\" rel=\"external\">forum</a> and by email!</p>\n<p>There is also a new language — XML. A custom XML formerly was detected as HTML<br>and didn’t highlight custom tags. In this version I tried to make custom XML to<br>be detected and highlighted by its own rules. Which by the way include such<br>things as CDATA sections and processing instructions (<code>&lt;? ... ?&gt;</code>).</p>\n<h2 id=\"Version_3-3\">Version 3.3</h2>\n<p><a href=\"http://xonixx.blogspot.com/\" target=\"_blank\" rel=\"external\">Vladimir Gubarkov</a> has provided an interesting and useful addition.<br>File export.html contains a little program that shows and allows to copy and<br>paste an HTML code generated by the highlighter for any code snippet. This can<br>be useful in situations when one can’t use the script itself on a site.</p>\n<h2 id=\"Version_3-2_consists_completely_of_contributions:\">Version 3.2 consists completely of contributions:</h2>\n<ul>\n<li>Vladimir Gubarkov has described SmallTalk</li>\n<li>Yuri Ivanov has described 1C</li>\n<li>Peter Leonov has packaged the highlighter as a Firefox extension</li>\n<li>Vladimir Ermakov has compiled a mod for phpBB</li>\n</ul>\n<p>Many thanks to you all!</p>\n<h2 id=\"Version_3-1\">Version 3.1</h2>\n<p>Three new languages are available: Django templates, SQL and Axapta. The latter<br>two are sent by <a href=\"http://roudakov.ru/\" target=\"_blank\" rel=\"external\">Dmitri Roudakov</a>. However I’ve almost entirely rewrote an<br>SQL definition but I’d never started it be it from the ground up :-)</p>\n<p>The engine itself has got a long awaited feature of grouping keywords<br>(“keyword”, “built-in function”, “literal”). No more hacks!</p>\n<h2 id=\"Version_3-0\">Version 3.0</h2>\n<p>It is major mainly because now highlight.js has grown large and has become<br>modular. Now when you pass it a list of languages to highlight it will<br>dynamically load into a browser only those languages.</p>\n<p>Also:</p>\n<ul>\n<li>Konstantin Evdokimenko of <a href=\"http://ribkit.sourceforge.net/\" target=\"_blank\" rel=\"external\">RibKit</a> project has created a highlighting for<br>RenderMan Shading Language and RenderMan Interface Bytestream. Yay for more<br>languages!</li>\n<li>Heuristics for C++ and HTML got better.</li>\n<li>I’ve implemented (at last) a correct handling of backslash escapes in C-like<br>languages.</li>\n</ul>\n<p>There is also a small backwards incompatible change in the new version. The<br>function initHighlighting that was used to initialize highlighting instead of<br>initHighlightingOnLoad a long time ago no longer works. If you by chance still<br>use it — replace it with the new one.</p>\n<h2 id=\"Version_2-9\">Version 2.9</h2>\n<p>Highlight.js is a parser, not just a couple of regular expressions. That said<br>I’m glad to announce that in the new version 2.9 has support for:</p>\n<ul>\n<li>in-string substitutions for Ruby — <code>#{...}</code></li>\n<li>strings from from numeric symbol codes (like #XX) for Delphi</li>\n</ul>\n<h2 id=\"Version_2-8\">Version 2.8</h2>\n<p>A maintenance release with more tuned heuristics. Fully backwards compatible.</p>\n<h2 id=\"Version_2-7\">Version 2.7</h2>\n<ul>\n<li>Nikita Ledyaev presents highlighting for VBScript, yay!</li>\n<li>A couple of bugs with escaping in strings were fixed thanks to Mickle</li>\n<li>Ongoing tuning of heuristics</li>\n</ul>\n<p>Fixed bugs were rather unpleasant so I encourage everyone to upgrade!</p>\n<h2 id=\"Version_2-4\">Version 2.4</h2>\n<ul>\n<li>Peter Leonov provides another improved highlighting for Perl</li>\n<li>Javascript gets a new kind of keywords — “literals”. These are the words<br>“true”, “false” and “null”</li>\n</ul>\n<p>Also highlight.js homepage now lists sites that use the library. Feel free to<br>add your site by <a href=\"mailto:Maniac@SoftwareManiacs.Org\" target=\"_blank\" rel=\"external\">dropping me a message</a> until I find the time to build a<br>submit form.</p>\n<h2 id=\"Version_2-3\">Version 2.3</h2>\n<p>This version fixes IE breakage in previous version. My apologies to all who have<br>already downloaded that one!</p>\n<h2 id=\"Version_2-2\">Version 2.2</h2>\n<ul>\n<li>added highlighting for Javascript</li>\n<li>at last fixed parsing of Delphi’s escaped apostrophes in strings</li>\n<li>in Ruby fixed highlighting of keywords ‘def’ and ‘class’, same for ‘sub’ in<br>Perl</li>\n</ul>\n<h2 id=\"Version_2-0\">Version 2.0</h2>\n<ul>\n<li>Ruby support by <a href=\"http://anton.kovalyov.net/\" target=\"_blank\" rel=\"external\">Anton Kovalyov</a></li>\n<li>speed increased by orders of magnitude due to new way of parsing</li>\n<li>this same way allows now correct highlighting of keywords in some tricky<br>places (like keyword “End” at the end of Delphi classes)</li>\n</ul>\n<h2 id=\"Version_1-0\">Version 1.0</h2>\n<p>Version 1.0 of javascript syntax highlighter is released!</p>\n<p>It’s the first version available with English description. Feel free to post<br>your comments and question to <a href=\"http://softwaremaniacs.org/forum/viewforum.php?id=6\" target=\"_blank\" rel=\"external\">highlight.js forum</a>. And don’t be afraid<br>if you find there some fancy Cyrillic letters — it’s for Russian users too :-)</p>\n","source":"blog/js/highlight/CHANGES.md","raw":"## Version 8.0 beta\n\nThis new major release is quite a big overhaul bringing both new features and\nsome backwards incompatible changes. However, chances are that the majority of\nusers won't be affected by the latter: the basic scenario described in the\nREADME is left intact.\n\nHere's what did change in an incompatible way:\n\n- We're now prefixing all classes located in [CSS classes reference][cr] with\n  `hljs-`, by default, because some class names would collide with other\n  people's stylesheets. If you were using an older version, you might still want\n  the previous behavior, but still want to upgrade. To suppress this new\n  behavior, you would initialize like so:\n\n  ```html\n  <script type=\"text/javascript\">\n    hljs.configure({classPrefix: ''});\n    hljs.initHighlightingOnLoad();\n  </script>\n  ```\n\n- `tabReplace` and `useBR` that were used in different places are also unified\n  into the global options object and are to be set using `configure(options)`.\n  This function is documented in our [API docs][]. Also note that these\n  parameters are gone from `highlightBlock` and `fixMarkup` which are now also\n  rely on `configure`.\n\n- We removed public-facing (though undocumented) object `hljs.LANGUAGES` which\n  was used to register languages with the library in favor of two new methods:\n  `registerLanguage` and `getLanguage`. Both are documented in our [API docs][].\n\n- Result returned from `highlight` and `highlightAuto` no longer contains two\n  separate attributes contributing to relevance score, `relevance` and\n  `keyword_count`. They are now unified in `relevance`.\n\nAnother technically compatible change that nonetheless might need attention:\n\n- The structure of the NPM package was refactored, so if you had installed it\n  locally, you'll have to update your paths. The usual `require('highlight.js')`\n  works as before. This is contributed by [Dmitry Smolin][].\n\nNew features:\n\n- Languages now can be recognized by multiple names like \"js\" for JavaScript or\n  \"html\" for, well, HTML (which earlier insisted on calling it \"xml\"). These\n  aliases can be specified in the class attribute of the code container in your\n  HTML as well as in various API calls. For now there are only a few very common\n  aliases but we'll expand it in the future. All of them are listed in the\n  [class reference][].\n\n- Language detection can now be restricted to a subset of languages relevant in\n  a given context — a web page or even a single highlighting call. This is\n  especially useful for node.js build that includes all the known languages.\n  Another example is a StackOverflow-style site where users specify languages\n  as tags rather than in the markdown-formatted code snippets. This is\n  documented in the [API reference][] (see methods `highlightAuto` and\n  `configure`).\n\n- Language definition syntax streamlined with [variants][] and\n  [beginKeywords][].\n\nNew languages and styles:\n\n- *Oxygene* by [Carlo Kok][]\n- *Mathematica* by [Daniel Kvasnička][]\n- *Autohotkey* by [Seongwon Lee][]\n- *Atelier* family of styles in 10 variants by [Bram de Haan][]\n- *Paraíso* styles by [Jan T. Sott][]\n\nMiscelleanous improvements:\n\n- Highlighting `=>` prompts in Clojure.\n- [Jeremy Hull][] fixed a lot of styles for consistency.\n- Finally, highlighting PHP and HTML [mixed in peculiar ways][php-html].\n- Objective C and C# now properly highlight titles in method definition.\n- Big overhaul of relevance counting for a number of languages. Please do report\n  bugs about mis-detection of non-trivial code snippets!\n\n[cr]: http://highlightjs.readthedocs.org/en/latest/css-classes-reference.html\n[api docs]: http://highlightjs.readthedocs.org/en/latest/api.html\n[variants]: https://groups.google.com/d/topic/highlightjs/VoGC9-1p5vk/discussion\n[beginKeywords]: https://github.com/isagalaev/highlight.js/commit/6c7fdea002eb3949577a85b3f7930137c7c3038d\n[php-html]: https://twitter.com/highlightjs/status/408890903017689088\n\n[Carlo Kok]: https://github.com/carlokok\n[Bram de Haan]: https://github.com/atelierbram\n[Daniel Kvasnička]: https://github.com/dkvasnicka\n[Dmitry Smolin]: https://github.com/dimsmol\n[Jeremy Hull]: https://github.com/sourrust\n[Seongwon Lee]: https://github.com/dlimpid\n[Jan T. Sott]: https://github.com/idleberg\n\n\n## Version 7.5\n\nA catch-up release dealing with some of the accumulated contributions. This one\nis probably will be the last before the 8.0 which will be slightly backwards\nincompatible regarding some advanced use-cases.\n\nOne outstanding change in this version is the addition of 6 languages to the\n[hosted script][d]: Markdown, ObjectiveC, CoffeeScript, Apache, Nginx and\nMakefile. It now weighs about 6K more but we're going to keep it under 30K.\n\nNew languages:\n\n- OCaml by [Mehdi Dogguy][mehdid] and [Nicolas Braud-Santoni][nbraud]\n- [LiveCode Server][lcs] by [Ralf Bitter][revig]\n- Scilab by [Sylvestre Ledru][sylvestre]\n- basic support for Makefile by [Ivan Sagalaev][isagalaev]\n\nImprovements:\n\n- Ruby's got support for characters like `?A`, `?1`, `?\\012` etc. and `%r{..}`\n  regexps.\n- Clojure now allows a function call in the beginning of s-expressions\n  `(($filter \"myCount\") (arr 1 2 3 4 5))`.\n- Haskell's got new keywords and now recognizes more things like pragmas,\n  preprocessors, modules, containers, FFIs etc. Thanks to [Zena Treep][treep]\n  for the implementation and to [Jeremy Hull][sourrust] for guiding it.\n- Miscelleanous fixes in PHP, Brainfuck, SCSS, Asciidoc, CMake, Python and F#.\n\n[mehdid]: https://github.com/mehdid\n[nbraud]: https://github.com/nbraud\n[revig]: https://github.com/revig\n[lcs]: http://livecode.com/developers/guides/server/\n[sylvestre]: https://github.com/sylvestre\n[isagalaev]: https://github.com/isagalaev\n[treep]: https://github.com/treep\n[sourrust]: https://github.com/sourrust\n[d]: http://highlightjs.org/download/\n\n\n## New core developers\n\nThe latest long period of almost complete inactivity in the project coincided\nwith growing interest to it led to a decision that now seems completely obvious:\nwe need more core developers.\n\nSo without further ado let me welcome to the core team two long-time\ncontributors: [Jeremy Hull][] and [Oleg\nEfimov][].\n\nHope now we'll be able to work through stuff faster!\n\nP.S. The historical commit is [here][1] for the record.\n\n[Jeremy Hull]: https://github.com/sourrust\n[Oleg Efimov]: https://github.com/sannis\n[1]: https://github.com/isagalaev/highlight.js/commit/f3056941bda56d2b72276b97bc0dd5f230f2473f\n\n\n## Version 7.4\n\nThis long overdue version is a snapshot of the current source tree with all the\nchanges that happened during the past year. Sorry for taking so long!\n\nAlong with the changes in code highlight.js has finally got its new home at\n<http://highlightjs.org/>, moving from its craddle on Software Maniacs which it\noutgrew a long time ago. Be sure to report any bugs about the site to\n<mailto:info@highlightjs.org>.\n\nOn to what's new…\n\nNew languages:\n\n- Handlebars templates by [Robin Ward][]\n- Oracle Rules Language by [Jason Jacobson][]\n- F# by [Joans Follesø][]\n- AsciiDoc and Haml by [Dan Allen][]\n- Lasso by [Eric Knibbe][]\n- SCSS by [Kurt Emch][]\n- VB.NET by [Poren Chiang][]\n- Mizar by [Kelley van Evert][]\n\n[Robin Ward]: https://github.com/eviltrout\n[Jason Jacobson]: https://github.com/jayce7\n[Joans Follesø]: https://github.com/follesoe\n[Dan Allen]: https://github.com/mojavelinux\n[Eric Knibbe]: https://github.com/EricFromCanada\n[Kurt Emch]: https://github.com/kemch\n[Poren Chiang]: https://github.com/rschiang\n[Kelley van Evert]: https://github.com/kelleyvanevert\n\nNew style themes:\n\n- Monokai Sublime by [noformnocontent][]\n- Railscasts by [Damien White][]\n- Obsidian by [Alexander Marenin][]\n- Docco by [Simon Madine][]\n- Mono Blue by [Ivan Sagalaev][] (uses a single color hue for everything)\n- Foundation by [Dan Allen][]\n\n[noformnocontent]: http://nn.mit-license.org/\n[Damien White]: https://github.com/visoft\n[Alexander Marenin]: https://github.com/ioncreature\n[Simon Madine]: https://github.com/thingsinjars\n[Ivan Sagalaev]: https://github.com/isagalaev\n\nOther notable changes:\n\n- Corrected many corner cases in CSS.\n- Dropped Python 2 version of the build tool.\n- Implemented building for the AMD format.\n- Updated Rust keywords (thanks to [Dmitry Medvinsky][]).\n- Literal regexes can now be used in language definitions.\n- CoffeeScript highlighting is now significantly more robust and rich due to\n  input from [Cédric Néhémie][].\n\n[Dmitry Medvinsky]: https://github.com/dmedvinsky\n[Cédric Néhémie]: https://github.com/abe33\n\n\n## Version 7.3\n\n- Since this version highlight.js no longer works in IE version 8 and older.\n  It's made it possible to reduce the library size and dramatically improve code\n  readability and made it easier to maintain. Time to go forward!\n\n- New languages: AppleScript (by [Nathan Grigg][ng] and [Dr. Drang][dd]) and\n  Brainfuck (by [Evgeny Stepanischev][bolk]).\n\n- Improvements to existing languages:\n\n    - interpreter prompt in Python (`>>>` and `...`)\n    - @-properties and classes in CoffeeScript\n    - E4X in JavaScript (by [Oleg Efimov][oe])\n    - new keywords in Perl (by [Kirk Kimmel][kk])\n    - big Ruby syntax update (by [Vasily Polovnyov][vast])\n    - small fixes in Bash\n\n- Also Oleg Efimov did a great job of moving all the docs for language and style\n  developers and contributors from the old wiki under the source code in the\n  \"docs\" directory. Now these docs are nicely presented at\n  <http://highlightjs.readthedocs.org/>.\n\n[ng]: https://github.com/nathan11g\n[dd]: https://github.com/drdrang\n[bolk]: https://github.com/bolknote\n[oe]: https://github.com/Sannis\n[kk]: https://github.com/kimmel\n[vast]: https://github.com/vast\n\n\n## Version 7.2\n\nA regular bug-fix release without any significant new features. Enjoy!\n\n\n## Version 7.1\n\nA Summer crop:\n\n- [Marc Fornos][mf] made the definition for Clojure along with the matching\n  style Rainbow (which, of course, works for other languages too).\n- CoffeeScript support continues to improve getting support for regular\n  expressions.\n- Yoshihide Jimbo ported to highlight.js [five Tomorrow styles][tm] from the\n  [project by Chris Kempson][tm0].\n- Thanks to [Casey Duncun][cd] the library can now be built in the popular\n  [AMD format][amd].\n- And last but not least, we've got a fair number of correctness and consistency\n  fixes, including a pretty significant refactoring of Ruby.\n\n[mf]: https://github.com/mfornos\n[tm]: http://jmblog.github.com/color-themes-for-highlightjs/\n[tm0]: https://github.com/ChrisKempson/Tomorrow-Theme\n[cd]: https://github.com/caseman\n[amd]: http://requirejs.org/docs/whyamd.html\n\n\n## Version 7.0\n\nThe reason for the new major version update is a global change of keyword syntax\nwhich resulted in the library getting smaller once again. For example, the\nhosted build is 2K less than at the previous version while supporting two new\nlanguages.\n\nNotable changes:\n\n- The library now works not only in a browser but also with [node.js][]. It is\n  installable with `npm install highlight.js`. [API][] docs are available on our\n  wiki.\n\n- The new unique feature (apparently) among syntax highlighters is highlighting\n  *HTTP* headers and an arbitrary language in the request body. The most useful\n  languages here are *XML* and *JSON* both of which highlight.js does support.\n  Here's [the detailed post][p] about the feature.\n\n- Two new style themes: a dark \"south\" *[Pojoaque][]* by Jason Tate and an\n  emulation of*XCode* IDE by [Angel Olloqui][ao].\n\n- Three new languages: *D* by [Aleksandar Ružičić][ar], *R* by [Joe Cheng][jc]\n  and *GLSL* by [Sergey Tikhomirov][st].\n\n- *Nginx* syntax has become a million times smaller and more universal thanks to\n  remaking it in a more generic manner that doesn't require listing all the\n  directives in the known universe.\n\n- Function titles are now highlighted in *PHP*.\n\n- *Haskell* and *VHDL* were significantly reworked to be more rich and correct\n  by their respective maintainers [Jeremy Hull][sr] and [Igor Kalnitsky][ik].\n\nAnd last but not least, many bugs have been fixed around correctness and\nlanguage detection.\n\nOverall highlight.js currently supports 51 languages and 20 style themes.\n\n[node.js]: http://nodejs.org/\n[api]: http://softwaremaniacs.org/wiki/doku.php/highlight.js:api\n[p]: http://softwaremaniacs.org/blog/2012/05/10/http-and-json-in-highlight-js/en/\n[pojoaque]: http://web-cms-designs.com/ftopict-10-pojoaque-style-for-highlight-js-code-highlighter.html\n[ao]: https://github.com/angelolloqui\n[ar]: https://github.com/raleksandar\n[jc]: https://github.com/jcheng5\n[st]: https://github.com/tikhomirov\n[sr]: https://github.com/sourrust\n[ik]: https://github.com/ikalnitsky\n\n\n## Version 6.2\n\nA lot of things happened in highlight.js since the last version! We've got nine\nnew contributors, the discussion group came alive, and the main branch on GitHub\nnow counts more than 350 followers. Here are most significant results coming\nfrom all this activity:\n\n- 5 (five!) new languages: Rust, ActionScript, CoffeeScript, MatLab and\n  experimental support for markdown. Thanks go to [Andrey Vlasovskikh][av],\n  [Alexander Myadzel][am], [Dmytrii Nagirniak][dn], [Oleg Efimov][oe], [Denis\n  Bardadym][db] and [John Crepezzi][jc].\n\n- 2 new style themes: Monokai by [Luigi Maselli][lm] and stylistic imitation of\n  another well-known highlighter Google Code Prettify by [Aahan Krish][ak].\n\n- A vast number of [correctness fixes and code refactorings][log], mostly made\n  by [Oleg Efimov][oe] and [Evgeny Stepanischev][es].\n\n[av]: https://github.com/vlasovskikh\n[am]: https://github.com/myadzel\n[dn]: https://github.com/dnagir\n[oe]: https://github.com/Sannis\n[db]: https://github.com/btd\n[jc]: https://github.com/seejohnrun\n[lm]: http://grigio.org/\n[ak]: https://github.com/geekpanth3r\n[es]: https://github.com/bolknote\n[log]: https://github.com/isagalaev/highlight.js/commits/\n\n\n## Version 6.1 — Solarized\n\n[Jeremy Hull][jh] has implemented my dream feature — a port of [Solarized][]\nstyle theme famous for being based on the intricate color theory to achieve\ncorrect contrast and color perception. It is now available for highlight.js in\nboth variants — light and dark.\n\nThis version also adds a new original style Arta. Its author pumbur maintains a\n[heavily modified fork of highlight.js][pb] on GitHub.\n\n[jh]: https://github.com/sourrust\n[solarized]: http://ethanschoonover.com/solarized\n[pb]: https://github.com/pumbur/highlight.js\n\n\n## Version 6.0\n\nNew major version of the highlighter has been built on a significantly\nrefactored syntax. Due to this it's even smaller than the previous one while\nsupporting more languages!\n\nNew languages are:\n\n- Haskell by [Jeremy Hull][sourrust]\n- Erlang in two varieties — module and REPL — made collectively by [Nikolay\n  Zakharov][desh], [Dmitry Kovega][arhibot] and [Sergey Ignatov][ignatov]\n- Objective C by [Valerii Hiora][vhbit]\n- Vala by [Antono Vasiljev][antono]\n- Go by [Stephan Kountso][steplg]\n\n[sourrust]: https://github.com/sourrust\n[desh]: http://desh.su/\n[arhibot]: https://github.com/arhibot\n[ignatov]: https://github.com/ignatov\n[vhbit]: https://github.com/vhbit\n[antono]: https://github.com/antono\n[steplg]: https://github.com/steplg\n\nAlso this version is marginally faster and fixes a number of small long-standing\nbugs.\n\nDeveloper overview of the new language syntax is available in a [blog post about\nrecent beta release][beta].\n\n[beta]: http://softwaremaniacs.org/blog/2011/04/25/highlight-js-60-beta/en/\n\nP.S. New version is not yet available on a Yandex' CDN, so for now you have to\ndownload [your own copy][d].\n\n[d]: /soft/highlight/en/download/\n\n\n## Version 5.14\n\nFixed bugs in HTML/XML detection and relevance introduced in previous\nrefactoring.\n\nAlso test.html now shows the second best result of language detection by\nrelevance.\n\n\n## Version 5.13\n\nPast weekend began with a couple of simple additions for existing languages but\nended up in a big code refactoring bringing along nice improvements for language\ndevelopers.\n\n### For users\n\n- Description of C++ has got new keywords from the upcoming [C++ 0x][] standard.\n- Description of HTML has got new tags from [HTML 5][].\n- CSS-styles have been unified to use consistent padding and also have lost\n  pop-outs with names of detected languages.\n- [Igor Kalnitsky][ik] has sent two new language descriptions: CMake и VHDL.\n\nThis makes total number of languages supported by highlight.js to reach 35.\n\nBug fixes:\n\n- Custom classes on `<pre>` tags are not being overridden anymore\n- More correct highlighting of code blocks inside non-`<pre>` containers:\n  highlighter now doesn't insist on replacing them with its own container and\n  just replaces the contents.\n- Small fixes in browser compatibility and heuristics.\n\n[c++ 0x]: http://ru.wikipedia.org/wiki/C%2B%2B0x\n[html 5]: http://en.wikipedia.org/wiki/HTML5\n[ik]: http://kalnitsky.org.ua/\n\n### For developers\n\nThe most significant change is the ability to include language submodes right\nunder `contains` instead of defining explicit named submodes in the main array:\n\n    contains: [\n      'string',\n      'number',\n      {begin: '\\\\n', end: hljs.IMMEDIATE_RE}\n    ]\n\nThis is useful for auxiliary modes needed only in one place to define parsing.\nNote that such modes often don't have `className` and hence won't generate a\nseparate `<span>` in the resulting markup. This is similar in effect to\n`noMarkup: true`. All existing languages have been refactored accordingly.\n\nTest file test.html has at last become a real test. Now it not only puts the\ndetected language name under the code snippet but also tests if it matches the\nexpected one. Test summary is displayed right above all language snippets.\n\n\n## CDN\n\nFine people at [Yandex][] agreed to host highlight.js on their big fast servers.\n[Link up][l]!\n\n[yandex]: http://yandex.com/\n[l]: http://softwaremaniacs.org/soft/highlight/en/download/\n\n\n## Version 5.10 — \"Paris\".\n\nThough I'm on a vacation in Paris, I decided to release a new version with a\ncouple of small fixes:\n\n- Tomas Vitvar discovered that TAB replacement doesn't always work when used\n  with custom markup in code\n- SQL parsing is even more rigid now and doesn't step over SmallTalk in tests\n\n\n## Version 5.9\n\nA long-awaited version is finally released.\n\nNew languages:\n\n- Andrew Fedorov made a definition for Lua\n- a long-time highlight.js contributor [Peter Leonov][pl] made a definition for\n  Nginx config\n- [Vladimir Moskva][vm] made a definition for TeX\n\n[pl]: http://kung-fu-tzu.ru/\n[vm]: http://fulc.ru/\n\nFixes for existing languages:\n\n- [Loren Segal][ls] reworked the Ruby definition and added highlighting for\n  [YARD][] inline documentation\n- the definition of SQL has become more solid and now it shouldn't be overly\n  greedy when it comes to language detection\n\n[ls]: http://gnuu.org/\n[yard]: http://yardoc.org/\n\nThe highlighter has become more usable as a library allowing to do highlighting\nfrom initialization code of JS frameworks and in ajax methods (see.\nreadme.eng.txt).\n\nAlso this version drops support for the [WordPress][wp] plugin. Everyone is\nwelcome to [pick up its maintenance][p] if needed.\n\n[wp]: http://wordpress.org/\n[p]: http://bazaar.launchpad.net/~isagalaev/+junk/highlight/annotate/342/src/wp_highlight.js.php\n\n\n## Version 5.8\n\n- Jan Berkel has contributed a definition for Scala. +1 to hotness!\n- All CSS-styles are rewritten to work only inside `<pre>` tags to avoid\n  conflicts with host site styles.\n\n\n## Version 5.7.\n\nFixed escaping of quotes in VBScript strings.\n\n\n## Version 5.5\n\nThis version brings a small change: now .ini-files allow digits, underscores and\nsquare brackets in key names.\n\n\n## Version 5.4\n\nFixed small but upsetting bug in the packer which caused incorrect highlighting\nof explicitly specified languages. Thanks to Andrew Fedorov for precise\ndiagnostics!\n\n\n## Version 5.3\n\nThe version to fulfil old promises.\n\nThe most significant change is that highlight.js now preserves custom user\nmarkup in code along with its own highlighting markup. This means that now it's\npossible to use, say, links in code. Thanks to [Vladimir Dolzhenko][vd] for the\n[initial proposal][1] and for making a proof-of-concept patch.\n\nAlso in this version:\n\n- [Vasily Polovnyov][vp] has sent a GitHub-like style and has implemented\n  support for CSS @-rules and Ruby symbols.\n- Yura Zaripov has sent two styles: Brown Paper and School Book.\n- Oleg Volchkov has sent a definition for [Parser 3][p3].\n\n[1]: http://softwaremaniacs.org/forum/highlightjs/6612/\n[p3]: http://www.parser.ru/\n[vp]: http://vasily.polovnyov.ru/\n[vd]: http://dolzhenko.blogspot.com/\n\n\n## Version 5.2\n\n- at last it's possible to replace indentation TABs with something sensible (e.g. 2 or 4 spaces)\n- new keywords and built-ins for 1C by Sergey Baranov\n- a couple of small fixes to Apache highlighting\n\n\n## Version 5.1\n\nThis is one of those nice version consisting entirely of new and shiny\ncontributions!\n\n- [Vladimir Ermakov][vooon] created highlighting for AVR Assembler\n- [Ruslan Keba][rukeba] created highlighting for Apache config file. Also his\n  original visual style for it is now available for all highlight.js languages\n  under the name \"Magula\".\n- [Shuen-Huei Guan][drake] (aka Drake) sent new keywords for RenderMan\n  languages. Also thanks go to [Konstantin Evdokimenko][ke] for his advice on\n  the matter.\n\n[vooon]: http://vehq.ru/about/\n[rukeba]: http://rukeba.com/\n[drake]: http://drakeguan.org/\n[ke]: http://k-evdokimenko.moikrug.ru/\n\n\n## Version 5.0\n\nThe main change in the new major version of highlight.js is a mechanism for\npacking several languages along with the library itself into a single compressed\nfile. Now sites using several languages will load considerably faster because\nthe library won't dynamically include additional files while loading.\n\nAlso this version fixes a long-standing bug with Javascript highlighting that\ncouldn't distinguish between regular expressions and division operations.\n\nAnd as usually there were a couple of minor correctness fixes.\n\nGreat thanks to all contributors! Keep using highlight.js.\n\n\n## Version 4.3\n\nThis version comes with two contributions from [Jason Diamond][jd]:\n\n- language definition for C# (yes! it was a long-missed thing!)\n- Visual Studio-like highlighting style\n\nPlus there are a couple of minor bug fixes for parsing HTML and XML attributes.\n\n[jd]: http://jason.diamond.name/weblog/\n\n\n## Version 4.2\n\nThe biggest news is highlighting for Lisp, courtesy of Vasily Polovnyov. It's\nsomewhat experimental meaning that for highlighting \"keywords\" it doesn't use\nany pre-defined set of a Lisp dialect. Instead it tries to highlight first word\nin parentheses wherever it makes sense. I'd like to ask people programming in\nLisp to confirm if it's a good idea and send feedback to [the forum][f].\n\nOther changes:\n\n- Smalltalk was excluded from DEFAULT_LANGUAGES to save traffic\n- [Vladimir Epifanov][voldmar] has implemented javascript style switcher for\n  test.html\n- comments now allowed inside Ruby function definition\n- [MEL][] language from [Shuen-Huei Guan][drake]\n- whitespace now allowed between `<pre>` and `<code>`\n- better auto-detection of C++ and PHP\n- HTML allows embedded VBScript (`<% .. %>`)\n\n[f]: http://softwaremaniacs.org/forum/highlightjs/\n[voldmar]: http://voldmar.ya.ru/\n[mel]: http://en.wikipedia.org/wiki/Maya_Embedded_Language\n[drake]: http://drakeguan.org/\n\n\n## Version 4.1\n\nLanguages:\n\n- Bash from Vah\n- DOS bat-files from Alexander Makarov (Sam)\n- Diff files from Vasily Polovnyov\n- Ini files from myself though initial idea was from Sam\n\nStyles:\n\n- Zenburn from Vladimir Epifanov, this is an imitation of a\n  [well-known theme for Vim][zenburn].\n- Ascetic from myself, as a realization of ideals of non-flashy highlighting:\n  just one color in only three gradations :-)\n\nIn other news. [One small bug][bug] was fixed, built-in keywords were added for\nPython and C++ which improved auto-detection for the latter (it was shame that\n[my wife's blog][alenacpp] had issues with it from time to time). And lastly\nthanks go to Sam for getting rid of my stylistic comments in code that were\ngetting in the way of [JSMin][].\n\n[zenburn]: http://en.wikipedia.org/wiki/Zenburn\n[alenacpp]: http://alenacpp.blogspot.com/\n[bug]: http://softwaremaniacs.org/forum/viewtopic.php?id=1823\n[jsmin]: http://code.google.com/p/jsmin-php/\n\n\n## Version 4.0\n\nNew major version is a result of vast refactoring and of many contributions.\n\nVisible new features:\n\n- Highlighting of embedded languages. Currently is implemented highlighting of\n  Javascript and CSS inside HTML.\n- Bundled 5 ready-made style themes!\n\nInvisible new features:\n\n- Highlight.js no longer pollutes global namespace. Only one object and one\n  function for backward compatibility.\n- Performance is further increased by about 15%.\n\nChanging of a major version number caused by a new format of language definition\nfiles. If you use some third-party language files they should be updated.\n\n\n## Version 3.5\n\nA very nice version in my opinion fixing a number of small bugs and slightly\nincreased speed in a couple of corner cases. Thanks to everybody who reports\nbugs in he [forum][f] and by email!\n\nThere is also a new language — XML. A custom XML formerly was detected as HTML\nand didn't highlight custom tags. In this version I tried to make custom XML to\nbe detected and highlighted by its own rules. Which by the way include such\nthings as CDATA sections and processing instructions (`<? ... ?>`).\n\n[f]: http://softwaremaniacs.org/forum/viewforum.php?id=6\n\n\n## Version 3.3\n\n[Vladimir Gubarkov][xonix] has provided an interesting and useful addition.\nFile export.html contains a little program that shows and allows to copy and\npaste an HTML code generated by the highlighter for any code snippet. This can\nbe useful in situations when one can't use the script itself on a site.\n\n\n[xonix]: http://xonixx.blogspot.com/\n\n\n## Version 3.2 consists completely of contributions:\n\n- Vladimir Gubarkov has described SmallTalk\n- Yuri Ivanov has described 1C\n- Peter Leonov has packaged the highlighter as a Firefox extension\n- Vladimir Ermakov has compiled a mod for phpBB\n\nMany thanks to you all!\n\n\n## Version 3.1\n\nThree new languages are available: Django templates, SQL and Axapta. The latter\ntwo are sent by [Dmitri Roudakov][1]. However I've almost entirely rewrote an\nSQL definition but I'd never started it be it from the ground up :-)\n\nThe engine itself has got a long awaited feature of grouping keywords\n(\"keyword\", \"built-in function\", \"literal\"). No more hacks!\n\n[1]: http://roudakov.ru/\n\n\n## Version 3.0\n\nIt is major mainly because now highlight.js has grown large and has become\nmodular. Now when you pass it a list of languages to highlight it will\ndynamically load into a browser only those languages.\n\nAlso:\n\n- Konstantin Evdokimenko of [RibKit][] project has created a highlighting for\n  RenderMan Shading Language and RenderMan Interface Bytestream. Yay for more\n  languages!\n- Heuristics for C++ and HTML got better.\n- I've implemented (at last) a correct handling of backslash escapes in C-like\n  languages.\n\nThere is also a small backwards incompatible change in the new version. The\nfunction initHighlighting that was used to initialize highlighting instead of\ninitHighlightingOnLoad a long time ago no longer works. If you by chance still\nuse it — replace it with the new one.\n\n[RibKit]: http://ribkit.sourceforge.net/\n\n\n## Version 2.9\n\nHighlight.js is a parser, not just a couple of regular expressions. That said\nI'm glad to announce that in the new version 2.9 has support for:\n\n- in-string substitutions for Ruby -- `#{...}`\n- strings from from numeric symbol codes (like #XX) for Delphi\n\n\n## Version 2.8\n\nA maintenance release with more tuned heuristics. Fully backwards compatible.\n\n\n## Version 2.7\n\n- Nikita Ledyaev presents highlighting for VBScript, yay!\n- A couple of bugs with escaping in strings were fixed thanks to Mickle\n- Ongoing tuning of heuristics\n\nFixed bugs were rather unpleasant so I encourage everyone to upgrade!\n\n\n## Version 2.4\n\n- Peter Leonov provides another improved highlighting for Perl\n- Javascript gets a new kind of keywords — \"literals\". These are the words\n  \"true\", \"false\" and \"null\"\n\nAlso highlight.js homepage now lists sites that use the library. Feel free to\nadd your site by [dropping me a message][mail] until I find the time to build a\nsubmit form.\n\n[mail]: mailto:Maniac@SoftwareManiacs.Org\n\n\n## Version 2.3\n\nThis version fixes IE breakage in previous version. My apologies to all who have\nalready downloaded that one!\n\n\n## Version 2.2\n\n- added highlighting for Javascript\n- at last fixed parsing of Delphi's escaped apostrophes in strings\n- in Ruby fixed highlighting of keywords 'def' and 'class', same for 'sub' in\n  Perl\n\n\n## Version 2.0\n\n- Ruby support by [Anton Kovalyov][ak]\n- speed increased by orders of magnitude due to new way of parsing\n- this same way allows now correct highlighting of keywords in some tricky\n  places (like keyword \"End\" at the end of Delphi classes)\n\n[ak]: http://anton.kovalyov.net/\n\n\n## Version 1.0\n\nVersion 1.0 of javascript syntax highlighter is released!\n\nIt's the first version available with English description. Feel free to post\nyour comments and question to [highlight.js forum][forum]. And don't be afraid\nif you find there some fancy Cyrillic letters -- it's for Russian users too :-)\n\n[forum]: http://softwaremaniacs.org/forum/viewforum.php?id=6\n","date":1405769151000,"updated":1405769151000,"path":"blog/js/highlight/CHANGES.html","excerpt":"","_id":"uk1tcs70gkxmrzi6","title":"","comments":true,"layout":"page"},{"content":"<h1 id=\"Highlight-js\">Highlight.js</h1>\n<p>Highlight.js highlights syntax in code examples on blogs, forums and,<br>in fact, on any web page. It’s very easy to use because it works<br>automatically: finds blocks of code, detects a language, highlights it.</p>\n<p>Autodetection can be fine tuned when it fails by itself (see “Heuristics”).</p>\n<h2 id=\"Basic_usage\">Basic usage</h2>\n<p>Link the library and a stylesheet from your page and hook highlighting to<br>the page load event:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"stylesheet\"</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"styles/default.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"highlight.pack.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span>&gt;</span><span class=\"javascript\">hljs.initHighlightingOnLoad();</span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>This will highlight all code on the page marked up as <code>&lt;pre&gt;&lt;code&gt; .. &lt;/code&gt;&lt;/pre&gt;</code>.<br>If you use different markup or need to apply highlighting dynamically, read<br>“Custom initialization” below.</p>\n<ul>\n<li><p>You can download your own customized version of “highlight.pack.js” or<br>use the hosted one as described on the download page:<br><a href=\"http://highlightjs.org/download/\" target=\"_blank\" rel=\"external\">http://highlightjs.org/download/</a></p>\n</li>\n<li><p>Style themes are available in the download package or as hosted files.<br>To create a custom style for your site see the class reference in the file<br><a href=\"http://highlightjs.readthedocs.org/en/latest/css-classes-reference.html\" target=\"_blank\" rel=\"external\">CSS classes reference</a> from the downloaded package.</p>\n</li>\n</ul>\n<h2 id=\"node-js\">node.js</h2>\n<p>Highlight.js can be used under node.js. The package with all supported languages is<br>installable from NPM:</p>\n<pre><code>npm <span class=\"keyword\">install</span> highlight.js\n</code></pre><p>Alternatively, you can build it from the source with only languages you need:</p>\n<pre><code>python3 tools/build<span class=\"preprocessor\">.py</span> -tnode lang1 lang2 ..\n</code></pre><p>Using the library:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hljs = <span class=\"built_in\">require</span>(<span class=\"string\">'highlight.js'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// If you know the language</span></div><div class=\"line\">hljs.highlight(lang, code).value;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Automatic language detection</span></div><div class=\"line\">hljs.highlightAuto(code).value;</div></pre></td></tr></table></figure>\n\n\n<h2 id=\"AMD\">AMD</h2>\n<p>Highlight.js can be used with an AMD loader.  You will need to build it from<br>source in order to do so:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python3 tools/build.py -tamd lang1 lang2 ..</div></pre></td></tr></table></figure>\n\n<p>Which will generate a <code>build/highlight.pack.js</code> which will load as an AMD<br>module with support for the built languages and can be used like so:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"highlight.js/build/highlight.pack\"</span>], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(hljs)</span>{</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// If you know the language</span></div><div class=\"line\">  hljs.highlight(lang, code).value;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Automatic language detection</span></div><div class=\"line\">  hljs.highlightAuto(code).value;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n\n<h2 id=\"Tab_replacement\">Tab replacement</h2>\n<p>You can replace TAB (‘\\x09’) characters used for indentation in your code<br>with some fixed number of spaces or with a <code>&lt;span&gt;</code> to give them special<br>styling:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  hljs.configure({tabReplace: <span class=\"string\">'    '</span>}); <span class=\"comment\">// 4 spaces</span></div><div class=\"line\">  <span class=\"comment\">// ... or</span></div><div class=\"line\">  hljs.configure({tabReplace: <span class=\"string\">'&lt;span class=\"indent\"&gt;\\t&lt;/span&gt;'</span>});</div><div class=\"line\"></div><div class=\"line\">  hljs.initHighlightingOnLoad();</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<h2 id=\"Custom_initialization\">Custom initialization</h2>\n<p>If you use different markup for code blocks you can initialize them manually<br>with <code>highlightBlock(code)</code> function. It takes a DOM element containing the<br>code to highlight and optionally a string with which to replace TAB<br>characters.</p>\n<p>Initialization using, for example, jQuery might look like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(document).ready(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> {</span></div><div class=\"line\">  $(<span class=\"string\">'pre code'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(i, e)</span> {</span>hljs.highlightBlock(e)});</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>You can use <code>highlightBlock</code> to highlight blocks dynamically inserted into<br>the page. Just make sure you don’t do it twice for already highlighted<br>blocks.</p>\n<p>If your code container relies on <code>&lt;br&gt;</code> tags instead of line breaks (i.e. if<br>it’s not <code>&lt;pre&gt;</code>) set the <code>useBR</code> option to <code>true</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hljs.configure({useBR: <span class=\"literal\">true</span>});</div><div class=\"line\">$(<span class=\"string\">'div.code'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(i, e)</span> {</span>hljs.highlightBlock(e)});</div></pre></td></tr></table></figure>\n\n\n<h2 id=\"Heuristics\">Heuristics</h2>\n<p>Autodetection of a code’s language is done using a simple heuristic:<br>the program tries to highlight a fragment with all available languages and<br>counts all syntactic structures that it finds along the way. The language<br>with greatest count wins.</p>\n<p>This means that in short fragments the probability of an error is high<br>(and it really happens sometimes). In this cases you can set the fragment’s<br>language explicitly by assigning a class to the <code>&lt;code&gt;</code> element:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">pre</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">code</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"html\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"title\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">pre</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>You can use class names recommended in HTML5: “language-html”,<br>“language-php”. Classes also can be assigned to the <code>&lt;pre&gt;</code> element.</p>\n<p>To disable highlighting of a fragment altogether use “no-highlight” class:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">pre</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">code</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"no-highlight\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"title\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">pre</span>&gt;</span></div></pre></td></tr></table></figure>\n\n\n<h2 id=\"Export\">Export</h2>\n<p>File export.html contains a little program that allows you to paste in a code<br>snippet and then copy and paste the resulting HTML code generated by the<br>highlighter. This is useful in situations when you can’t use the script itself<br>on a site.</p>\n<h2 id=\"Meta\">Meta</h2>\n<ul>\n<li>Version: 8.0</li>\n<li>URL:     <a href=\"http://highlightjs.org/\" target=\"_blank\" rel=\"external\">http://highlightjs.org/</a></li>\n</ul>\n<p>For the license terms see LICENSE files.<br>For authors and contributors see AUTHORS.en.txt file.</p>\n","source":"blog/js/highlight/README.md","raw":"# Highlight.js\n\nHighlight.js highlights syntax in code examples on blogs, forums and,\nin fact, on any web page. It's very easy to use because it works\nautomatically: finds blocks of code, detects a language, highlights it.\n\nAutodetection can be fine tuned when it fails by itself (see \"Heuristics\").\n\n\n## Basic usage\n\nLink the library and a stylesheet from your page and hook highlighting to\nthe page load event:\n\n```html\n<link rel=\"stylesheet\" href=\"styles/default.css\">\n<script src=\"highlight.pack.js\"></script>\n<script>hljs.initHighlightingOnLoad();</script>\n```\n\nThis will highlight all code on the page marked up as `<pre><code> .. </code></pre>`.\nIf you use different markup or need to apply highlighting dynamically, read\n\"Custom initialization\" below.\n\n- You can download your own customized version of \"highlight.pack.js\" or\n  use the hosted one as described on the download page:\n  <http://highlightjs.org/download/>\n\n- Style themes are available in the download package or as hosted files.\n  To create a custom style for your site see the class reference in the file\n  [CSS classes reference][cr] from the downloaded package.\n\n[cr]: http://highlightjs.readthedocs.org/en/latest/css-classes-reference.html\n\n\n## node.js\n\nHighlight.js can be used under node.js. The package with all supported languages is\ninstallable from NPM:\n\n    npm install highlight.js\n\nAlternatively, you can build it from the source with only languages you need:\n\n    python3 tools/build.py -tnode lang1 lang2 ..\n\nUsing the library:\n\n```javascript\nvar hljs = require('highlight.js');\n\n// If you know the language\nhljs.highlight(lang, code).value;\n\n// Automatic language detection\nhljs.highlightAuto(code).value;\n```\n\n\n## AMD\n\nHighlight.js can be used with an AMD loader.  You will need to build it from\nsource in order to do so:\n\n```bash\n$ python3 tools/build.py -tamd lang1 lang2 ..\n```\n\nWhich will generate a `build/highlight.pack.js` which will load as an AMD\nmodule with support for the built languages and can be used like so:\n\n```javascript\nrequire([\"highlight.js/build/highlight.pack\"], function(hljs){\n\n  // If you know the language\n  hljs.highlight(lang, code).value;\n\n  // Automatic language detection\n  hljs.highlightAuto(code).value;\n});\n```\n\n\n## Tab replacement\n\nYou can replace TAB ('\\x09') characters used for indentation in your code\nwith some fixed number of spaces or with a `<span>` to give them special\nstyling:\n\n```html\n<script type=\"text/javascript\">\n  hljs.configure({tabReplace: '    '}); // 4 spaces\n  // ... or\n  hljs.configure({tabReplace: '<span class=\"indent\">\\t</span>'});\n\n  hljs.initHighlightingOnLoad();\n</script>\n```\n\n## Custom initialization\n\nIf you use different markup for code blocks you can initialize them manually\nwith `highlightBlock(code)` function. It takes a DOM element containing the\ncode to highlight and optionally a string with which to replace TAB\ncharacters.\n\nInitialization using, for example, jQuery might look like this:\n\n```javascript\n$(document).ready(function() {\n  $('pre code').each(function(i, e) {hljs.highlightBlock(e)});\n});\n```\n\nYou can use `highlightBlock` to highlight blocks dynamically inserted into\nthe page. Just make sure you don't do it twice for already highlighted\nblocks.\n\nIf your code container relies on `<br>` tags instead of line breaks (i.e. if\nit's not `<pre>`) set the `useBR` option to `true`:\n\n```javascript\nhljs.configure({useBR: true});\n$('div.code').each(function(i, e) {hljs.highlightBlock(e)});\n```\n\n\n## Heuristics\n\nAutodetection of a code's language is done using a simple heuristic:\nthe program tries to highlight a fragment with all available languages and\ncounts all syntactic structures that it finds along the way. The language\nwith greatest count wins.\n\nThis means that in short fragments the probability of an error is high\n(and it really happens sometimes). In this cases you can set the fragment's\nlanguage explicitly by assigning a class to the `<code>` element:\n\n```html\n<pre><code class=\"html\">...</code></pre>\n```\n\nYou can use class names recommended in HTML5: \"language-html\",\n\"language-php\". Classes also can be assigned to the `<pre>` element.\n\nTo disable highlighting of a fragment altogether use \"no-highlight\" class:\n\n```html\n<pre><code class=\"no-highlight\">...</code></pre>\n```\n\n\n## Export\n\nFile export.html contains a little program that allows you to paste in a code\nsnippet and then copy and paste the resulting HTML code generated by the\nhighlighter. This is useful in situations when you can't use the script itself\non a site.\n\n\n## Meta\n\n- Version: 8.0\n- URL:     http://highlightjs.org/\n\nFor the license terms see LICENSE files.\nFor authors and contributors see AUTHORS.en.txt file.\n","date":1405769151000,"updated":1405769151000,"path":"blog/js/highlight/README.html","excerpt":"","_id":"gbvbixk8j9mu85n5","title":"","comments":true,"layout":"page"},{"content":"<h1 id=\"Highlight-js\">Highlight.js</h1>\n<p>Highlight.js нужен для подсветки синтаксиса в примерах кода в блогах,<br>форумах и вообще на любых веб-страницах. Пользоваться им очень просто,<br>потому что работает он автоматически: сам находит блоки кода, сам<br>определяет язык, сам подсвечивает.</p>\n<p>Автоопределением языка можно управлять, когда оно не справляется само (см.<br>дальше “Эвристика”).</p>\n<h2 id=\"Простое_использование\">Простое использование</h2>\n<p>Подключите библиотеку и стиль на страницу и повесть вызов подсветки на<br>загрузку страницы:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">link</span> <span class=\"attribute\">rel</span>=<span class=\"value\">\"stylesheet\"</span> <span class=\"attribute\">href</span>=<span class=\"value\">\"styles/default.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"highlight.pack.js\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span>&gt;</span><span class=\"javascript\">hljs.initHighlightingOnLoad();</span><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>Весь код на странице, обрамлённый в теги <code>&lt;pre&gt;&lt;code&gt; .. &lt;/code&gt;&lt;/pre&gt;</code><br>будет автоматически подсвечен. Если вы используете другие теги или хотите<br>подсвечивать блоки кода динамически, читайте “Инициализацию вручную” ниже.</p>\n<ul>\n<li><p>Вы можете скачать собственную версию “highlight.pack.js” или сослаться<br>на захостенный файл, как описано на странице загрузки:<br><a href=\"http://highlightjs.org/download/\" target=\"_blank\" rel=\"external\">http://highlightjs.org/download/</a></p>\n</li>\n<li><p>Стилевые темы можно найти в загруженном архиве или также использовать<br>захостенные. Чтобы сделать собственный стиль для своего сайта, вам<br>будет полезен <a href=\"http://highlightjs.readthedocs.org/en/latest/css-classes-reference.html\" target=\"_blank\" rel=\"external\">CSS classes reference</a>, который тоже есть в архиве.</p>\n</li>\n</ul>\n<h2 id=\"node-js\">node.js</h2>\n<p>Highlight.js можно использовать в node.js. Библиотеку со всеми возможными языками можно<br>установить с NPM:</p>\n<pre><code>npm <span class=\"keyword\">install</span> highlight.js\n</code></pre><p>Также её можно собрать из исходников с только теми языками, которые нужны:</p>\n<pre><code>python3 tools/build<span class=\"preprocessor\">.py</span> -tnode lang1 lang2 ..\n</code></pre><p>Использование библиотеки:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hljs = <span class=\"built_in\">require</span>(<span class=\"string\">'highlight.js'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Если вы знаете язык</span></div><div class=\"line\">hljs.highlight(lang, code).value;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Автоопределение языка</span></div><div class=\"line\">hljs.highlightAuto(code).value;</div></pre></td></tr></table></figure>\n\n\n<h2 id=\"AMD\">AMD</h2>\n<p>Highlight.js можно использовать с загрузчиком AMD-модулей.  Для этого его<br>нужно собрать из исходников следующей командой:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ python3 tools/build.py -tamd lang1 lang2 ..</div></pre></td></tr></table></figure>\n\n<p>Она создаст файл <code>build/highlight.pack.js</code>, который является загружаемым<br>AMD-модулем и содержит все выбранные при сборке языки. Используется он так:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"highlight.js/build/highlight.pack\"</span>], <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(hljs)</span>{</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Если вы знаете язык</span></div><div class=\"line\">  hljs.highlight(lang, code).value;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Автоопределение языка</span></div><div class=\"line\">  hljs.highlightAuto(code).value;</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n\n<h2 id=\"Замена_TABов\">Замена TABов</h2>\n<p>Также вы можете заменить символы TAB (‘\\x09’), используемые для отступов, на<br>фиксированное количество пробелов или на отдельный <code>&lt;span&gt;</code>, чтобы задать ему<br>какой-нибудь специальный стиль:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">script</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  hljs.configure({tabReplace: <span class=\"string\">'    '</span>}); <span class=\"comment\">// 4 spaces</span></div><div class=\"line\">  <span class=\"comment\">// ... or</span></div><div class=\"line\">  hljs.configure({tabReplace: <span class=\"string\">'&lt;span class=\"indent\"&gt;\\t&lt;/span&gt;'</span>});</div><div class=\"line\"></div><div class=\"line\">  hljs.initHighlightingOnLoad();</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"title\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n\n\n<h2 id=\"Инициализация_вручную\">Инициализация вручную</h2>\n<p>Если вы используете другие теги для блоков кода, вы можете инициализировать их<br>явно с помощью функции <code>highlightBlock(code)</code>. Она принимает DOM-элемент с<br>текстом расцвечиваемого кода и опционально - строчку для замены символов TAB.</p>\n<p>Например с использованием jQuery код инициализации может выглядеть так:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(document).ready(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> {</span></div><div class=\"line\">  $(<span class=\"string\">'pre code'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(i, e)</span> {</span>hljs.highlightBlock(e)});</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p><code>highlightBlock</code> можно также использовать, чтобы подсветить блоки кода,<br>добавленные на страницу динамически. Только убедитесь, что вы не делаете этого<br>повторно для уже раскрашенных блоков.</p>\n<p>Если ваш блок кода использует <code>&lt;br&gt;</code> вместо переводов строки (т.е. если это не<br><code>&lt;pre&gt;</code>), включите опцию <code>useBR</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hljs.configure({useBR: <span class=\"literal\">true</span>});</div><div class=\"line\">$(<span class=\"string\">'div.code'</span>).each(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(i, e)</span> {</span>hljs.highlightBlock(e)});</div></pre></td></tr></table></figure>\n\n\n<h2 id=\"Эвристика\">Эвристика</h2>\n<p>Определение языка, на котором написан фрагмент, делается с помощью<br>довольно простой эвристики: программа пытается расцветить фрагмент всеми<br>языками подряд, и для каждого языка считает количество подошедших<br>синтаксически конструкций и ключевых слов. Для какого языка нашлось больше,<br>тот и выбирается.</p>\n<p>Это означает, что в коротких фрагментах высока вероятность ошибки, что<br>периодически и случается. Чтобы указать язык фрагмента явно, надо написать<br>его название в виде класса к элементу <code>&lt;code&gt;</code>:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">pre</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">code</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"html\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"title\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">pre</span>&gt;</span></div></pre></td></tr></table></figure>\n\n<p>Можно использовать рекомендованные в HTML5 названия классов:<br>“language-html”, “language-php”. Также можно назначать классы на элемент<br><code>&lt;pre&gt;</code>.</p>\n<p>Чтобы запретить расцветку фрагмента вообще, используется класс “no-highlight”:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"title\">pre</span>&gt;</span><span class=\"tag\">&lt;<span class=\"title\">code</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"no-highlight\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"title\">code</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">pre</span>&gt;</span></div></pre></td></tr></table></figure>\n\n\n<h2 id=\"Экспорт\">Экспорт</h2>\n<p>В файле export.html находится небольшая программка, которая показывает и дает<br>скопировать непосредственно HTML-код подсветки для любого заданного фрагмента кода.<br>Это может понадобится например на сайте, на котором нельзя подключить сам скрипт<br>highlight.js.</p>\n<h2 id=\"Координаты\">Координаты</h2>\n<ul>\n<li>Версия: 8.0</li>\n<li>URL:    <a href=\"http://highlightjs.org/\" target=\"_blank\" rel=\"external\">http://highlightjs.org/</a></li>\n</ul>\n<p>Лицензионное соглашение читайте в файле LICENSE.<br>Список авторов и соавторов читайте в файле AUTHORS.ru.txt</p>\n","source":"blog/js/highlight/README.ru.md","raw":"# Highlight.js\n\nHighlight.js нужен для подсветки синтаксиса в примерах кода в блогах,\nфорумах и вообще на любых веб-страницах. Пользоваться им очень просто,\nпотому что работает он автоматически: сам находит блоки кода, сам\nопределяет язык, сам подсвечивает.\n\nАвтоопределением языка можно управлять, когда оно не справляется само (см.\nдальше \"Эвристика\").\n\n\n## Простое использование\n\nПодключите библиотеку и стиль на страницу и повесть вызов подсветки на\nзагрузку страницы:\n\n```html\n<link rel=\"stylesheet\" href=\"styles/default.css\">\n<script src=\"highlight.pack.js\"></script>\n<script>hljs.initHighlightingOnLoad();</script>\n```\n\nВесь код на странице, обрамлённый в теги `<pre><code> .. </code></pre>`\nбудет автоматически подсвечен. Если вы используете другие теги или хотите\nподсвечивать блоки кода динамически, читайте \"Инициализацию вручную\" ниже.\n\n- Вы можете скачать собственную версию \"highlight.pack.js\" или сослаться\n  на захостенный файл, как описано на странице загрузки:\n  <http://highlightjs.org/download/>\n\n- Стилевые темы можно найти в загруженном архиве или также использовать\n  захостенные. Чтобы сделать собственный стиль для своего сайта, вам\n  будет полезен [CSS classes reference][cr], который тоже есть в архиве.\n\n[cr]: http://highlightjs.readthedocs.org/en/latest/css-classes-reference.html\n\n\n## node.js\n\nHighlight.js можно использовать в node.js. Библиотеку со всеми возможными языками можно\nустановить с NPM:\n\n    npm install highlight.js\n\nТакже её можно собрать из исходников с только теми языками, которые нужны:\n\n    python3 tools/build.py -tnode lang1 lang2 ..\n\nИспользование библиотеки:\n\n```javascript\nvar hljs = require('highlight.js');\n\n// Если вы знаете язык\nhljs.highlight(lang, code).value;\n\n// Автоопределение языка\nhljs.highlightAuto(code).value;\n```\n\n\n## AMD\n\nHighlight.js можно использовать с загрузчиком AMD-модулей.  Для этого его\nнужно собрать из исходников следующей командой:\n\n```bash\n$ python3 tools/build.py -tamd lang1 lang2 ..\n```\n\nОна создаст файл `build/highlight.pack.js`, который является загружаемым\nAMD-модулем и содержит все выбранные при сборке языки. Используется он так:\n\n```javascript\nrequire([\"highlight.js/build/highlight.pack\"], function(hljs){\n\n  // Если вы знаете язык\n  hljs.highlight(lang, code).value;\n\n  // Автоопределение языка\n  hljs.highlightAuto(code).value;\n});\n```\n\n\n## Замена TABов\n\nТакже вы можете заменить символы TAB ('\\x09'), используемые для отступов, на\nфиксированное количество пробелов или на отдельный `<span>`, чтобы задать ему\nкакой-нибудь специальный стиль:\n\n```html\n<script type=\"text/javascript\">\n  hljs.configure({tabReplace: '    '}); // 4 spaces\n  // ... or\n  hljs.configure({tabReplace: '<span class=\"indent\">\\t</span>'});\n\n  hljs.initHighlightingOnLoad();\n</script>\n```\n\n\n## Инициализация вручную\n\nЕсли вы используете другие теги для блоков кода, вы можете инициализировать их\nявно с помощью функции `highlightBlock(code)`. Она принимает DOM-элемент с\nтекстом расцвечиваемого кода и опционально - строчку для замены символов TAB.\n\nНапример с использованием jQuery код инициализации может выглядеть так:\n\n```javascript\n$(document).ready(function() {\n  $('pre code').each(function(i, e) {hljs.highlightBlock(e)});\n});\n```\n\n`highlightBlock` можно также использовать, чтобы подсветить блоки кода,\nдобавленные на страницу динамически. Только убедитесь, что вы не делаете этого\nповторно для уже раскрашенных блоков.\n\nЕсли ваш блок кода использует `<br>` вместо переводов строки (т.е. если это не\n`<pre>`), включите опцию `useBR`:\n\n```javascript\nhljs.configure({useBR: true});\n$('div.code').each(function(i, e) {hljs.highlightBlock(e)});\n```\n\n\n## Эвристика\n\nОпределение языка, на котором написан фрагмент, делается с помощью\nдовольно простой эвристики: программа пытается расцветить фрагмент всеми\nязыками подряд, и для каждого языка считает количество подошедших\nсинтаксически конструкций и ключевых слов. Для какого языка нашлось больше,\nтот и выбирается.\n\nЭто означает, что в коротких фрагментах высока вероятность ошибки, что\nпериодически и случается. Чтобы указать язык фрагмента явно, надо написать\nего название в виде класса к элементу `<code>`:\n\n```html\n<pre><code class=\"html\">...</code></pre>\n```\n\nМожно использовать рекомендованные в HTML5 названия классов:\n\"language-html\", \"language-php\". Также можно назначать классы на элемент\n`<pre>`.\n\nЧтобы запретить расцветку фрагмента вообще, используется класс \"no-highlight\":\n\n```html\n<pre><code class=\"no-highlight\">...</code></pre>\n```\n\n\n## Экспорт\n\nВ файле export.html находится небольшая программка, которая показывает и дает\nскопировать непосредственно HTML-код подсветки для любого заданного фрагмента кода.\nЭто может понадобится например на сайте, на котором нельзя подключить сам скрипт\nhighlight.js.\n\n\n## Координаты\n\n- Версия: 8.0\n- URL:    http://highlightjs.org/\n\nЛицензионное соглашение читайте в файле LICENSE.\nСписок авторов и соавторов читайте в файле AUTHORS.ru.txt\n","date":1405769151000,"updated":1405769151000,"path":"blog/js/highlight/README.ru.html","excerpt":"","_id":"kz845o98tfdah9wm","title":"","comments":true,"layout":"page"}],"Post":[{"title":"test.md","date":1405821582000,"tags":[],"content":"<p>测试2</p>\n","source":"_posts/2014-07-19-testmd.md","raw":"title: test.md\ndate: 2014-07-20 01:59:42\ntags:\n---\n\n测试2\n","slug":"testmd","updated":1405770501000,"excerpt":"","_id":"dg36i5rg7rxv27di","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"layout":"default","comments":true,"tags":["zykleiwdpei3e6bq"],"codesyntax":true,"title":"前端模板引擎Temple简介","content":"<h3 id=\"Features\">Features</h3>\n<ul>\n<li>语法继承自KISSY 1.2 Template ,不过少了个花括号</li>\n<li>编译后的代码非常直观 <a href=\"http://tomycat.github.io/blog/temple/index.html\" target=\"_blank\" rel=\"external\">Temple编译后的代码</a> </li>\n<li>基本的 if/elseif/else each</li>\n<li>include 子模板</li>\n<li>extend 模板继承</li>\n<li>if(exp) exp可以为复杂表达式</li>\n<li>模板允许使用自定义函数</li>\n</ul>\n<h3 id=\"Getting_Started\">Getting Started</h3>\n<pre><code class=\"javascript\">KISSY.use('gallery/temple/1.0/index', function (S, Temple) {\n     Temple.add(\"base\",\"this is head , my sex is {#block name} female {/block}!\");\n     var temple = Temple.compile('{#extend base} {#block name} {sex} {/block}');\n     var html = temple.render({\"sex\":\"male\"});\n     console.log(html);\n})</code></pre>\n\n<h3 id=\"API\">API</h3>\n<ul>\n<li><code>Temple.compile</code> 将模板编译为可以直接执行的js函数，返回的对象具有render方法</li>\n<li><code>Temple.to_js</code> 将模板编译为js代码字符串,用于调试或者预编译</li>\n</ul>\n<h3 id=\"语法示例\">语法示例</h3>\n<h4 id=\"expression_and_variable\">expression and variable</h4>\n<pre><code class=\"javascript\">\nvar s = '{#if (a+(b-c*d/(ef%3)))}'\n          + 'blah blah {lib}'\n      + '{/if}';\nvar temple = Temple.compile(s);\n\ntemple.render({a:1,b:2,c:3,d:4,ef:5,lib:\"KISSY\"});\n// => \"blah blah KISSY\"\n</code></pre>\n\n<h4 id=\"if\">if</h4>\n<pre><code class=\"javascript\">\nvar template = '{#if name}'\n                 + 'hi {name}'\n             + '{/if}'\n\nvar temple = Temple.compile(template);\ntemple.render({name:\"tom\"});\n// -> tom\n</code></pre>\n\n<h4 id=\"if/else\">if/else</h4>\n<pre><code class=\"javascript\">\nvar template;\ntemplate = '{#if name}'\n             + '{name}'\n         + '{#else}'\n             + 'noname'\n         + '{/if}'\nvar temple = Temple.compile(template);\ntemplate.render({name:\"tom\"});\n</code></pre>\n\n<h4 id=\"if/elseif/else\">if/elseif/else</h4>\n<pre><code class=\"javascript\">\ntemplate = '{#if name}'\n             + '{name}'\n         + '{#elseif sex}'\n             + '{sex}'\n         + '{#else}'\n           + 'oops'\n         + '{/if}'\nvar temple = Temple.compile(template);\ntemple.render({name:\"tom\"});\n// => tom\n</code></pre>\n\n<h4 id=\"each\">each</h4>\n<pre><code class=\"javascript\">\n var template =  '{#each items as item index}'\n                   + '{index} : {item.name}'\n               + '{/each}';\n\nvar temple = Temple.compile(template);\n\ntemple.render({items:[{name:\"john\"}]});\n// => \"0 : john\"\n</code></pre>\n\n<h4 id=\"include\">include</h4>\n<pre><code class=\"javascript\">\nTemple.add(\"head\",\"&lt;h1&gt;共用头&lt;/h1&gt;\");\nTemple.add(\"foot\",\"&lt;h1&gt;共用脚&lt;/h1\");\n\nvar template = '{#include head}'\n             + '&lt;p&gt;身体是你自己的&lt;/p&gt;'\n             + '{#include foot}';\nvar temple = Temple.compile(template);\ntemple.render();\n// =&gt; \"&lt;h1&gt;共用头&lt;/h1&gt;&lt;p&gt;身体是你自己的&lt;/p&gt;&lt;h1&gt;共用脚&lt;/h1\"\n</code></pre>\n\n<h4 id=\"extend\">extend</h4>\n<pre><code class=\"javascript\">\nTemple.add(\"base\",\"&lt;h1&gt;共用头&lt;/h1&gt;\"\n                  + \"{#block body}\"\n                    + \"&lt;p&gt;大家都公用的身体&lt;/p&gt;\"\n                  + \"{/block}\"\n                + \"&lt;h1&gt;共用脚&lt;/h1&gt;\");\n\nvar app = '{#extend base}'\n        + '{#block body}'\n        + '&lt;p&gt;你自己的身体&lt;/p&gt;'\n        + '{/block}';\n\nvar temple;\ntemple = Temple.compile(app);\ntemple.render();\n// =&gt; \"&lt;h1&gt;共用头&lt;/h1&gt;&lt;p&gt;你自己的身体&lt;/p&gt;&lt;h1&gt;共用脚&lt;/h1&gt;\"\n</code></pre>\n\n<h4 id=\"custom_function\">custom function</h4>\n<pre><code class=\"javascript\">\nTemple.reg(\"myescape\",function(s){\n  return escape(s);\n});\nvar temple  = Temple.compile('{myescape(htmlstr)}');\ntemple.render({htmlstr:\"&lt;p&gt;foo&lt;/p&gt;\"});\n// => \"%3Cp%3Efoo%3C/p%3E\"\n</code></pre>\n\n<h4 id=\"comment\">comment</h4>\n<pre><code class=\"javascript\">\nvar temple;\ntemple  = Temple.compile('{#!this is a line of comment}');\ntemple.render();\n// => \"\"\n\ntemple  = Temple.compile('{#! 可以包含\"{\"、\"#\"、\"\\\\}\" }');\ntemple.render();\n// => \"\"\n\ntemple  = Temple.compile('{#! 中文注释} 中文字符串abc');\ntemple.render();\n// => \" 中文字符串abc\"\n</code></pre>\n\n","source":"_posts/2013-10-27-temple-intro.md","raw":"---\nlayout: default\ncomments : true\ntags :\n- javascript\ncodesyntax : true\ntitle : 前端模板引擎Temple简介\n---\n\n### Features\n- 语法继承自KISSY 1.2 Template ,不过少了个花括号\n- 编译后的代码非常直观 [Temple编译后的代码](http://tomycat.github.io/blog/temple/index.html) \n- 基本的 if/elseif/else each\n- include 子模板\n- extend 模板继承\n- if(exp) exp可以为复杂表达式\n- 模板允许使用自定义函数\n\n### Getting Started\n\n<pre><code class=\"javascript\">KISSY.use('gallery/temple/1.0/index', function (S, Temple) {\n     Temple.add(\"base\",\"this is head , my sex is {#block name} female {/block}!\");\n     var temple = Temple.compile('{#extend base} {#block name} {sex} {/block}');\n\t var html = temple.render({\"sex\":\"male\"});\n\t console.log(html);\n})</code></pre>\n\n### API\n- `Temple.compile` 将模板编译为可以直接执行的js函数，返回的对象具有render方法\n- `Temple.to_js` 将模板编译为js代码字符串,用于调试或者预编译\n\n### 语法示例\n\n#### expression and variable\n<pre><code class=\"javascript\">\nvar s = '{#if (a+(b-c*d/(ef%3)))}'\n          + 'blah blah {lib}'\n      + '{/if}';\nvar temple = Temple.compile(s);\n\ntemple.render({a:1,b:2,c:3,d:4,ef:5,lib:\"KISSY\"});\n// => \"blah blah KISSY\"\n</code></pre>\n\n#### if\n<pre><code class=\"javascript\">\nvar template = '{#if name}'\n\t\t\t\t + 'hi {name}'\n\t\t\t + '{/if}'\n\nvar temple = Temple.compile(template);\ntemple.render({name:\"tom\"});\n// -> tom\n</code></pre>\n\n#### if/else\n<pre><code class=\"javascript\">\nvar template;\ntemplate = '{#if name}'\n\t\t\t + '{name}'\n\t\t + '{#else}'\n\t\t\t + 'noname'\n\t\t + '{/if}'\nvar temple = Temple.compile(template);\ntemplate.render({name:\"tom\"});\n</code></pre>\n\n#### if/elseif/else\n<pre><code class=\"javascript\">\ntemplate = '{#if name}'\n\t\t\t + '{name}'\n\t\t + '{#elseif sex}'\n\t\t\t + '{sex}'\n\t\t + '{#else}'\n\t\t   + 'oops'\n\t\t + '{/if}'\nvar temple = Temple.compile(template);\ntemple.render({name:\"tom\"});\n// => tom\n</code></pre>\n\n#### each\n<pre><code class=\"javascript\">\n var template =  '{#each items as item index}'\n\t\t\t\t   + '{index} : {item.name}'\n\t\t\t   + '{/each}';\n \nvar temple = Temple.compile(template);\n\ntemple.render({items:[{name:\"john\"}]});\n// => \"0 : john\"\n</code></pre>\n\n#### include\n<pre><code class=\"javascript\">\nTemple.add(\"head\",\"&lt;h1&gt;共用头&lt;/h1&gt;\");\nTemple.add(\"foot\",\"&lt;h1&gt;共用脚&lt;/h1\");\n\nvar template = '{#include head}'\n             + '&lt;p&gt;身体是你自己的&lt;/p&gt;'\n             + '{#include foot}';\nvar temple = Temple.compile(template);\ntemple.render();\n// =&gt; \"&lt;h1&gt;共用头&lt;/h1&gt;&lt;p&gt;身体是你自己的&lt;/p&gt;&lt;h1&gt;共用脚&lt;/h1\"\n</code></pre>\n\n#### extend\n<pre><code class=\"javascript\">\nTemple.add(\"base\",\"&lt;h1&gt;共用头&lt;/h1&gt;\"\n                  + \"{#block body}\"\n                    + \"&lt;p&gt;大家都公用的身体&lt;/p&gt;\"\n                  + \"{/block}\"\n                + \"&lt;h1&gt;共用脚&lt;/h1&gt;\");\n\nvar app = '{#extend base}'\n        + '{#block body}'\n        + '&lt;p&gt;你自己的身体&lt;/p&gt;'\n        + '{/block}';\n\nvar temple;\ntemple = Temple.compile(app);\ntemple.render();\n// =&gt; \"&lt;h1&gt;共用头&lt;/h1&gt;&lt;p&gt;你自己的身体&lt;/p&gt;&lt;h1&gt;共用脚&lt;/h1&gt;\"\n</code></pre>\n\n#### custom function \n<pre><code class=\"javascript\">\nTemple.reg(\"myescape\",function(s){\n  return escape(s);\n});\nvar temple  = Temple.compile('{myescape(htmlstr)}');\ntemple.render({htmlstr:\"&lt;p&gt;foo&lt;/p&gt;\"});\n// => \"%3Cp%3Efoo%3C/p%3E\"\n</code></pre>\n\n#### comment\n<pre><code class=\"javascript\">\nvar temple;\ntemple  = Temple.compile('{#!this is a line of comment}');\ntemple.render();\n// => \"\"\n\ntemple  = Temple.compile('{#! 可以包含\"{\"、\"#\"、\"\\\\}\" }');\ntemple.render();\n// => \"\"\n\ntemple  = Temple.compile('{#! 中文注释} 中文字符串abc');\ntemple.render();\n// => \" 中文字符串abc\"\n</code></pre>\n\n","slug":"temple-intro","date":1382803200000,"updated":1405769722000,"excerpt":"","_id":"5v56x6puuzxzyotv","categories":[],"photos":[],"link":""},{"layout":"default","tags":["zykleiwdpei3e6bq"],"comments":true,"codesyntax":true,"title":"在emacs内实现html标签 和 html实体 的相互转换","content":"<p>输出html代码的时候希望将其转义后输出，像这样的</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"subst\">&</span><span class=\"literal\">lt</span>;h1<span class=\"subst\">&</span><span class=\"literal\">gt</span>;this is h1<span class=\"subst\">&</span><span class=\"literal\">lt</span>;/h1<span class=\"subst\">&</span><span class=\"literal\">gt</span>;</div></pre></td></tr></table></figure>\n\n<p>但是在编辑的时候形态是这样的</p>\n<p><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1&gt;<span class=\"keyword\">this</span> <span class=\"keyword\">is</span> h1&lt;/h1&gt;</div></pre></td></tr></table></figure><br>如果借用外部的资源是很好解决的，只需将 <code>&lt;</code> 替换为 &amp;lt; <code>&gt;</code><br>替换为 &amp;gt;即可.</p>\n<p>使用emacs的话，写两个elisp函数即可：</p>\n<pre><code class=\"lisp\">\n(defun region-entity-to-html (start end)\n  \"Replace entities to html in region ….\"\n  (interactive \"r\")\n  (save-restriction\n        (narrow-to-region start end)\n\n        (goto-char (point-min))\n        (while (search-forward \"&lt;\" nil t) (replace-match \"<\" nil=\"\" t))=\"\" (goto-char=\"\" (point-min))=\"\" (while=\"\" (search-forward=\"\" \"&gt;\"=\"\" t)=\"\" (replace-match=\"\" \"=\"\">\" nil t))\n\n        ;; more here\n        )\n  )\n\n\n(defun region-html-to-entity (start end)\n  \"Replace html to entities in region ….\"\n  (interactive \"r\")\n  (save-restriction\n        (narrow-to-region start end)\n\n        (goto-char (point-min))\n        (while (search-forward \"<\" nil=\"\" t)=\"\" (replace-match=\"\" \"&lt;\"=\"\" t))=\"\" (goto-char=\"\" (point-min))=\"\" (while=\"\" (search-forward=\"\" \"=\"\">\" nil t) (replace-match \"&gt;\" nil t))\n\n        ;; more here\n        )\n  )</\"></\"></code></pre>\n\n<p>将这两个函数放到~/.emacs中，以后要想将一段html转为html，只需<br>选中这段文本，然后执行命令M-x region-html-to-entity 或者 region-entity-to-html</p>\n","source":"_posts/2013-10-29-emacs-tricks.md","raw":"---\nlayout: default\ntags : other\ncomments : true\ntags :\n- javascript\ncodesyntax : true\ntitle : 在emacs内实现html标签 和 html实体 的相互转换\n---\n\n输出html代码的时候希望将其转义后输出，像这样的\n\n```\n&lt;h1&gt;this is h1&lt;/h1&gt;\n```\n\n但是在编辑的时候形态是这样的\n\n```\n<h1>this is h1</h1>\n```\n如果借用外部的资源是很好解决的，只需将 `<` 替换为 &amp;lt; `>`\n替换为 &amp;gt;即可.\n\n使用emacs的话，写两个elisp函数即可：\n\n<pre><code class=\"lisp\">\n(defun region-entity-to-html (start end)\n  \"Replace entities to html in region ….\"\n  (interactive \"r\")\n  (save-restriction\n        (narrow-to-region start end)\n\n        (goto-char (point-min))\n        (while (search-forward \"&lt;\" nil t) (replace-match \"<\" nil t))\n\n        (goto-char (point-min))\n        (while (search-forward \"&gt;\" nil t) (replace-match \">\" nil t))\n\n        ;; more here\n        )\n  )\n\n\n(defun region-html-to-entity (start end)\n  \"Replace html to entities in region ….\"\n  (interactive \"r\")\n  (save-restriction\n        (narrow-to-region start end)\n\n        (goto-char (point-min))\n        (while (search-forward \"<\" nil t) (replace-match \"&lt;\" nil t))\n\n        (goto-char (point-min))\n        (while (search-forward \">\" nil t) (replace-match \"&gt;\" nil t))\n\n        ;; more here\n        )\n  )</code></pre>\n\n将这两个函数放到~/.emacs中，以后要想将一段html转为html，只需\n选中这段文本，然后执行命令M-x region-html-to-entity 或者 region-entity-to-html\n","slug":"emacs-tricks","date":1382976000000,"updated":1405770117000,"excerpt":"","_id":"sxov4524hokineqp","categories":[],"photos":[],"link":""},{"layout":"default","tags":["ekkfy6zjiuzggp33"],"comments":true,"codesyntax":true,"title":"使用inkscape和fontforge制作iconfont","content":"<p>iconfont是通过矢量字体的方式来做icon，可以在高分辨率的屏幕上<br>也不会失真，能通过css来控制其样式，就像控制普通的文字一样。</p>\n<p>像很多浏览器特性一样，使用iconfont是有兼容性问题的，要使用<br>iconfont，你不得不这样写字体声明：</p>\n<pre><code class=\"css\">@font-face {\n  font-family: 'mui-wl';\n  src: url('http://at.alicdn.com/t/font_1384420140_864115.eot');                                        /* IE9*/\n  src: url('http://at.alicdn.com/t/font_1384420140_864115.eot?#iefix') format('embedded-opentype'),        /* IE6-IE8 */\n  url('http://at.alicdn.com/t/font_1384420140_8889937.woff') format('woff'),                            /* chrome、firefox */\n  url('http://at.alicdn.com/t/font_1384420140_8170962.ttf') format('truetype'),                            /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/\n  url('http://at.alicdn.com/t/font_1384420140_9259503.svg#svgFontName') format('svg');                    /* iOS 4.1- */\n}</code></pre>\n\n<p>字体编辑的工具，windows平台下有fontlab配合AI能很好的生成<br>iconfont，具体介绍参看这里，<a href=\"http://www.qianduan.net/css3-icon-font-guide.html\" target=\"_blank\" rel=\"external\">CSS3 icon font完全指南</a> </p>\n<p>生成ttf格式的文件后，要兼容ie系列浏览器，还需要转为其它几种<br>格式</p>\n<p>网上有一些工具能够进行字体转化的工具，能将ttf格式的字体文件，<br>转为各种格式的iconfont字体文件，比如这<br>个：<a href=\"http://www.fontsquirrel.com/fontface/generator\" target=\"_blank\" rel=\"external\">http://www.fontsquirrel.com/fontface/generator</a></p>\n<p>那么整个过程就完毕了，下面要介绍的是在linux环境下进行字体文<br>件的的制作</p>\n<hr>\n<h3 id=\"需要的环境\">需要的环境</h3>\n<ol>\n<li>inkscape ，用于生成字体路径</li>\n<li>fontforge ，linux下面的字体编辑器，需要忍耐下，界面非常丑，<br>有很多快捷键</li>\n</ol>\n<h3 id=\"制作过程\">制作过程</h3>\n<ol>\n<li>准备好svg字体路径，可以用inkscape ，或者AI<br><img src=\"https://lh4.googleusercontent.com/-jJGU7L-rfs4/UoSu2hBfn_I/AAAAAAAABis/byeUYHHHJac/w865-h592-no/c.png\" alt=\"步骤一\"></li>\n<li>用fontforge打开一个svg字体文件（也可以是ttf格式的），比如<br><a href=\"http://at.alicdn.com/t/font_1384420140_9259503.svg\" target=\"_blank\" rel=\"external\">http://at.alicdn.com/t/font_1384420140_9259503.svg</a> ，看到很多图形<br><img src=\"https://lh5.googleusercontent.com/-WIf6jcITiW4/UoSu2r2NI9I/AAAAAAAABik/cICSgdUEd90/w427-h227-no/b.png\" alt=\"步骤二\">      </li>\n<li>点击一个字体空位，复制画好的svg路径到空位上<br><img src=\"https://lh4.googleusercontent.com/-jJGU7L-rfs4/UoSu2hBfn_I/AAAAAAAABis/byeUYHHHJac/w865-h592-no/c.png\" alt=\"步骤三\"> </li>\n<li>文件-&gt;生成字体，完成<br><img src=\"https://lh3.googleusercontent.com/-LWGpBPreJOM/UoSu3BnNtqI/AAAAAAAABiw/wAjBKhRK3AQ/w527-h561-no/d.png\" alt=\"步骤四\"> </li>\n<li>借助上面的字体转换工具，将生成的ttf文件上传，生成其它格<br>式的文件</li>\n<li><a href=\"http://jsbin.com/UDoqosEx/1/edit\" target=\"_blank\" rel=\"external\">demo</a></li>\n</ol>\n<h3 id=\"需要注意的点\">需要注意的点</h3>\n<ol>\n<li>fontforge 打开生成的ttf文件，前32个字符是不可见字符，如<br>果你在这前32个字符中填充了图形也是没用的</li>\n<li><p>如果你自己托管字体文件的的话，需要注意字体的跨域问题：<br>firefox和IE9不支持对icon font字体的跨域。解决办法是在服<br>务器的header中添加acceess-control</p>\n<p><img src=\"https://lh3.googleusercontent.com/-bwAqo32fZ9M/UoTCT2Y08UI/AAAAAAAABjk/lVOc2ccltKU/w978-h394-no/a.png\" alt=\"http-header-access-control\"> </p>\n</li>\n</ol>\n<h3 id=\"总结\">总结</h3>\n<p>  这样的制作过程还是比较麻烦的，但是能通过操作fontforge这个<br>  软件，对字体文件有个感性的认识，再使用在线的工具的时候就不<br>  会觉得完全是个黑箱了</p>\n<h3 id=\"更佳的方案——使用在线的工具\">更佳的方案——使用在线的工具</h3>\n<ol>\n<li><a href=\"http://fontello.com/\" target=\"_blank\" rel=\"external\">http://fontello.com/</a></li>\n<li><a href=\"http://icomoon.io/app\" target=\"_blank\" rel=\"external\">http://icomoon.io/app</a></li>\n</ol>\n<h3 id=\"用iconfont实现loading的icon\">用iconfont实现loading的icon</h3>\n","source":"_posts/2013-11-14-make-iconfont-method-a.md","raw":"---\nlayout: default\ntags : other\ncomments : true\ncodesyntax : true\ntitle : 使用inkscape和fontforge制作iconfont\n---\n\niconfont是通过矢量字体的方式来做icon，可以在高分辨率的屏幕上\n也不会失真，能通过css来控制其样式，就像控制普通的文字一样。\n\n像很多浏览器特性一样，使用iconfont是有兼容性问题的，要使用\niconfont，你不得不这样写字体声明：\n\n<pre><code class=\"css\">@font-face {\n  font-family: 'mui-wl';\n  src: url('http://at.alicdn.com/t/font_1384420140_864115.eot');\t\t\t\t\t\t\t\t\t\t/* IE9*/\n  src: url('http://at.alicdn.com/t/font_1384420140_864115.eot?#iefix') format('embedded-opentype'),\t\t/* IE6-IE8 */\n  url('http://at.alicdn.com/t/font_1384420140_8889937.woff') format('woff'),\t\t\t\t\t\t\t/* chrome、firefox */\n  url('http://at.alicdn.com/t/font_1384420140_8170962.ttf') format('truetype'),\t\t\t\t\t\t\t/* chrome、firefox、opera、Safari, Android, iOS 4.2+*/\n  url('http://at.alicdn.com/t/font_1384420140_9259503.svg#svgFontName') format('svg');\t\t\t\t\t/* iOS 4.1- */\n}</code></pre>\n\n字体编辑的工具，windows平台下有fontlab配合AI能很好的生成\niconfont，具体介绍参看这里，[CSS3 icon font完全指南](http://www.qianduan.net/css3-icon-font-guide.html) \n\n生成ttf格式的文件后，要兼容ie系列浏览器，还需要转为其它几种\n格式\n\n网上有一些工具能够进行字体转化的工具，能将ttf格式的字体文件，\n转为各种格式的iconfont字体文件，比如这\n个：http://www.fontsquirrel.com/fontface/generator\n\n那么整个过程就完毕了，下面要介绍的是在linux环境下进行字体文\n件的的制作\n\n--------------------\n\n### 需要的环境 \n  1. inkscape ，用于生成字体路径\n  2. fontforge ，linux下面的字体编辑器，需要忍耐下，界面非常丑，\n\t 有很多快捷键\n\n### 制作过程\n  1. 准备好svg字体路径，可以用inkscape ，或者AI\n\t ![步骤一](https://lh4.googleusercontent.com/-jJGU7L-rfs4/UoSu2hBfn_I/AAAAAAAABis/byeUYHHHJac/w865-h592-no/c.png)\n  2. 用fontforge打开一个svg字体文件（也可以是ttf格式的），比如\n     http://at.alicdn.com/t/font_1384420140_9259503.svg ，看到很多图形\n     ![步骤二](https://lh5.googleusercontent.com/-WIf6jcITiW4/UoSu2r2NI9I/AAAAAAAABik/cICSgdUEd90/w427-h227-no/b.png) \t \n  3. 点击一个字体空位，复制画好的svg路径到空位上\n\t ![步骤三](https://lh4.googleusercontent.com/-jJGU7L-rfs4/UoSu2hBfn_I/AAAAAAAABis/byeUYHHHJac/w865-h592-no/c.png) \n  4. 文件->生成字体，完成\n\t ![步骤四](https://lh3.googleusercontent.com/-LWGpBPreJOM/UoSu3BnNtqI/AAAAAAAABiw/wAjBKhRK3AQ/w527-h561-no/d.png) \n  5. 借助上面的字体转换工具，将生成的ttf文件上传，生成其它格\n     式的文件\n  6. [demo](http://jsbin.com/UDoqosEx/1/edit)\n\n### 需要注意的点\n  1. fontforge 打开生成的ttf文件，前32个字符是不可见字符，如\n     果你在这前32个字符中填充了图形也是没用的\n  2. 如果你自己托管字体文件的的话，需要注意字体的跨域问题：\n     firefox和IE9不支持对icon font字体的跨域。解决办法是在服\n     务器的header中添加acceess-control\n\n  ![http-header-access-control](https://lh3.googleusercontent.com/-bwAqo32fZ9M/UoTCT2Y08UI/AAAAAAAABjk/lVOc2ccltKU/w978-h394-no/a.png ) \n\n### 总结\n  这样的制作过程还是比较麻烦的，但是能通过操作fontforge这个\n  软件，对字体文件有个感性的认识，再使用在线的工具的时候就不\n  会觉得完全是个黑箱了\n\n### 更佳的方案——使用在线的工具\n   1. http://fontello.com/\n   2. http://icomoon.io/app\n\n### 用iconfont实现loading的icon\n    \n","slug":"make-iconfont-method-a","date":1384358400000,"updated":1405769151000,"excerpt":"","_id":"ikwqxmv73ppeid1y","categories":[],"photos":[],"link":""},{"layout":"default","tags":["ekkfy6zjiuzggp33"],"comments":true,"codesyntax":true,"title":"ubuntu 13.10 下面安装 grunt 报错","content":"<pre><code class=\"shell\">$ npm install grunt #产生报错\nnpm ERR! Error: No compatible version found: underscore.string@'~2.2.0rc'\nnpm ERR! Valid install targets:</code></pre>\n\n<p>原因是ubuntu13.10中的npm版本过低</p>\n<pre><code class=\"shell\">$ npm -v\n1.2.18</code></pre>\n\n\n<p><strong>解决办法</strong> ，用npm重新安装npm</p>\n<pre><code class=\"shell\">$ sudo npm install npm -g</code></pre>\n\n\n","source":"_posts/2013-11-21-ubuntu13.10-npm-grunt-error.md","raw":"---\nlayout: default\ntags : other\ncomments : true\ncodesyntax : true\ntitle : ubuntu 13.10 下面安装 grunt 报错\n---\n\n<pre><code class=\"shell\">$ npm install grunt #产生报错\nnpm ERR! Error: No compatible version found: underscore.string@'~2.2.0rc'\nnpm ERR! Valid install targets:</code></pre>\n    \n原因是ubuntu13.10中的npm版本过低\n\n<pre><code class=\"shell\">$ npm -v\n1.2.18</code></pre>\n\n\n**解决办法** ，用npm重新安装npm\n\n<pre><code class=\"shell\">$ sudo npm install npm -g</code></pre>\n\n\n","slug":"ubuntu13.10-npm-grunt-error","date":1384963200000,"updated":1405769151000,"excerpt":"","_id":"pnu2rjiedkgwjxqx","categories":[],"photos":[],"link":""},{"layout":"default","tags":["ekkfy6zjiuzggp33"],"comments":true,"title":"ubuntu 13.10 通过chrome vnc viewer 插件连接 windows7","content":"<p>chrome 安装 vnc viewer 插件就不说了，具体看这里</p>\n<p>关键在于，windows7 安装了vnc server 后，通过ubuntu上的vnc viewer 连接 不上的问题</p>\n<p>原因在与，win7 默认开启了防火墙设置。具体解决步骤如下:</p>\n<p>点击windows徽标，搜索防火墙，打开“高级安全 Windows防火墙”</p>\n<p><img src=\"https://lh6.googleusercontent.com/-0ie8vPKKU4w/UpXmdfeKWGI/AAAAAAAABmc/kVYelKW9gQY/w205-h225-no/a.png\" alt=\"step1\"></p>\n<p><img src=\"https://lh6.googleusercontent.com/-9q-3NC354aU/UpXmdYRynXI/AAAAAAAABmo/lGJolfDxBvQ/w710-h518-no/b.png\" alt=\"step2\"></p>\n<p><img src=\"https://lh6.googleusercontent.com/-AcFaDcpbOJ4/UpXmeDfTT-I/AAAAAAAABmw/FUkzUgUJw-Y/w703-h509-no/f.png\" alt=\"step3\"></p>\n<p>接下来下一步，到结束，起个名字再用vnc viewer 连接就能成功了</p>\n","source":"_posts/2013-11-27-chrome-vnc-ubuntu-to-win7.md","raw":"---\nlayout: default\ntags : other\ncomments : true\ntitle : ubuntu 13.10 通过chrome vnc viewer 插件连接 windows7\n---\n\n\nchrome 安装 vnc viewer 插件就不说了，具体看这里\n\n关键在于，windows7 安装了vnc server 后，通过ubuntu上的vnc viewer 连接 不上的问题\n\n\n原因在与，win7 默认开启了防火墙设置。具体解决步骤如下:\n\n点击windows徽标，搜索防火墙，打开“高级安全 Windows防火墙”\n\n![step1](https://lh6.googleusercontent.com/-0ie8vPKKU4w/UpXmdfeKWGI/AAAAAAAABmc/kVYelKW9gQY/w205-h225-no/a.png )\n\n![step2](https://lh6.googleusercontent.com/-9q-3NC354aU/UpXmdYRynXI/AAAAAAAABmo/lGJolfDxBvQ/w710-h518-no/b.png )\n\n![step3](https://lh6.googleusercontent.com/-AcFaDcpbOJ4/UpXmeDfTT-I/AAAAAAAABmw/FUkzUgUJw-Y/w703-h509-no/f.png )\n\n接下来下一步，到结束，起个名字再用vnc viewer 连接就能成功了\n","slug":"chrome-vnc-ubuntu-to-win7","date":1385481600000,"updated":1405769151000,"excerpt":"","_id":"8ggogv6ykwhi18qs","categories":[],"photos":[],"link":""},{"layout":"default","tags":["ekkfy6zjiuzggp33"],"comments":true,"codesyntax":true,"title":"raphaeljs 在 IE8 下性能差的问题及解决方案","content":"<p>Raphaël 具有良好的兼容——IE能兼容到ie6，非常适合国情，但是情况正在发生变化，尤其是<br>在国外，考虑到IE9以及其他浏览器的份额，Raphaël 的作者推出了一个叫 <a href=\"http://snapsvg.io\" target=\"_blank\" rel=\"external\">Snap.svg</a> 的<br>图形库，跟Raphaël 不同，Snap.svg完全是基于svg的图行库，少了些束手束脚。</p>\n<p>不过在国内，ie6/7/8/仍然不可忽视，因此Raphaël 仍然是比较好的选择。</p>\n<p>微软从IE9开始支持svg矢量图形技术，Raphaël 在 ie6/7/8 上使用的是专有的vml技术来模<br>拟svg的特性。</p>\n<h1 id=\"vml在IE8浏览器下性能非常之差\">vml在IE8浏览器下性能非常之差</h1>\n<p>我们知道，直到IE9才支持svg，微软必须跟上开放标准的潮流，vml的没落就像很多IE其它专<br>有特性一样，渐渐被抛弃，到IE8最终发布的时候，对vml的支持已经非常不好了 <sup>[1]</sup></p>\n<blockquote><br>“vml\\:*”这个选择器被IE8认为不合法<br></blockquote>\n\n<p>并且，相比IE6/7，IE8下vml性能问题差了很多，可以看 <a href=\"http://jsfiddle.net/t5NGF/\" target=\"_blank\" rel=\"external\">stackoverflow上的一个用户测试</a></p>\n<p>测试代码如下：</p>\n<pre><code class=\"html\">&lt;script src=\"http://fiddle.jshell.net/js/lib/raphael-1.5.2-min.js\"&gt;&lt;/script&gt;\n&lt;div id=\"time-result\"&gt;&lt;/div&gt;\n&lt;div id=\"canvas\"&gt;&lt;/div&gt;\n&lt;script&gt;\nwindow.onload = function() {\n    var timer = new Date();\n    var paper = Raphael('canvas', 400, 400);\n    var length = 25;\n    for (var i = 0; i &lt; 10; i++) {\n        for (var j = 0; j &lt; 10; j++) {\n        paper.rect(length * i, length * j, length, length);\n        }\n    }\n    $('#time-result').text('Rendered in ' + (new Date() - timer) + ' milliseconds.');\n};\n&lt;/script&gt;\n</code></pre>\n\n<h1 id=\"Raphael_IE8_性能差的应对方案\">Raphael IE8 性能差的应对方案</h1>\n<p>通过修改meta标签，让IE8运行在IE7模式下，于是有了</p>\n<p><strong>改进1</strong> </p>\n<pre><code class=\"html\">&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=7\" &gt;</code></pre>\n\n<p>但是，如果仅仅是这样的化会误伤IE9 —— IE9 已经支持svg了，如果页面上还有这个声明的<br>化，那么IE9也会以IE7模式来渲染页面。抛弃svg而使用vml，这样显然是很不合理的。</p>\n<p>我困惑了很久，想尝试使用IE的另一个奇葩特性——条件注释来避免这个问题：</p>\n<p><strong>改进2</strong> ——失败的尝试</p>\n<p>将meta标签放在条件注释中，像这样</p>\n<pre><code class=\"html\">&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;!--[if lt IE 9]&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=7\"&gt;\n    &lt;![endif]--&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>但是遗憾的是，浏览器根本就不识别这样注释后的meta标签，所以这种方案以失败告终</p>\n<p><strong>改进3</strong> —— 通过在服务器返回的header中设置，这个方案我没亲自尝试过</p>\n<p>但是，PHP使用者，可以尝试下面的方案 <sup>[2]</sup></p>\n<pre><code class=\"html\">header(\"X-UA-Compatible: IE=7,IE=9\");</code></pre>\n\n<p><strong>改进4</strong> —— 最终方案</p>\n<p>因为，我找到了更好的方案了，其实很简单，只要在 <strong>方案1</strong> 的基础上，做一点改变</p>\n<pre><code class=\"html\">&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=7,IE=9\" &gt;\n</code></pre>\n\n<p>IE确实支持这样的写法，不过还是有坑的，在iframe下有问题，详细参看stackoverflow上的<br>讨论 <sup>[3]</sup></p>\n<p>[1] <a href=\"http://www.cnblogs.com/rubylouvre/archive/2009/10/12/1581891.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/rubylouvre/archive/2009/10/12/1581891.html</a></p>\n<p>[2] <a href=\"http://stackoverflow.com/questions/6156639/x-ua-compatible-is-set-to-ie-edge-but-it-still-doesnt-stop-compatibility-mode\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/6156639/x-ua-compatible-is-set-to-ie-edge-but-it-still-doesnt-stop-compatibility-mode</a></p>\n<p>[3] <a href=\"http://stackoverflow.com/questions/3413629/emulate-ie7-for-ie8-but-not-for-ie9-using-x-ua-compatible\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/3413629/emulate-ie7-for-ie8-but-not-for-ie9-using-x-ua-compatible</a></p>\n","source":"_posts/2013-11-28-raphaeljs-ie8-performance.md","raw":"---\nlayout: default\ntags : other\ncomments : true\ncodesyntax : true\ntitle : raphaeljs 在 IE8 下性能差的问题及解决方案\n---\n\nRaphaël 具有良好的兼容——IE能兼容到ie6，非常适合国情，但是情况正在发生变化，尤其是\n在国外，考虑到IE9以及其他浏览器的份额，Raphaël 的作者推出了一个叫 [Snap.svg](http://snapsvg.io) 的\n图形库，跟Raphaël 不同，Snap.svg完全是基于svg的图行库，少了些束手束脚。\n\n不过在国内，ie6/7/8/仍然不可忽视，因此Raphaël 仍然是比较好的选择。\n\n微软从IE9开始支持svg矢量图形技术，Raphaël 在 ie6/7/8 上使用的是专有的vml技术来模\n拟svg的特性。\n\n# vml在IE8浏览器下性能非常之差\n\n我们知道，直到IE9才支持svg，微软必须跟上开放标准的潮流，vml的没落就像很多IE其它专\n有特性一样，渐渐被抛弃，到IE8最终发布的时候，对vml的支持已经非常不好了 <sup>[1]</sup>\n\n<blockquote>\n“vml\\:*”这个选择器被IE8认为不合法\n</blockquote>\n\n并且，相比IE6/7，IE8下vml性能问题差了很多，可以看 [stackoverflow上的一个用户测试](http://jsfiddle.net/t5NGF/)\n\n测试代码如下：\n\n<pre><code class=\"html\">&lt;script src=\"http://fiddle.jshell.net/js/lib/raphael-1.5.2-min.js\"&gt;&lt;/script&gt;\n&lt;div id=\"time-result\"&gt;&lt;/div&gt;\n&lt;div id=\"canvas\"&gt;&lt;/div&gt;\n&lt;script&gt;\nwindow.onload = function() {\n    var timer = new Date();\n    var paper = Raphael('canvas', 400, 400);\n    var length = 25;\n    for (var i = 0; i &lt; 10; i++) {\n        for (var j = 0; j &lt; 10; j++) {\n        paper.rect(length * i, length * j, length, length);\n        }\n    }\n    $('#time-result').text('Rendered in ' + (new Date() - timer) + ' milliseconds.');\n};\n&lt;/script&gt;\n</code></pre>\n\n# Raphael IE8 性能差的应对方案\n\n通过修改meta标签，让IE8运行在IE7模式下，于是有了\n\n**改进1** \n\n<pre><code class=\"html\">&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=7\" &gt;</code></pre>\n\n但是，如果仅仅是这样的化会误伤IE9 —— IE9 已经支持svg了，如果页面上还有这个声明的\n化，那么IE9也会以IE7模式来渲染页面。抛弃svg而使用vml，这样显然是很不合理的。\n\n我困惑了很久，想尝试使用IE的另一个奇葩特性——条件注释来避免这个问题：\n\n**改进2** ——失败的尝试\n\n将meta标签放在条件注释中，像这样\n\n<pre><code class=\"html\">&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;!--[if lt IE 9]&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=7\"&gt;\n    &lt;![endif]--&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n但是遗憾的是，浏览器根本就不识别这样注释后的meta标签，所以这种方案以失败告终\n\n**改进3** —— 通过在服务器返回的header中设置，这个方案我没亲自尝试过\n\n但是，PHP使用者，可以尝试下面的方案 <sup>[2]</sup>\n\n<pre><code class=\"html\">header(\"X-UA-Compatible: IE=7,IE=9\");</code></pre>\n\n**改进4** —— 最终方案\n\n因为，我找到了更好的方案了，其实很简单，只要在 **方案1** 的基础上，做一点改变\n\n<pre><code class=\"html\">&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=7,IE=9\" &gt;\n</code></pre>\n\nIE确实支持这样的写法，不过还是有坑的，在iframe下有问题，详细参看stackoverflow上的\n讨论 <sup>[3]</sup>\n\n\n[1] http://www.cnblogs.com/rubylouvre/archive/2009/10/12/1581891.html\n\n[2] http://stackoverflow.com/questions/6156639/x-ua-compatible-is-set-to-ie-edge-but-it-still-doesnt-stop-compatibility-mode\n\n[3] http://stackoverflow.com/questions/3413629/emulate-ie7-for-ie8-but-not-for-ie9-using-x-ua-compatible\n","slug":"raphaeljs-ie8-performance","date":1385568000000,"updated":1405769151000,"excerpt":"","_id":"bu274umq26pivpdd","categories":[],"photos":[],"link":""},{"layout":"default","tags":["ekkfy6zjiuzggp33"],"comments":true,"codesyntax":true,"title":"nodejs 中调用java","content":"<p>java由于其历史悠久，有很多有用的jar包，nodejs作为比较新的平台，相比之下还是有所欠<br>缺的。本篇文章介绍如何在nodejs中调用java程序，这样既能用你熟悉的js语言，又能享用<br>java的成熟工具。</p>\n<p>下面以nodejs中调用 yuicompressor.jar 这个jar包进行压缩的示例来说明node调用java的<br>完整过程——尽管yuicompressor.jar已经很大程度上被uglifyjs代替了。</p>\n<p>类似的，这个例子也可以调用 google 的压缩工具 compiler.jar</p>\n<h2 id=\"windows_环境中_nodejs_调用_java\">windows 环境中 nodejs 调用 java</h2>\n<ol>\n<li>确保你已经正确的安装了java，你可以通过下面的代码来检查是否安装成功</li>\n</ol>\n<pre><code>java -version</code></pre>\n\n<p>若看到类似下面的截图，表示安装成功了<br><img src=\"https://lh3.googleusercontent.com/-cVhFVD8smPw/UphdH9jhD_I/AAAAAAAABoE/MVAteYN7WdU/w506-h281/2013-11-29+17:23:03%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png\" alt=\"Alt Text\"> </p>\n<ol>\n<li>用nodejs封装cmdline下的命令</li>\n</ol>\n<p>下载yuicompressor.jar ，建立一个测试文件test.js，内容随便写点什么</p>\n<p>在windows命令行中，压缩这个js的命令是：</p>\n<pre><code>java -jar yuicompressor.jar test.js</code></pre>\n\n<p>上面的命令实际上完整的是（windows有个cmd.exe来完成实际的工作）</p>\n<pre><code>cmd /c java -jar yuicompressor.jar test.js</code></pre>\n\n<p>nodejs提供了spawn工具来执行外部程序命令，详见 <a href=\"http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options\" target=\"_blank\" rel=\"external\">nodejs文档</a></p>\n<p>完整的代码如下</p>\n<pre><code>var spawn = require('child_process').spawn;\n\n\nexe([\"/c\",\"java\",\"-jar\",\"yuicompressor.jar\",\"test.js\"]);\n// 相当于在命令行下执行 cmd /c java -jar yuicompressor.jar test.js\n// 也可以加入更多的参数\n\nfunction exe(command){\n    // windows下 \n    var cmd = spawn(\"cmd\",command);\n\n    cmd.stdout.setEncoding(\"ASCII\");\n    cmd.stdout.on(\"data\",function(data){\n    console.log(\"------------------------------\");\n    console.log(\"exec\",command);\n    console.log(\"stdout:\"+data);\n    });\n\n    cmd.stderr.on(\"data\",function(data){\n    console.log(\"------------------------------\");\n    console.log(\"stderr:\"+data);\n    console.log(\"------------------------------\");\n    });\n\n    cmd.on(\"exit\",function(code){\n    console.log(\"exited with code:\"+code);\n    console.log(\"------------------------------\");\n    });\n};</code></pre>\n\n<p>将上面的代码保存为 node-compress.js，执行即可</p>\n<p><code><pre>node node-compress.js</pre></code></p>\n<h2 id=\"linux_版本\">linux 版本</h2>\n<p>linux 调用java不用像windows 那样：</p>\n<pre><code>cmd /c java -jar yuicompressor.jar test.js</code></pre>\n\n<p>而是直接调用</p>\n<pre><code>java -jar yuicompressor.jar test.js</code></pre>\n\n<p>即可</p>\n<p>所以完整的代码是：</p>\n<pre><code>var spawn = require('child_process').spawn;\n\nexe([\"-jar\",\"yuicompressor.jar\",\"test.js\"]);\n// 相当于在命令行下执行 java -jar yuicompressor.jar test.js\n\nfunction exe(command){\n\n    // linux下，不用 cmd /c java -jar yuicompressor.jar test.js，这种形式，直接\n    // java -jar yuicompressor.jar test.js 即可\n    var cmd = spawn(\"java\",command);\n\n    cmd.stdout.setEncoding(\"ASCII\");\n    cmd.stdout.on(\"data\",function(data){\n    console.log(\"------------------------------\");\n    console.log(\"exec\",command);\n    console.log(\"stdout:\"+data);\n    });\n\n    cmd.stderr.on(\"data\",function(data){\n    console.log(\"------------------------------\");\n    console.log(\"stderr:\"+data);\n    console.log(\"------------------------------\");\n    });\n\n    cmd.on(\"exit\",function(code){\n    console.log(\"exited with code:\"+code);\n    console.log(\"------------------------------\");\n    });\n};</code></pre>\n","source":"_posts/2013-11-29-nodejs-call-java.md","raw":"---\nlayout: default\ntags : other\ncomments : true\ncodesyntax : true\ntitle : nodejs 中调用java \n---\n\njava由于其历史悠久，有很多有用的jar包，nodejs作为比较新的平台，相比之下还是有所欠\n缺的。本篇文章介绍如何在nodejs中调用java程序，这样既能用你熟悉的js语言，又能享用\njava的成熟工具。\n\n下面以nodejs中调用 yuicompressor.jar 这个jar包进行压缩的示例来说明node调用java的\n完整过程——尽管yuicompressor.jar已经很大程度上被uglifyjs代替了。\n\n类似的，这个例子也可以调用 google 的压缩工具 compiler.jar\n\n## windows 环境中 nodejs 调用 java \n\n1. 确保你已经正确的安装了java，你可以通过下面的代码来检查是否安装成功\n\n<pre><code>java -version</code></pre>\n\n若看到类似下面的截图，表示安装成功了\n![Alt Text](https://lh3.googleusercontent.com/-cVhFVD8smPw/UphdH9jhD_I/AAAAAAAABoE/MVAteYN7WdU/w506-h281/2013-11-29+17:23:03%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png ) \n\n2. 用nodejs封装cmdline下的命令\n\n下载yuicompressor.jar ，建立一个测试文件test.js，内容随便写点什么\n\n在windows命令行中，压缩这个js的命令是：\n\n<pre><code>java -jar yuicompressor.jar test.js</code></pre>\n\n上面的命令实际上完整的是（windows有个cmd.exe来完成实际的工作）\n\n<pre><code>cmd /c java -jar yuicompressor.jar test.js</code></pre>\n\nnodejs提供了spawn工具来执行外部程序命令，详见 [nodejs文档](http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options)\n\n完整的代码如下\n\n<pre><code>var spawn = require('child_process').spawn;\n\n\nexe([\"/c\",\"java\",\"-jar\",\"yuicompressor.jar\",\"test.js\"]);\n// 相当于在命令行下执行 cmd /c java -jar yuicompressor.jar test.js\n// 也可以加入更多的参数\n\nfunction exe(command){\n    // windows下 \n    var cmd = spawn(\"cmd\",command);\n\n    cmd.stdout.setEncoding(\"ASCII\");\n    cmd.stdout.on(\"data\",function(data){\n\tconsole.log(\"------------------------------\");\n\tconsole.log(\"exec\",command);\n\tconsole.log(\"stdout:\"+data);\n    });\n\n    cmd.stderr.on(\"data\",function(data){\n\tconsole.log(\"------------------------------\");\n\tconsole.log(\"stderr:\"+data);\n\tconsole.log(\"------------------------------\");\n    });\n\n    cmd.on(\"exit\",function(code){\n\tconsole.log(\"exited with code:\"+code);\n\tconsole.log(\"------------------------------\");\n    });\n};</code></pre>\n\n将上面的代码保存为 node-compress.js，执行即可\n\n<code><pre>node node-compress.js</code></pre>\n\n## linux 版本\n\nlinux 调用java不用像windows 那样：\n\n<pre><code>cmd /c java -jar yuicompressor.jar test.js</code></pre>\n\n而是直接调用\n\n<pre><code>java -jar yuicompressor.jar test.js</code></pre>\n\n即可\n\n所以完整的代码是：\n\n<pre><code>var spawn = require('child_process').spawn;\n\nexe([\"-jar\",\"yuicompressor.jar\",\"test.js\"]);\n// 相当于在命令行下执行 java -jar yuicompressor.jar test.js\n\nfunction exe(command){\n\n    // linux下，不用 cmd /c java -jar yuicompressor.jar test.js，这种形式，直接\n    // java -jar yuicompressor.jar test.js 即可\n    var cmd = spawn(\"java\",command);\n\n    cmd.stdout.setEncoding(\"ASCII\");\n    cmd.stdout.on(\"data\",function(data){\n\tconsole.log(\"------------------------------\");\n\tconsole.log(\"exec\",command);\n\tconsole.log(\"stdout:\"+data);\n    });\n\n    cmd.stderr.on(\"data\",function(data){\n\tconsole.log(\"------------------------------\");\n\tconsole.log(\"stderr:\"+data);\n\tconsole.log(\"------------------------------\");\n    });\n\n    cmd.on(\"exit\",function(code){\n\tconsole.log(\"exited with code:\"+code);\n\tconsole.log(\"------------------------------\");\n    });\n};</code></pre>\n","slug":"nodejs-call-java","date":1385654400000,"updated":1405769151000,"excerpt":"","_id":"n6uqayt0fmat5upr","categories":[],"photos":[],"link":""},{"layout":"default","tags":["ekkfy6zjiuzggp33"],"comments":true,"title":"使用google 地图做路线规划","content":"<p><strong>KEY WORDS</strong> : google 地图 , 路书 , 地图旅游路线攻略</p>\n<hr>\n<blockquote>\n<p>google的地图服务非常强大，这次就用它来做旅游路线攻略<br><strong>Google Maps Engine</strong></p>\n</blockquote>\n<p>通常我们使用的是google maps <a href=\"https://maps.google.com.hk/\" target=\"_blank\" rel=\"external\">https://maps.google.com.hk/</a> 这个服务，但是其实google<br>还有另一个地图服务，用于满足自定义地图的需求，这个服务就是 Google Maps Engine 。</p>\n<p>这个服务有两个版本，免费版本只能创建两个图层，更多介绍可看 [1]</p>\n<p>这个服务应该是今年3月份左右才推出的 [2]，谷歌此前曾推出一个类似的地图定制工具My Maps</p>\n<p><strong>制作你自己的地图</strong></p>\n<p>A. 进入google地图，<a href=\"https://maps.google.com.hk，点击&quot;制作地图\" target=\"_blank\" rel=\"external\">https://maps.google.com.hk，点击&quot;制作地图</a>“</p>\n<p><img src=\"https://lh5.googleusercontent.com/-7ZPeRPidpkI/Urax-R7GBfI/AAAAAAAACA4/dOoGbOLZMDI/w876-h265-no/a.png\" alt=\"map\"></p>\n<p>B. 可以创建一个地图，或者选择之前已经建好的地图</p>\n<p><img src=\"https://lh3.googleusercontent.com/-JG4_zEnnxnA/Urax-dnFWvI/AAAAAAAACBA/TC6g-GC4_7k/w476-h525-no/b.png\" alt=\"map\"></p>\n<p>C. 点击地图标题，给你的地图命名</p>\n<p><img src=\"https://lh6.googleusercontent.com/-InN0Xf_g_vg/Urax_KOA_XI/AAAAAAAACBE/lUUN5XJsHd4/w852-h371-no/d.png\" alt=\"map\"></p>\n<p>D. 点击”添加图层“<br>   Google Maps Engine免费版本只提供两个图层，外加一个搜索结果层。<br>   地图上可以放置有点和路线，点就是想去的地方，比如说西湖十景，就是十个点，十个标注。</p>\n<p>   这样创建两个图层，像下面这样，两个图层可以取个名字</p>\n<p><img src=\"https://lh3.googleusercontent.com/-Vgx6ck92y4k/Urax_kaHCZI/AAAAAAAACBc/64kPhP6vWfg/w698-h320-no/e.png\" alt=\"map\"></p>\n<p><img src=\"https://lh6.googleusercontent.com/-cjJ72SeUtww/Urax_jBeXPI/AAAAAAAACBQ/Fd64D5XHAAA/w827-h388-no/f.png\" alt=\"map\"></p>\n<p>E. 添加你你的兴趣点，比如景点、吃饭的地儿</p>\n<p>   a. 这些点可以是地图上默认就识别的，通过搜索框就可以搜索出来，搜索出来的点可以添加到地图</p>\n<p><img src=\"https://lh4.googleusercontent.com/-M3v5XNB2lp8/UrayAKTNfZI/AAAAAAAACBg/XCV1OC8f1XE/w949-h377-no/g.png\" alt=\"map\"></p>\n<p><img src=\"https://lh4.googleusercontent.com/-IDTOzdn_qyc/UrayA2qDcxI/AAAAAAAACBk/DMPGuQZOwig/w873-h404-no/h.png\" alt=\"map\"></p>\n<p><img src=\"https://lh5.googleusercontent.com/-pwuwp0n00Zw/UrayBpQQAMI/AAAAAAAACB8/arLWb3gBbHo/w795-h453-no/i.png\" alt=\"map\"></p>\n<p>   b. 或者你自己标注的点，方法是点上左上那个标注，然后在地图上点击</p>\n<p><img src=\"https://lh3.googleusercontent.com/-JcG9SRYh6CA/UrayB3jHVZI/AAAAAAAACB4/3MUxig65qNo/w720-h444-no/k.png\" alt=\"map\"></p>\n<p>   这样，标注好所有你想去的点了，每个点可以设置不同的颜色 , 黄色的是起点表示杭州火车东站，像下面这样：</p>\n<p><img src=\"https://lh6.googleusercontent.com/-ZDWw1zhzqyg/UrayD1dpX5I/AAAAAAAACCY/BKv0gsXk7nM/w978-h534-no/l.png\" alt=\"map\"></p>\n<p>F. 将点连接起来——路线规划</p>\n<p>   如何高效的将所有的点都去一遍呢，这个时候你需要规划路线</p>\n<p>   a. 点击路线图标</p>\n<p><img src=\"https://lh5.googleusercontent.com/-KHCVlaoxC48/UrayDVO-TmI/AAAAAAAACCE/JZzvRd2zgXE/w558-h347-no/m.png\" alt=\"map\"></p>\n<p>   b. 添加起点（注意可以从你之前添加的点中选取地点）</p>\n<p><img src=\"https://lh3.googleusercontent.com/-E1FLFYmSWCs/UrayD-PwYcI/AAAAAAAACCU/cScF9ITfJqg/w756-h572-no/n.png\" alt=\"map\"></p>\n<p><img src=\"https://lh5.googleusercontent.com/-Br_3BIEWKyE/UrayEWFmCOI/AAAAAAAACCc/9Gw4QzWw2D0/w499-h587-no/o.png\" alt=\"map\"></p>\n<p>   c. 添加目的地（我发现了，mapengine 现在中文支持还不够好，需要给你的地点加个英文前缀，当是标号吧）</p>\n<p><img src=\"https://lh4.googleusercontent.com/-JZqhKVrw5qI/UrayFnqMQCI/AAAAAAAACCk/BHp3n4IB1QU/w578-h590-no/p.png\" alt=\"map\"></p>\n<p>   d. 添加多个目的地 (这里有限制，加上起点总共不能超过10个点，所以要节约着用，应该选取几个关键的连接点)</p>\n<p><img src=\"https://lh6.googleusercontent.com/-Xgc3olmwtAc/UrayGVUvJCI/AAAAAAAACCw/k7IooNxJQLI/w873-h581-no/q.png\" alt=\"map\"></p>\n<p>   e. 把所有的地点都连上</p>\n<p><img src=\"https://lh3.googleusercontent.com/-1sQVIPhQdFk/UrayGim0n3I/AAAAAAAACC0/LFPZvf6BrzU/w973-h592-no/r.png\" alt=\"map\"></p>\n<p>G. 在手机上安装google map engine，打开”我的地图“，就可以看到自己规划好的路线了</p>\n<p><strong>外出手机在手，心中有路，从此不再迷惘</strong></p>\n<p>[完]</p>\n<p>[1] <a href=\"http://www.williamlong.info/archives/3643.html\" target=\"_blank\" rel=\"external\">http://www.williamlong.info/archives/3643.html</a></p>\n<p>[2] <a href=\"http://www.williamlong.info/archives/3420.html\" target=\"_blank\" rel=\"external\">http://www.williamlong.info/archives/3420.html</a></p>\n","source":"_posts/2013-12-22-use-google-road-plan.md","raw":"---\nlayout: default\ntags : other\ncomments : true\ntitle : 使用google 地图做路线规划\n---\n\n**KEY WORDS** : google 地图 , 路书 , 地图旅游路线攻略\n\n--------------------\n\n> google的地图服务非常强大，这次就用它来做旅游路线攻略\n**Google Maps Engine**\n\n通常我们使用的是google maps https://maps.google.com.hk/ 这个服务，但是其实google\n还有另一个地图服务，用于满足自定义地图的需求，这个服务就是 Google Maps Engine 。\n\n这个服务有两个版本，免费版本只能创建两个图层，更多介绍可看 [1]\n\n这个服务应该是今年3月份左右才推出的 [2]，谷歌此前曾推出一个类似的地图定制工具My Maps\n\n**制作你自己的地图**\n\nA. 进入google地图，https://maps.google.com.hk，点击\"制作地图\"\n\n![map](https://lh5.googleusercontent.com/-7ZPeRPidpkI/Urax-R7GBfI/AAAAAAAACA4/dOoGbOLZMDI/w876-h265-no/a.png)\n\nB. 可以创建一个地图，或者选择之前已经建好的地图\n\n![map](https://lh3.googleusercontent.com/-JG4_zEnnxnA/Urax-dnFWvI/AAAAAAAACBA/TC6g-GC4_7k/w476-h525-no/b.png)\n\nC. 点击地图标题，给你的地图命名\n\n![map](https://lh6.googleusercontent.com/-InN0Xf_g_vg/Urax_KOA_XI/AAAAAAAACBE/lUUN5XJsHd4/w852-h371-no/d.png)\n\nD. 点击”添加图层“\n   Google Maps Engine免费版本只提供两个图层，外加一个搜索结果层。\n   地图上可以放置有点和路线，点就是想去的地方，比如说西湖十景，就是十个点，十个标注。\n   \n   这样创建两个图层，像下面这样，两个图层可以取个名字\n\n![map](https://lh3.googleusercontent.com/-Vgx6ck92y4k/Urax_kaHCZI/AAAAAAAACBc/64kPhP6vWfg/w698-h320-no/e.png)\n\n![map](https://lh6.googleusercontent.com/-cjJ72SeUtww/Urax_jBeXPI/AAAAAAAACBQ/Fd64D5XHAAA/w827-h388-no/f.png)\n\nE. 添加你你的兴趣点，比如景点、吃饭的地儿\n\n   a. 这些点可以是地图上默认就识别的，通过搜索框就可以搜索出来，搜索出来的点可以添加到地图\n\n![map](https://lh4.googleusercontent.com/-M3v5XNB2lp8/UrayAKTNfZI/AAAAAAAACBg/XCV1OC8f1XE/w949-h377-no/g.png)\n\n![map](https://lh4.googleusercontent.com/-IDTOzdn_qyc/UrayA2qDcxI/AAAAAAAACBk/DMPGuQZOwig/w873-h404-no/h.png)\n   \n![map](https://lh5.googleusercontent.com/-pwuwp0n00Zw/UrayBpQQAMI/AAAAAAAACB8/arLWb3gBbHo/w795-h453-no/i.png)\n\n   b. 或者你自己标注的点，方法是点上左上那个标注，然后在地图上点击\n\n![map](https://lh3.googleusercontent.com/-JcG9SRYh6CA/UrayB3jHVZI/AAAAAAAACB4/3MUxig65qNo/w720-h444-no/k.png)\n   \n   这样，标注好所有你想去的点了，每个点可以设置不同的颜色 , 黄色的是起点表示杭州火车东站，像下面这样：\n\n![map](https://lh6.googleusercontent.com/-ZDWw1zhzqyg/UrayD1dpX5I/AAAAAAAACCY/BKv0gsXk7nM/w978-h534-no/l.png)\n\nF. 将点连接起来——路线规划\n\n   如何高效的将所有的点都去一遍呢，这个时候你需要规划路线\n   \n   a. 点击路线图标\n\n![map](https://lh5.googleusercontent.com/-KHCVlaoxC48/UrayDVO-TmI/AAAAAAAACCE/JZzvRd2zgXE/w558-h347-no/m.png)\n\n   b. 添加起点（注意可以从你之前添加的点中选取地点）\n\n![map](https://lh3.googleusercontent.com/-E1FLFYmSWCs/UrayD-PwYcI/AAAAAAAACCU/cScF9ITfJqg/w756-h572-no/n.png)\n\n![map](https://lh5.googleusercontent.com/-Br_3BIEWKyE/UrayEWFmCOI/AAAAAAAACCc/9Gw4QzWw2D0/w499-h587-no/o.png)\n\n   c. 添加目的地（我发现了，mapengine 现在中文支持还不够好，需要给你的地点加个英文前缀，当是标号吧）\n\n![map](https://lh4.googleusercontent.com/-JZqhKVrw5qI/UrayFnqMQCI/AAAAAAAACCk/BHp3n4IB1QU/w578-h590-no/p.png)\n\n   d. 添加多个目的地 (这里有限制，加上起点总共不能超过10个点，所以要节约着用，应该选取几个关键的连接点)\n\n![map](https://lh6.googleusercontent.com/-Xgc3olmwtAc/UrayGVUvJCI/AAAAAAAACCw/k7IooNxJQLI/w873-h581-no/q.png)\n\n   e. 把所有的地点都连上\n\n![map](https://lh3.googleusercontent.com/-1sQVIPhQdFk/UrayGim0n3I/AAAAAAAACC0/LFPZvf6BrzU/w973-h592-no/r.png)\n\n   \n\nG. 在手机上安装google map engine，打开”我的地图“，就可以看到自己规划好的路线了\n\n**外出手机在手，心中有路，从此不再迷惘**\n\n[完]\n\n[1] http://www.williamlong.info/archives/3643.html\n\n[2] http://www.williamlong.info/archives/3420.html\n\n","slug":"use-google-road-plan","date":1387641600000,"updated":1405769151000,"excerpt":"","_id":"3rpb5dlugkmt20ui","categories":[],"photos":[],"link":""},{"layout":"default","tags":["ekkfy6zjiuzggp33"],"comments":true,"title":"使用google chrome抓取数据：抓取全国的高中","content":"<p><strong>KEY WORDS</strong> : Chrome插件 数据抓取</p>\n<hr>\n<h2 id=\"1-数据源\">1.数据源</h2>\n<p>正在做一个网站，需要全国的中学数据，中学数据比较全的应该是人人网了，简单搜索发现 <a href=\"http://xuexiao.eol.cn/\" target=\"_blank\" rel=\"external\">http://xuexiao.eol.cn/</a> 也有比较全的数据，并且还有地址信息，所以决定不从人人网抓取了。</p>\n<h2 id=\"2-抓取数据的思路\">2.抓取数据的思路</h2>\n<p>作为一名「优秀」的前端工程师，当然使用 javascrpt 来抓取啦，浏览器提供了便捷的 API，处理 DOM 信息比写后端程序方便太多了。</p>\n<p>查看「中国教育信息」黄页——黄页这种叫法好像是很多年前的事情了，可以看到三部分，挨个遍历下去，并处理分页抓取学校名称就可以了。</p>\n<p><img src=\"/blog/images/2014-05-28-use-google-chrome-capture-data/2.png\" alt=\"数据源\"></p>\n<p>思路如下：</p>\n<ol>\n<li>获取左边的省份列表</li>\n<li>处理该省份的城市</li>\n<li>然后挨个分页抓取就行了</li>\n</ol>\n<p>3部分对应的主要代码如下（网站已经提供了 jQuery 了）：</p>\n<pre><code class=\"javascript\">//1. function getAllProv(){\n  return [\"北京\", \"上海\", \"天津\", \"四川\", \"安徽\", \"江苏\", \"浙江\", \"辽宁\", \"山西\", \"福建\", \"广东\", \"广西\", \"海南\", \"河南\", \"湖南\", \"陕西\", \"湖北\", \"江西\", \"河北\", \"山东\", \"重庆\", \"青海\", \"吉林\", \"云南\", \"贵州\", \"甘肃\", \"宁夏\", \"新疆\", \"西藏\", \"内蒙古\", \"黑龙江\"];\n}\n//2. function setCurrentCitiesOfProv(prov){\n  return $.map($(\".quyu_list a\"),function(a){\n                               var query = a.getAttribute('href');\n                               var val = getQueryStringParameter(query,\"local2\");\n                               return decodeURI(val.replace('_local2',''));\n                             });\n}\n//3. function savePageData(){\n  var prov = getCurrentProv();\n  var city = getCurrentCityOfProv(prov);\n  var schools = $('.right_box');\n  var rows = [];\n  $.map(schools,function(school){\n    var name = $('h2',school).text().trim();\n    var detail = $('h3',school).text().trim();\n    var parts = detail.split(/\\s+/);\n\n    var row = {};\n    row.name = name;\n    // row.prov = decodeURI(prov);\n    row.city = city;\n\n    $.each(parts,function(i,item){\n      var o = {\n          \"地址\":\"address\",\n          \"邮编\":\"mailno\",\n          \"电话\":\"phone\"\n      };\n      var ab = item.split('：');\n      var key = o[ab[0]];\n      row[key] = ab[1];\n    });\n    rows.push(row);\n  })\n  saveStore(rows);// 存储本页的数据\n}</code></pre>\n\n<blockquote>注意，上面的脚本只表示了三个步骤，不能直接运行</blockquote>\n\n<h2 id=\"3-将脚本封装为_Chrome_插件\">3.将脚本封装为 Chrome 插件</h2>\n<p>单个页面的逻辑已经处理完毕了，怎么让浏览器自动抓取下去呢？答案很简单：将脚本变为 chrome 的一个插件，每次 <a href=\"http://xuexiao.eol.cn/\" target=\"_blank\" rel=\"external\">http://xuexiao.eol.cn/</a> 这个站点的页面载入后，都执行上面写好的脚本就行了，每页的学校数据处理完毕后，脚本自动改变 url，刷新获取下页的数据。</p>\n<p>实现一个 chrome 插件，使用 userscript 的方式是最简单的，安装好插件后，插件载入一个脚本，之行上面描述的三步逻辑，并且自动刷新到下面一页。这里比较关键的一个步骤是存储所有的省份、城市，并计算出下页的的 url 。具体请看后面附的完整代码。</p>\n<p>那么具体怎么实现呢？</p>\n<ol>\n<li>创建一个 manifest.json，这个是 chrome userscript 的声明文件</li>\n<li>创建一个 contentscript.js （名字随意，但是在 manifest.json 中要对应），这个脚本的作用仅仅是一个脚本加载器，载入 script.js 执行页面数据抓取逻辑。为什么要这样做呢？因为contentscript.js的之行环境和真是页面的执行环境是隔离的，也就是说contentscript.js的一个变量和页面中的变量可以独立存在，它们属于两个世界，这样做的好处在于，比如你可以独立的运行不同版本的jQuery，而不冲突。 javascript 虽独立运行，但是 dom 接口却是共享的，比如 document.createElement(‘script’) 创建一个脚本并插入到 dom 中，可以实现网页面载入一个脚本的目的， 可以将插件中的 script.js 插入运行中的文档中，每次页面载入都会执行 script.js 。</li>\n<li>创建一个 script.js （名字随意，但是在 manifest.json 中要对应），用于处理真正的数据抓取逻辑。script.js 会将得到的数据存入 localStorage 中，那么所有载入的页面就可以共享这个数据了。</li>\n</ol>\n<p>由于写文章的时候，数据抓取工作还没有完成，就不附上抓取的数据了，页面每秒中才刷新一次，并且只有一个页面在跑，比较慢。要数据的请联系我。</p>\n<h2 id=\"4-插件代码\">4.插件代码</h2>\n<p><a href=\"https://github.com/WeweTom/chrome-extension-data-picker\" target=\"_blank\" rel=\"external\">https://github.com/WeweTom/chrome-extension-data-picker</a></p>\n","source":"_posts/2014-05-28-use-google-chrome-capture-data.md","raw":"---\nlayout: default\ntags : other\ncomments : true\ntitle : 使用google chrome抓取数据：抓取全国的高中\n---\n\n**KEY WORDS** : Chrome插件 数据抓取\n\n--------------------\n\n## 1.数据源\n正在做一个网站，需要全国的中学数据，中学数据比较全的应该是人人网了，简单搜索发现 http://xuexiao.eol.cn/ 也有比较全的数据，并且还有地址信息，所以决定不从人人网抓取了。\n\n## 2.抓取数据的思路\n\n作为一名「优秀」的前端工程师，当然使用 javascrpt 来抓取啦，浏览器提供了便捷的 API，处理 DOM 信息比写后端程序方便太多了。\n\n查看「中国教育信息」黄页——黄页这种叫法好像是很多年前的事情了，可以看到三部分，挨个遍历下去，并处理分页抓取学校名称就可以了。\n\n![数据源](/blog/images/2014-05-28-use-google-chrome-capture-data/2.png)\n\n思路如下：\n\n1. 获取左边的省份列表\n2. 处理该省份的城市\n3. 然后挨个分页抓取就行了\n\n3部分对应的主要代码如下（网站已经提供了 jQuery 了）：\n\n<pre><code class=\"javascript\">//1. function getAllProv(){\n  return [\"北京\", \"上海\", \"天津\", \"四川\", \"安徽\", \"江苏\", \"浙江\", \"辽宁\", \"山西\", \"福建\", \"广东\", \"广西\", \"海南\", \"河南\", \"湖南\", \"陕西\", \"湖北\", \"江西\", \"河北\", \"山东\", \"重庆\", \"青海\", \"吉林\", \"云南\", \"贵州\", \"甘肃\", \"宁夏\", \"新疆\", \"西藏\", \"内蒙古\", \"黑龙江\"];\n}\n//2. function setCurrentCitiesOfProv(prov){\n  return $.map($(\".quyu_list a\"),function(a){\n                               var query = a.getAttribute('href');\n                               var val = getQueryStringParameter(query,\"local2\");\n                               return decodeURI(val.replace('_local2',''));\n                             });\n}\n//3. function savePageData(){\n  var prov = getCurrentProv();\n  var city = getCurrentCityOfProv(prov);\n  var schools = $('.right_box');\n  var rows = [];\n  $.map(schools,function(school){\n    var name = $('h2',school).text().trim();\n    var detail = $('h3',school).text().trim();\n    var parts = detail.split(/\\s+/);\n\n    var row = {};\n    row.name = name;\n    // row.prov = decodeURI(prov);\n    row.city = city;\n\n    $.each(parts,function(i,item){\n      var o = {\n          \"地址\":\"address\",\n          \"邮编\":\"mailno\",\n          \"电话\":\"phone\"\n      };\n      var ab = item.split('：');\n      var key = o[ab[0]];\n      row[key] = ab[1];\n    });\n    rows.push(row);\n  })\n  saveStore(rows);// 存储本页的数据\n}</code></pre>\n\n<blockquote>注意，上面的脚本只表示了三个步骤，不能直接运行</blockquote>\n\n## 3.将脚本封装为 Chrome 插件\n\n单个页面的逻辑已经处理完毕了，怎么让浏览器自动抓取下去呢？答案很简单：将脚本变为 chrome 的一个插件，每次 http://xuexiao.eol.cn/ 这个站点的页面载入后，都执行上面写好的脚本就行了，每页的学校数据处理完毕后，脚本自动改变 url，刷新获取下页的数据。\n\n实现一个 chrome 插件，使用 userscript 的方式是最简单的，安装好插件后，插件载入一个脚本，之行上面描述的三步逻辑，并且自动刷新到下面一页。这里比较关键的一个步骤是存储所有的省份、城市，并计算出下页的的 url 。具体请看后面附的完整代码。\n\n那么具体怎么实现呢？\n\n1. 创建一个 manifest.json，这个是 chrome userscript 的声明文件\n2. 创建一个 contentscript.js （名字随意，但是在 manifest.json 中要对应），这个脚本的作用仅仅是一个脚本加载器，载入 script.js 执行页面数据抓取逻辑。为什么要这样做呢？因为contentscript.js的之行环境和真是页面的执行环境是隔离的，也就是说contentscript.js的一个变量和页面中的变量可以独立存在，它们属于两个世界，这样做的好处在于，比如你可以独立的运行不同版本的jQuery，而不冲突。 javascript 虽独立运行，但是 dom 接口却是共享的，比如 document.createElement('script') 创建一个脚本并插入到 dom 中，可以实现网页面载入一个脚本的目的， 可以将插件中的 script.js 插入运行中的文档中，每次页面载入都会执行 script.js 。\n3. 创建一个 script.js （名字随意，但是在 manifest.json 中要对应），用于处理真正的数据抓取逻辑。script.js 会将得到的数据存入 localStorage 中，那么所有载入的页面就可以共享这个数据了。\n\n由于写文章的时候，数据抓取工作还没有完成，就不附上抓取的数据了，页面每秒中才刷新一次，并且只有一个页面在跑，比较慢。要数据的请联系我。\n\n## 4.插件代码\n\nhttps://github.com/WeweTom/chrome-extension-data-picker\n","slug":"use-google-chrome-capture-data","date":1401206400000,"updated":1405769151000,"excerpt":"","_id":"3iy9xhc5p10eh0q6","categories":[],"photos":[],"link":""},{"layout":"default","tags":["xa4wt96syccfb644"],"comments":true,"title":"睡眠改善计划 （bbc纪录片：睡眠十律 ）","content":"<blockquote>我睡眠一直不太好，晚上睡不着，早上起不来，很累。看到 BBC 有个纪录片「睡眠十律」，于是记录下来，试着改善自己的睡眠</blockquote>\n\n\n<p>中文翻译为「睡眠十律」，但是其实说「律」有点太过了，纪录片中对这些促进睡眠的方式并没有下结论，保证有效，只是一个科学教的探索罢了。所以，真的不一定有效。并且，十个方法对于普通人不一定可行，我在观看时，顺便对这十个方法做了简单的记录：</p>\n<ol>\n<li>睡前 1h 泡个热水澡（在浴缸里），体内温度升高，然后让身体（内部）逐渐冷却，纪录片中说，冷会让人产生睡意。</li>\n<li>睡眠时间限制计划：为期4周时间，每次在卧室只能呆6h，2：00到8：00，到了时间必须起床；刚开始可能非常痛苦，一旦打破了你生物时钟，你就赢了。</li>\n<li>打盹儿补充睡眠：下午2点到5点通常容易打盹，每次建议30min-60min。其它时间尽量控制。片中主要针对以为海上航行的运动员，睡眠不充足，通过打盹补充回来。</li>\n<li>治疗齁声：睡眠后，呼吸道肌肉松弛下来，呼吸道变窄，呼吸时，口腔、鼻腔、软组织发生振动，产生齁声。两种方式，通过在嘴里含东西。没有说更多的东西。</li>\n<li>酒精和咖啡对睡眠的影响：都是不好的。咖啡伤人难以入睡；酒精促进人入睡，但是睡眠的后半部分质量可能比较差。</li>\n<li>利用「蓝光灯」来影响体内的激素水平，来提高起床后的精神状态：一种叫退黑色素的在夜间分泌，让人产生困意。如果利用光照，眼睛中一种特殊细胞受到刺激，会将信息传递给大脑，减退退黑色素的分泌，从而让人清醒——对于必须早起的人有效。片中以bbc的一个早间节目的主播为例。</li>\n<li>食物影响睡眠：富含碳水化合物的食物让人更有睡意；蛋白质食物让人更加清醒。最好睡觉前4h小时进食。</li>\n<li>食物钟控制睡眠——用来倒时差：16小时饥饿会激活食物钟（food clock）。所以，测试通过挨饿来同步食物钟，食物钟激活后（就是挨饿16h 后），会抑制睡眠，这个时候的第一顿按照当地时间的食物非常重要，这顿饭会将你的生物时钟调整为新时区的时间。所以「禁食旅行」吧。片中是以要全球参加比赛的运动员为例，帮助他们倒时差。</li>\n<li>肌肉收紧放松练习：针对持续亢奋，精神状态太好以至于睡不着的人。睡前15min循环做全身肌肉收紧、放松，让自己放松下来。</li>\n<li>自然疗法：薰衣草的味道让你放松；缬草也有类似功效。</li>\n</ol>\n<p>纪录片中，这十个方法对于受测试的人都很有效，真是让人难以置信。</p>\n<p>另外，知乎上也提到了一个方法：睡前看书，zhihu上说《高等数学》同济1版效果奇好</p>\n<p>作为一般人，我觉得 1 、3 、9 倒是可以尝试下；女生也可以薰衣草的熏香。</p>\n<p>我现在在尝试睡眠限制计划，有效果再补充！</p>\n","source":"_posts/2014-05-30-sleep-improve.md","raw":"---\nlayout: default\ntags : life\ncomments : true\ntitle : 睡眠改善计划 （bbc纪录片：睡眠十律 ）\n---\n\n<blockquote>我睡眠一直不太好，晚上睡不着，早上起不来，很累。看到 BBC 有个纪录片「睡眠十律」，于是记录下来，试着改善自己的睡眠</blockquote>\n\n\n中文翻译为「睡眠十律」，但是其实说「律」有点太过了，纪录片中对这些促进睡眠的方式并没有下结论，保证有效，只是一个科学教的探索罢了。所以，真的不一定有效。并且，十个方法对于普通人不一定可行，我在观看时，顺便对这十个方法做了简单的记录：\n\n1. 睡前 1h 泡个热水澡（在浴缸里），体内温度升高，然后让身体（内部）逐渐冷却，纪录片中说，冷会让人产生睡意。\n2. 睡眠时间限制计划：为期4周时间，每次在卧室只能呆6h，2：00到8：00，到了时间必须起床；刚开始可能非常痛苦，一旦打破了你生物时钟，你就赢了。\n3. 打盹儿补充睡眠：下午2点到5点通常容易打盹，每次建议30min-60min。其它时间尽量控制。片中主要针对以为海上航行的运动员，睡眠不充足，通过打盹补充回来。\n4. 治疗齁声：睡眠后，呼吸道肌肉松弛下来，呼吸道变窄，呼吸时，口腔、鼻腔、软组织发生振动，产生齁声。两种方式，通过在嘴里含东西。没有说更多的东西。\n5. 酒精和咖啡对睡眠的影响：都是不好的。咖啡伤人难以入睡；酒精促进人入睡，但是睡眠的后半部分质量可能比较差。\n6. 利用「蓝光灯」来影响体内的激素水平，来提高起床后的精神状态：一种叫退黑色素的在夜间分泌，让人产生困意。如果利用光照，眼睛中一种特殊细胞受到刺激，会将信息传递给大脑，减退退黑色素的分泌，从而让人清醒——对于必须早起的人有效。片中以bbc的一个早间节目的主播为例。\n7. 食物影响睡眠：富含碳水化合物的食物让人更有睡意；蛋白质食物让人更加清醒。最好睡觉前4h小时进食。\n8. 食物钟控制睡眠——用来倒时差：16小时饥饿会激活食物钟（food clock）。所以，测试通过挨饿来同步食物钟，食物钟激活后（就是挨饿16h 后），会抑制睡眠，这个时候的第一顿按照当地时间的食物非常重要，这顿饭会将你的生物时钟调整为新时区的时间。所以「禁食旅行」吧。片中是以要全球参加比赛的运动员为例，帮助他们倒时差。\n9. 肌肉收紧放松练习：针对持续亢奋，精神状态太好以至于睡不着的人。睡前15min循环做全身肌肉收紧、放松，让自己放松下来。\n10. 自然疗法：薰衣草的味道让你放松；缬草也有类似功效。\n\n\n纪录片中，这十个方法对于受测试的人都很有效，真是让人难以置信。\n\n另外，知乎上也提到了一个方法：睡前看书，zhihu上说《高等数学》同济1版效果奇好\n\n作为一般人，我觉得 1 、3 、9 倒是可以尝试下；女生也可以薰衣草的熏香。\n\n我现在在尝试睡眠限制计划，有效果再补充！\n","slug":"sleep-improve","date":1401379200000,"updated":1405769151000,"excerpt":"","_id":"n8ry83aayu2y1150","categories":[],"photos":[],"link":""},{"layout":"default","tags":["xa4wt96syccfb644"],"comments":true,"title":"买了一口锅","content":"<p>做饭既是让人享受又十分浪费时间的事情，一天做两顿饭，饭后忍不住还看下电视，基本就<br>花费了5个小时左右，要是再起的晚，9、10点钟才起，白天真的就所剩不多了。在知乎上逛，<br>[1]发现一个特别适合一个人做饭的神器——塔吉锅。当时看到，没有立马下单，因为有人一起住，<br>大家轮流着做饭，倒还可以忍受，最近人少了，没人做饭了，于是准备入手一个。</p>\n<p><img src=\"/blog/images/2014-06-02-a-casserole/1.png\" alt=\"tajiguo\"></p>\n<p>探索下发现，这货的最大毛病就是粘锅!!!</p>\n<p><img src=\"/blog/images/2014-06-02-a-casserole/2.png\" alt=\"zhanguo\"></p>\n<p>于是，搜索搜索，发现了一口不锈钢不粘锅，已下单。等待尝试……</p>\n<p><img src=\"/blog/images/2014-06-02-a-casserole/3.png\" alt=\"myguo\"></p>\n<p>[1] <a href=\"http://www.zhihu.com/question/22515987\" target=\"_blank\" rel=\"external\">http://www.zhihu.com/question/22515987</a></p>\n","source":"_posts/2014-06-02-a-casserole.md","raw":"---\nlayout: default\ntags : life\ncomments : true\ntitle : 买了一口锅\n---\n\n做饭既是让人享受又十分浪费时间的事情，一天做两顿饭，饭后忍不住还看下电视，基本就\n花费了5个小时左右，要是再起的晚，9、10点钟才起，白天真的就所剩不多了。在知乎上逛，\n[1]发现一个特别适合一个人做饭的神器——塔吉锅。当时看到，没有立马下单，因为有人一起住，\n大家轮流着做饭，倒还可以忍受，最近人少了，没人做饭了，于是准备入手一个。\n\n![tajiguo](/blog/images/2014-06-02-a-casserole/1.png)\n\n探索下发现，这货的最大毛病就是粘锅!!!\n\n![zhanguo](/blog/images/2014-06-02-a-casserole/2.png)\n\n\n于是，搜索搜索，发现了一口不锈钢不粘锅，已下单。等待尝试……\n\n![myguo](/blog/images/2014-06-02-a-casserole/3.png)\n\n\n[1] http://www.zhihu.com/question/22515987\n","slug":"a-casserole","date":1401638400000,"updated":1405769151000,"excerpt":"","_id":"jckbnz41e46joymm","categories":[],"photos":[],"link":""},{"layout":"default","tags":["9tzjmzaq0co602sv"],"comments":true,"title":"两个hybrid手机开发UI框架","content":"<h3 id=\"第一个版本：基于chocolatechip-ui\">第一个版本：基于chocolatechip-ui</h3>\n<p>做了一个手机APP练手，一个月前上线了一个非常简单的版本。</p>\n<p><img src=\"/blog/images/2014-06-04-hybrid-h5-framework/v1_1.png\" alt=\"v1_1\"></p>\n<p><img src=\"/blog/images/2014-06-04-hybrid-h5-framework/v1_2.png\" alt=\"v1_2\"></p>\n<p><img src=\"/blog/images/2014-06-04-hybrid-h5-framework/v1_3.png\" alt=\"v1_3\"></p>\n<p><img src=\"/blog/images/2014-06-04-hybrid-h5-framework/v1_4.png\" alt=\"v1_4\"></p>\n<p><img src=\"/blog/images/2014-06-04-hybrid-h5-framework/v1_5.png\" alt=\"v1_5\"></p>\n<h3 id=\"第二个版本：基于_ionic\">第二个版本：基于 ionic</h3>\n<p><img src=\"/blog/images/2014-06-04-hybrid-h5-framework/ios_1.png\" alt=\"ios_1\"></p>\n<p><img src=\"/blog/images/2014-06-04-hybrid-h5-framework/ios_3.png\" alt=\"ios_3\"></p>\n<h3 id=\"使用下来的一些感受\">使用下来的一些感受</h3>\n<ol>\n<li><a href=\"http://chocolatechip-ui.com/\" target=\"_blank\" rel=\"external\">chocolatechip-ui</a> 只是一个UI框架，UI的展示逻辑需要开发者自己处理，亮点在于在不同的平台下，自动匹配到相应的系统UI风格；</li>\n<li><a href=\"http://ionicframework.com/\" target=\"_blank\" rel=\"external\">http://ionicframework.com/</a> 只有一套UI风格，就是iOS 7扁平化的风格，ionic 与 AngularJs 进行了深度绑定，如果熟悉mvvm的开发风格的话，开发起来会非常快，不过曲线略微陡峭，不过 ionic 作为UI单独使用也是可以的</li>\n<li>感觉 ionic 提供更为华丽的组件，而且官方的开发论坛也非常活跃，作为一名f2e，学下Angular自是不在话下，第二版的APP，加上学习Angular也就花了4天时间。</li>\n</ol>\n","source":"_posts/2014-06-04-hybrid-h5-framework.md","raw":"---\nlayout: default\ntags : cordova\ncomments : true\ntitle : 两个hybrid手机开发UI框架\n---\n\n### 第一个版本：基于chocolatechip-ui \n\n做了一个手机APP练手，一个月前上线了一个非常简单的版本。\n\n![v1_1](/blog/images/2014-06-04-hybrid-h5-framework/v1_1.png)\n\n![v1_2](/blog/images/2014-06-04-hybrid-h5-framework/v1_2.png)\n\n![v1_3](/blog/images/2014-06-04-hybrid-h5-framework/v1_3.png)\n\n![v1_4](/blog/images/2014-06-04-hybrid-h5-framework/v1_4.png)\n\n![v1_5](/blog/images/2014-06-04-hybrid-h5-framework/v1_5.png)\n\n### 第二个版本：基于 ionic\n\n![ios_1](/blog/images/2014-06-04-hybrid-h5-framework/ios_1.png)\n\n![ios_3](/blog/images/2014-06-04-hybrid-h5-framework/ios_3.png)\n\n\n### 使用下来的一些感受\n\n1. [chocolatechip-ui](http://chocolatechip-ui.com/) 只是一个UI框架，UI的展示逻辑需要开发者自己处理，亮点在于在不同的平台下，自动匹配到相应的系统UI风格；\n2. [http://ionicframework.com/](http://ionicframework.com/) 只有一套UI风格，就是iOS 7扁平化的风格，ionic 与 AngularJs 进行了深度绑定，如果熟悉mvvm的开发风格的话，开发起来会非常快，不过曲线略微陡峭，不过 ionic 作为UI单独使用也是可以的\n3. 感觉 ionic 提供更为华丽的组件，而且官方的开发论坛也非常活跃，作为一名f2e，学下Angular自是不在话下，第二版的APP，加上学习Angular也就花了4天时间。\n","slug":"hybrid-h5-framework","date":1401811200000,"updated":1405769151000,"excerpt":"","_id":"aznsezcpghdwgu82","categories":[],"photos":[],"link":""},{"layout":"default","tags":["jj7q5mcc4b4cmavz"],"comments":true,"title":"mongodb 的笔记","content":"<h3 id=\"1-_mongodb_的连接数问题\">1. mongodb 的连接数问题</h3>\n<p>每次接受一个请求，打开数据库，然后将其关闭。像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/detail/:id'</span>,<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req,res)</span>{</span></div><div class=\"line\">  MongoClient.connect(<span class=\"string\">'mongodb://127.0.0.1:27017/test'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err, db)</span> {</span></div><div class=\"line\">    db.findOne({_id:ObjectId(req.params.id)},<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err,result)</span>{</span></div><div class=\"line\">      <span class=\"comment\">// do sth</span></div><div class=\"line\">      db.close()</div><div class=\"line\">    })</div><div class=\"line\">  });  </div><div class=\"line\">})</div></pre></td></tr></table></figure>\n\n<p>直觉有点浪费，每次 request 都重新建立 db connection，用完后又关掉，对于高并发的应用来说，尤其浪费。</p>\n<p>所以，更好的方式是复用db connection，以下代码摘自 mongodb node native 官方例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> mongodb = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> MongoClient = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>).MongoClient;</div><div class=\"line\"><span class=\"keyword\">var</span> db;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Initialize connection once</span></div><div class=\"line\">MongoClient.connect(<span class=\"string\">\"mongodb://localhost:27017/integration_test\"</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err, database)</span> {</span></div><div class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</div><div class=\"line\"></div><div class=\"line\">  db = database;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Start the application after the database connection is ready</span></div><div class=\"line\">  app.listen(<span class=\"number\">3000</span>);</div><div class=\"line\">  console.log(<span class=\"string\">\"Listening on port 3000\"</span>);</div><div class=\"line\">});</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Reuse database object in request handlers</span></div><div class=\"line\">app.get(<span class=\"string\">\"/\"</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(req, res)</span> {</span></div><div class=\"line\">  db.collection(<span class=\"string\">\"replicaset_mongo_client_collection\"</span>).find({}, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err, docs)</span> {</span></div><div class=\"line\">    docs.each(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err, doc)</span> {</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(doc) {</div><div class=\"line\">        console.log(doc);</div><div class=\"line\">      }<span class=\"keyword\">else</span> {</div><div class=\"line\">        res.end();</div><div class=\"line\">      }</div><div class=\"line\">    });</div><div class=\"line\">  });</div><div class=\"line\">});</div></pre></td></tr></table></figure><br>应用初始化时，就建立一个 db 实例，以后所有的连接，都是使用这个 db connection。<br><br>并且，通过上面方式建立的 db connection 单独的连接，而是 connection pool，非常高效。<br><br><blockquote><br>You open do MongoClient.connect once when your app boots up and reuse the db object. It’s not a singleton connection pool each .connect creates a new connection pool. [4]<br></blockquote><br><br>更进一步，API 还提供了 maxPoolSize 选项，设置连接池的最大值，默认为 5 <a href=\"http://mongodb.github.io/node-mongodb-native/driver-articles/mongoclient.html\" target=\"_blank\" rel=\"external\">http://mongodb.github.io/node-mongodb-native/driver-articles/mongoclient.html</a><br><br>### 2. mongodb 连接失败导致 node crash<br><br>见 stackoverflow 上的问题 How to ensure Node.js keeps running after MonogBD connection drops? [1]，如何让 Node.js 在数据库挂掉后继续跑？ 目前没有特别好的解决方案。<br><br>首先描述下问题，创建一个 mongodb client：<br><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MongoClient.connect(<span class=\"string\">'mongodb://127.0.0.1:27017/test'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(err, db)</span> {</span></div><div class=\"line\"><span class=\"comment\">// do sth</span></div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>当db连接断掉后（可以手动kill掉mongod进程来模拟复现当掉的情况），再访问 web 服务，就会出现下面类似的出错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Error</span>: failed to connect to [localhost:<span class=\"number\">27017</span>]</div></pre></td></tr></table></figure>\n\n<p>这时候web服务也宕掉了……</p>\n<p>理想的情况是，希望出现一个 500 内部错误提示界面，或者提示在升级什么的，但是数据库连接断掉以后，（我猜测）是 throw 了一个 Error 出来，导致 Node 的主进程挂掉了</p>\n<p>其中一个解决方案是，将数据库的连接操作放在 domain 中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"built_in\">require</span>(<span class=\"string\">'domain'</span>).create();</div><div class=\"line\"></div><div class=\"line\">d.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(er)</span> {</span></div><div class=\"line\">  console.log(<span class=\"string\">'Oh no, something wrong with DB'</span>);</div><div class=\"line\">});</div><div class=\"line\"></div><div class=\"line\">d.run(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> {</span></div><div class=\"line\">  <span class=\"comment\">// 这里使用的是 mongoose</span></div><div class=\"line\">  mongoose.connect(config.db, options);</div><div class=\"line\">});</div></pre></td></tr></table></figure>\n\n<p>domain 的介绍见 文档 <a href=\"http://nodejs.org/api/domain.html，\" target=\"_blank\" rel=\"external\">http://nodejs.org/api/domain.html，</a> 不过，有点要注意就是 domain 还不够稳定 ，文档标注的是 <code>unstable</code>，<br>不过，附录[1] 说已经用于生产环境中了，并且没有发现啥问题。</p>\n<h3 id=\"3-_总结：数据库连接可以复用；为保证数据库挂掉后，Node-js_主进程仍然继续跑，可以将数据可的连接操作放到_domain_模块中\">3. 总结：数据库连接可以复用；为保证数据库挂掉后，Node.js 主进程仍然继续跑，可以将数据可的连接操作放到 <code>domain</code> 模块中</h3>\n<h3 id=\"4-_附录：mongolab_上的一篇博文_Deep_Dive_into_Connection_Pooling_[3]\">4. 附录：mongolab 上的一篇博文 Deep Dive into Connection Pooling [3]</h3>\n<h3 id=\"参考\">参考</h3>\n<p>[1] <a href=\"http://stackoverflow.com/questions/20689768/how-to-ensure-node-js-keeps-running-after-monogbd-connection-drops/20690008#20690008\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/20689768/how-to-ensure-node-js-keeps-running-after-monogbd-connection-drops/20690008#20690008</a></p>\n<p>[2] <a href=\"http://stackoverflow.com/questions/10656574/how-to-manage-mongodb-connections-in-a-nodejs-webapp\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/10656574/how-to-manage-mongodb-connections-in-a-nodejs-webapp</a></p>\n<p>[3] <a href=\"http://blog.mongolab.com/2013/11/deep-dive-into-connection-pooling/\" target=\"_blank\" rel=\"external\">http://blog.mongolab.com/2013/11/deep-dive-into-connection-pooling/</a> 介绍两种数据库连接方式，一种复用（好），一种不复用（坏）         </p>\n<p>[4] <a href=\"https://groups.google.com/forum/#!msg/node-mongodb-native/mSGnnuG8C1o/Hiaqvdu1bWoJ\" target=\"_blank\" rel=\"external\">https://groups.google.com/forum/#!msg/node-mongodb-native/mSGnnuG8C1o/Hiaqvdu1bWoJ</a></p>\n","source":"_posts/2014-06-04-mongodb-note.md","raw":"---\nlayout: default\ntags : mongodb\ncomments : true\ntitle : mongodb 的笔记\n---\n\n### 1. mongodb 的连接数问题\n每次接受一个请求，打开数据库，然后将其关闭。像下面这样：\n\n```javascript\napp.get('/detail/:id',function(req,res){\n  MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {\n    db.findOne({_id:ObjectId(req.params.id)},function(err,result){\n      // do sth\n      db.close()\n    })\n  });  \n})\n```\n\n直觉有点浪费，每次 request 都重新建立 db connection，用完后又关掉，对于高并发的应用来说，尤其浪费。\n\n所以，更好的方式是复用db connection，以下代码摘自 mongodb node native 官方例子：\n\n```javascript\nvar express = require('express');\nvar mongodb = require('mongodb');\nvar app = express();\n\nvar MongoClient = require('mongodb').MongoClient;\nvar db;\n\n// Initialize connection once\nMongoClient.connect(\"mongodb://localhost:27017/integration_test\", function(err, database) {\n  if(err) throw err;\n\n  db = database;\n\n  // Start the application after the database connection is ready\n  app.listen(3000);\n  console.log(\"Listening on port 3000\");\n});\n\n// Reuse database object in request handlers\napp.get(\"/\", function(req, res) {\n  db.collection(\"replicaset_mongo_client_collection\").find({}, function(err, docs) {\n    docs.each(function(err, doc) {\n      if(doc) {\n        console.log(doc);\n      }else {\n        res.end();\n      }\n    });\n  });\n});     \n```\n应用初始化时，就建立一个 db 实例，以后所有的连接，都是使用这个 db connection。\n\n并且，通过上面方式建立的 db connection 单独的连接，而是 connection pool，非常高效。\n\n<blockquote>\nYou open do MongoClient.connect once when your app boots up and reuse the db object. It's not a singleton connection pool each .connect creates a new connection pool. [4]\n</blockquote>\n\n更进一步，API 还提供了 maxPoolSize 选项，设置连接池的最大值，默认为 5 http://mongodb.github.io/node-mongodb-native/driver-articles/mongoclient.html\n\n### 2. mongodb 连接失败导致 node crash\n\n见 stackoverflow 上的问题 How to ensure Node.js keeps running after MonogBD connection drops? [1]，如何让 Node.js 在数据库挂掉后继续跑？ 目前没有特别好的解决方案。\n\n首先描述下问题，创建一个 mongodb client：\n\n```javascript\nMongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {\n// do sth\n});  \n```\n\n当db连接断掉后（可以手动kill掉mongod进程来模拟复现当掉的情况），再访问 web 服务，就会出现下面类似的出错：\n\n```javascript\nError: failed to connect to [localhost:27017]     \n```\n\n这时候web服务也宕掉了……\n\n理想的情况是，希望出现一个 500 内部错误提示界面，或者提示在升级什么的，但是数据库连接断掉以后，（我猜测）是 throw 了一个 Error 出来，导致 Node 的主进程挂掉了\n\n其中一个解决方案是，将数据库的连接操作放在 domain 中。\n\n```javascript\nvar d = require('domain').create();\n\nd.on('error', function(er) {\n  console.log('Oh no, something wrong with DB');\n});\n\nd.run(function() {\n  // 这里使用的是 mongoose\n  mongoose.connect(config.db, options);\n});     \n```\n\ndomain 的介绍见 文档 http://nodejs.org/api/domain.html， 不过，有点要注意就是 domain 还不够稳定 ，文档标注的是 `unstable`，\n不过，附录[1] 说已经用于生产环境中了，并且没有发现啥问题。\n\n### 3. 总结：数据库连接可以复用；为保证数据库挂掉后，Node.js 主进程仍然继续跑，可以将数据可的连接操作放到 `domain` 模块中\n\n### 4. 附录：mongolab 上的一篇博文 Deep Dive into Connection Pooling [3]\n\n### 参考\n\n[1] http://stackoverflow.com/questions/20689768/how-to-ensure-node-js-keeps-running-after-monogbd-connection-drops/20690008#20690008\n\n[2] http://stackoverflow.com/questions/10656574/how-to-manage-mongodb-connections-in-a-nodejs-webapp\n\n[3] http://blog.mongolab.com/2013/11/deep-dive-into-connection-pooling/ 介绍两种数据库连接方式，一种复用（好），一种不复用（坏）         \n\n[4] https://groups.google.com/forum/#!msg/node-mongodb-native/mSGnnuG8C1o/Hiaqvdu1bWoJ\n\n","slug":"mongodb-note","date":1401811200000,"updated":1405769151000,"excerpt":"","_id":"vv4r4z25lvsulfa4","categories":[],"photos":[],"link":""},{"layout":"default","tags":["9tzjmzaq0co602sv","z84ulbr8j38z8r3v"],"comments":true,"title":"iOS 8 发布对Hybrid app有什么影响？","content":"<p>iOS 8 正式发布后，基于 UIWebView 的 Hybrid app 性能有望获得大幅提升.</p>\n<h3 id=\"webview_使用了和_safari_javascript_引擎\">webview 使用了和 safari javascript 引擎</h3>\n<p>Hybrid app 是基于 UIWebView 的应用，比如 Phonegap/cordova 最终会将 html/js/css 打<br>包运行在 UIWebView 中。而在 iOS 8 之前，处于安全的考虑[1]，只有 Safari 开启了 JavaScriptCore  just-in-time (JIT) 技术，实时的将 javascript 编译为机器码。使用了 JIT 技术有什么影响呢？js的计算能力有 200% - 300% 的提升，见下图 [2] —— 注意是js计算能力，对于非计算密集型的，比如游戏之外的项目，可能性能提升不是那么明显，比如参考[3]提到了一个 Todo MVC 的应用，经他的测试也有 20% 左右的提升.</p>\n<p><img src=\"/blog/images/2014-06-17-ios8-is-good-for-hybrid-app-developer/Chrome_for_iOS_SunSpider.jpg\" alt=\"ios_chrome\"></p>\n<p><img src=\"/blog/images/2014-06-17-ios8-is-good-for-hybrid-app-developer/iOS_Safari_SunSpider.jpg\" alt=\"ios_safari\"></p>\n<h3 id=\"需要_Hybrid_应应用框架_Phonegap/cordova_跟进\">需要 Hybrid 应应用框架 Phonegap/cordova 跟进</h3>\n<p>iOS 8 发布了，如果开发者的应用依赖像 Phonegap/cordova 这样的第三方框架，是不能立马享受到带来的好处的，需要 Phonegap/cordova 从 UIWebView 迁移到 WKWebView API. 不过，网络上还没有看到 cordova 跟进的消息，本身 iOS 的正式发布也要等一段时间，拭目以待吧.</p>\n<h3 id=\"参考\">参考</h3>\n<p>[1] <a href=\"http://www.cnet.com/news/ios-8-grants-new-power-to-rival-browsers-web-based-apps/\" target=\"_blank\" rel=\"external\">http://www.cnet.com/news/ios-8-grants-new-power-to-rival-browsers-web-based-apps/</a>  One possible reason was security: a JIT compiler essentially creates a new program on the fly and marks the region of memory it’s stored in as executable, and a hacker could potentially abuse that privilege.</p>\n<p>[2] <a href=\"http://developer.telerik.com/featured/why-ios-8s-wkwebview-is-a-big-deal-for-hybrid-development/\" target=\"_blank\" rel=\"external\">http://developer.telerik.com/featured/why-ios-8s-wkwebview-is-a-big-deal-for-hybrid-development/</a></p>\n<pre><code><span class=\"label\">http:</span>//developer<span class=\"preprocessor\">.telerik</span><span class=\"preprocessor\">.com</span>/wp-content/uploads/<span class=\"number\">2014</span>/<span class=\"number\">06</span>/Chrome_for_iOS_SunSpider<span class=\"preprocessor\">.jpg</span>\n\n<span class=\"label\">http:</span>//developer<span class=\"preprocessor\">.telerik</span><span class=\"preprocessor\">.com</span>/wp-content/uploads/<span class=\"number\">2014</span>/<span class=\"number\">06</span>/iOS_Safari_SunSpider<span class=\"preprocessor\">.jpg</span>\n</code></pre><p>[3] <a href=\"http://developer.telerik.com/featured/why-ios-8s-wkwebview-is-a-big-deal-for-hybrid-development/\" target=\"_blank\" rel=\"external\">http://developer.telerik.com/featured/why-ios-8s-wkwebview-is-a-big-deal-for-hybrid-development/</a></p>\n<p>[4] <a href=\"http://www.minemobile.com/nitro-javascript-engine-in-ios-phonegap-apps/\" target=\"_blank\" rel=\"external\">http://www.minemobile.com/nitro-javascript-engine-in-ios-phonegap-apps/</a></p>\n","source":"_posts/2014-06-17-ios8-is-good-for-hybrid-app-developer.md","raw":"---\nlayout: default\ntags : \n- cordova\n- phonegap\ncomments : true\ntitle : iOS 8 发布对Hybrid app有什么影响？\n---\n\n\niOS 8 正式发布后，基于 UIWebView 的 Hybrid app 性能有望获得大幅提升.\n\n### webview 使用了和 safari javascript 引擎\n\nHybrid app 是基于 UIWebView 的应用，比如 Phonegap/cordova 最终会将 html/js/css 打\n包运行在 UIWebView 中。而在 iOS 8 之前，处于安全的考虑[1]，只有 Safari 开启了 JavaScriptCore  just-in-time (JIT) 技术，实时的将 javascript 编译为机器码。使用了 JIT 技术有什么影响呢？js的计算能力有 200% - 300% 的提升，见下图 [2] —— 注意是js计算能力，对于非计算密集型的，比如游戏之外的项目，可能性能提升不是那么明显，比如参考[3]提到了一个 Todo MVC 的应用，经他的测试也有 20% 左右的提升.\n\n\n![ios_chrome](/blog/images/2014-06-17-ios8-is-good-for-hybrid-app-developer/Chrome_for_iOS_SunSpider.jpg)\n\n![ios_safari](/blog/images/2014-06-17-ios8-is-good-for-hybrid-app-developer/iOS_Safari_SunSpider.jpg)\n\n\n### 需要 Hybrid 应应用框架 Phonegap/cordova 跟进\n\niOS 8 发布了，如果开发者的应用依赖像 Phonegap/cordova 这样的第三方框架，是不能立马享受到带来的好处的，需要 Phonegap/cordova 从 UIWebView 迁移到 WKWebView API. 不过，网络上还没有看到 cordova 跟进的消息，本身 iOS 的正式发布也要等一段时间，拭目以待吧.\n\n\n### 参考\n\n[1] http://www.cnet.com/news/ios-8-grants-new-power-to-rival-browsers-web-based-apps/  One possible reason was security: a JIT compiler essentially creates a new program on the fly and marks the region of memory it's stored in as executable, and a hacker could potentially abuse that privilege.\n\n[2] http://developer.telerik.com/featured/why-ios-8s-wkwebview-is-a-big-deal-for-hybrid-development/\n\n    http://developer.telerik.com/wp-content/uploads/2014/06/Chrome_for_iOS_SunSpider.jpg\n    \n    http://developer.telerik.com/wp-content/uploads/2014/06/iOS_Safari_SunSpider.jpg\n\n[3] http://developer.telerik.com/featured/why-ios-8s-wkwebview-is-a-big-deal-for-hybrid-development/\n\n[4] http://www.minemobile.com/nitro-javascript-engine-in-ios-phonegap-apps/\n","slug":"ios8-is-good-for-hybrid-app-developer","date":1402934400000,"updated":1405769151000,"excerpt":"","_id":"xnjq9p4g2ett2hfm","categories":[],"photos":[],"link":""},{"layout":"default","tags":["mh5s4o1lr78wfyzj"],"comments":true,"title":"参加智谷创业培训记——如何写商业计划书","content":"<h2 id=\"1-_参加过程：\">1. 参加过程：</h2>\n<p>周日晚上6:00-8:00参加智谷创业培训——商业计划辅导，我提前一个小时就<br>到了下沙浙江理工大学，夜羽是这所学校毕业的.问了下校园里的同学，比较顺利的找<br>到了 N311 教室，得吃晚饭，于是又出校门找食堂，食堂在校门外宿舍区，我分不清<br>南北，在挺远的一个地方，好难找到。我在1楼买了一个煎饼果子，才￥6。简单吃了<br>又回 N311 教室，就我一个人，5:40了都还没人来，拿出 mac 继续码代码。等到<br>17:50了，我都怀疑自己搞错了，最近老是犯糊涂，买错票，坐错车，来的时候也是做<br>错了地铁，杭州1号线，往下沙那边走有两个方向，在客运站分叉，一个去临平的，还<br>有一个是去哪儿的，我正好坐错了方向，又只好折回来，还好，挺快，没有耽误太多<br>时间。</p>\n<p>我一个人来的，自己坐在那儿孤零零的。于是找周围的人搭讪，都是些小朋友。</p>\n<p>培训会实际上6:30半过了都还没开始，我问那个培训的老师什么时候开始，我说我住<br>在城西，得急着赶回去。结果聊上了，问我是什么项目，我大致说了下，结果在接下<br>来的讲解中，还多次以我的项目为例……</p>\n<h2 id=\"2-_感受：\">2. 感受：</h2>\n<p>这次参加培训的主要是在校大学时居多，并且遇到的几个竟然是大一的……我猜，<br>他们只是想丰富验下生活罢了，创业艰辛</p>\n<h2 id=\"3-_学到的知识：\">3. 学到的知识：</h2>\n<p>讲师说，注册公司非常容易，一周就能搞定；杭州市的创业大赛举办了<br>3年了，无偿给创业团队种子基金，得奖是3w，按讲师的说法是「害了创业团队」；这<br>次是江干区的组织的创业大赛，是第一年举办，得奖是5w；面向在校大学生，感觉有<br>点水，讲师的说法是，现在全国找不到一家直接投钱给大学生的，智谷是第一家，智<br>谷在做「行业投资」，区别于「风险投资」，风险投资方只能通过上市退出，所以要<br>求很严格。</p>\n<h2 id=\"4-_总结：\">4. 总结：</h2>\n<p>参加这次活动最大的意义在于，认识了一群充满梦想的伙伴，创业路上，并不孤单。</p>\n<h2 id=\"5-_图片\">5. 图片</h2>\n<p><img src=\"/blog/images/2014-06-23-hangzhou-zhigu-train/1.jpg\" alt=\"1.jpg\"></p>\n<p><img src=\"/blog/images/2014-06-23-hangzhou-zhigu-train/2.jpg\" alt=\"2.jpg\"></p>\n<p><img src=\"/blog/images/2014-06-23-hangzhou-zhigu-train/3.jpg\" alt=\"3.jpg\"></p>\n<p><img src=\"/blog/images/2014-06-23-hangzhou-zhigu-train/4.jpg\" alt=\"4.jpg\"></p>\n<p><img src=\"/blog/images/2014-06-23-hangzhou-zhigu-train/5.jpg\" alt=\"5.jpg\"></p>\n<p><img src=\"/blog/images/2014-06-23-hangzhou-zhigu-train/6.jpg\" alt=\"6.jpg\"></p>\n<p><img src=\"/blog/images/2014-06-23-hangzhou-zhigu-train/7.jpg\" alt=\"7.jpg\"></p>\n<p><img src=\"/blog/images/2014-06-23-hangzhou-zhigu-train/8.jpg\" alt=\"8.jpg\"></p>\n","source":"_posts/2014-06-23-hangzhou-zhigu-train.md","raw":"---\nlayout: default\ntags : startup\ncomments : true\ntitle : 参加智谷创业培训记——如何写商业计划书\n---\n\n\n## 1. 参加过程：\n\n周日晚上6:00-8:00参加智谷创业培训——商业计划辅导，我提前一个小时就\n到了下沙浙江理工大学，夜羽是这所学校毕业的.问了下校园里的同学，比较顺利的找\n到了 N311 教室，得吃晚饭，于是又出校门找食堂，食堂在校门外宿舍区，我分不清\n南北，在挺远的一个地方，好难找到。我在1楼买了一个煎饼果子，才￥6。简单吃了\n又回 N311 教室，就我一个人，5:40了都还没人来，拿出 mac 继续码代码。等到\n17:50了，我都怀疑自己搞错了，最近老是犯糊涂，买错票，坐错车，来的时候也是做\n错了地铁，杭州1号线，往下沙那边走有两个方向，在客运站分叉，一个去临平的，还\n有一个是去哪儿的，我正好坐错了方向，又只好折回来，还好，挺快，没有耽误太多\n时间。\n\n我一个人来的，自己坐在那儿孤零零的。于是找周围的人搭讪，都是些小朋友。\n\n培训会实际上6:30半过了都还没开始，我问那个培训的老师什么时候开始，我说我住\n在城西，得急着赶回去。结果聊上了，问我是什么项目，我大致说了下，结果在接下\n来的讲解中，还多次以我的项目为例……\n\n## 2. 感受：\n\n这次参加培训的主要是在校大学时居多，并且遇到的几个竟然是大一的……我猜，\n他们只是想丰富验下生活罢了，创业艰辛\n\n## 3. 学到的知识：\n\n讲师说，注册公司非常容易，一周就能搞定；杭州市的创业大赛举办了\n3年了，无偿给创业团队种子基金，得奖是3w，按讲师的说法是「害了创业团队」；这\n次是江干区的组织的创业大赛，是第一年举办，得奖是5w；面向在校大学生，感觉有\n点水，讲师的说法是，现在全国找不到一家直接投钱给大学生的，智谷是第一家，智\n谷在做「行业投资」，区别于「风险投资」，风险投资方只能通过上市退出，所以要\n求很严格。\n\n\n## 4. 总结：\n参加这次活动最大的意义在于，认识了一群充满梦想的伙伴，创业路上，并不孤单。\n\n\n## 5. 图片\n\n\n![1.jpg](/blog/images/2014-06-23-hangzhou-zhigu-train/1.jpg)\n\n![2.jpg](/blog/images/2014-06-23-hangzhou-zhigu-train/2.jpg)\n\n![3.jpg](/blog/images/2014-06-23-hangzhou-zhigu-train/3.jpg)\n\n![4.jpg](/blog/images/2014-06-23-hangzhou-zhigu-train/4.jpg)\n\n![5.jpg](/blog/images/2014-06-23-hangzhou-zhigu-train/5.jpg)\n\n![6.jpg](/blog/images/2014-06-23-hangzhou-zhigu-train/6.jpg)\n\n![7.jpg](/blog/images/2014-06-23-hangzhou-zhigu-train/7.jpg)\n\n![8.jpg](/blog/images/2014-06-23-hangzhou-zhigu-train/8.jpg)\n","slug":"hangzhou-zhigu-train","date":1403452800000,"updated":1405769151000,"excerpt":"","_id":"s815mrj0k8iyp7v3","categories":[],"photos":[],"link":""},{"layout":"default","tags":["9tzjmzaq0co602sv"],"comments":true,"title":"cordova icon generator","content":"<p>cordova/phonegap 能实现跨平台，在各个平台下有不同的 icon、land screen，作为独立开发者，没有设计师，一切都自己搞的人来说，要做那么多套 icon 和 land screen 真是一件悲痛的事情。仅仅就 iOS 和 android 而言，都要生成这么多的图标，下面这还仅仅是iOS 的：</p>\n<p><img src=\"/blog/images/2014-07-10-cordova-generator/1_c.png\" alt=\"pic\"></p>\n<p><img src=\"/blog/images/2014-07-10-cordova-generator/2_c.png\" alt=\"pic\"></p>\n<p><img src=\"/blog/images/2014-07-10-cordova-generator/3_c.png\" alt=\"pic\"></p>\n<p>于是，写了个工具，从一张大图片直接生成所有的 icon 、land screen ，放到了 <a href=\"https://github.com/WeweTom/cordova-gen\" target=\"_blank\" rel=\"external\">github 上</a> ，</p>\n<p><strong>注意：</strong> 依赖 ImageMagic 的 convert 命令</p>\n<ol>\n<li>在 Mac 下 安装 <code>brew install imagemagick</code></li>\n<li>linux (Ubuntu) 下 <code>apt-get install imagemagick</code></li>\n</ol>\n","source":"_posts/2014-07-10-cordova-generator.md","raw":"---\nlayout: default\ntags : cordova\ncomments : true\ntitle : cordova icon generator\n---\n\ncordova/phonegap 能实现跨平台，在各个平台下有不同的 icon、land screen，作为独立开发者，没有设计师，一切都自己搞的人来说，要做那么多套 icon 和 land screen 真是一件悲痛的事情。仅仅就 iOS 和 android 而言，都要生成这么多的图标，下面这还仅仅是iOS 的：\n\n![pic](/blog/images/2014-07-10-cordova-generator/1_c.png)\n\n\n![pic](/blog/images/2014-07-10-cordova-generator/2_c.png)\n\n\n![pic](/blog/images/2014-07-10-cordova-generator/3_c.png)\n\n\n于是，写了个工具，从一张大图片直接生成所有的 icon 、land screen ，放到了 [github 上](https://github.com/WeweTom/cordova-gen) ，\n\n**注意：** 依赖 ImageMagic 的 convert 命令\n\n1. 在 Mac 下 安装 `brew install imagemagick`\n2. linux (Ubuntu) 下 `apt-get install imagemagick`\n","slug":"cordova-generator","date":1404921600000,"updated":1405769151000,"excerpt":"","_id":"b2tv9n11egsh2jkj","categories":[],"photos":[],"link":""},{"content":"<hr>\n<p>layout: default<br>tags :<br>-cordova<br>-ios<br>comments : true</p>\n<h2 id=\"title_:_iOS_开发的第一印象\">title : iOS 开发的第一印象</h2>\n<p>第一、贵 ，$99 刀换成人民币要 699 圆</p>\n<p>第二、申请流程要填一大堆东西，还有各种申请，要登录各种系统，配置文件（Provisioning Profile） XCode 会代你生成，但是有些又要你自己申请</p>\n<ol>\n<li><p>Certificates xCode 会帮你生成，所以不用操心</p>\n</li>\n<li><p>Identifiers 需要自己申请，申请后，要等一段时间才能生效[3] ，并且注意和 iTunes connect 上的 bunddle id 要对应上</p>\n</li>\n<li><p>Provisioning Profiles 要自己生成</p>\n</li>\n</ol>\n<p>第三、给开发者用的系统挺烂的：访问慢，提示在维护；在后台申请了一个 identities id，XCode 操作老是不成功，原来是这个id没有同步，上网一查，不是个案，要等一天左右才能同步</p>\n<p>第四、开发完了打包发布，发现再怎么都不能 achive ，解决办法是，device不要选择模拟器</p>\n<p>第五、发布时，不断的报错：choose a profile to sign with no identities were available，原因就是第三点里描述的，系统延迟！！而且还要延迟一天左右，见 <a href=\"http://stackoverflow.com/questions/10215530/no-identities-were-available-administrator-request\" target=\"_blank\" rel=\"external\">ref</a></p>\n<p>第六、使用 Webview 真的有点慢，在一个循环里面用了正则表达式测试，就把页面拖的卡死，但是我的这个应用又必须是网页的</p>\n<p><strong>附录</strong></p>\n<p>[1] <a href=\"http://docs.phonegap.com/en/edge/guide_platforms_ios_index.md.html\" target=\"_blank\" rel=\"external\">http://docs.phonegap.com/en/edge/guide_platforms_ios_index.md.html</a></p>\n<p>[2] <a href=\"http://stackoverflow.com/questions/12825724/applications-must-be-ready-for-upload-on-itunes-connect-before-they-can-be-valid\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/12825724/applications-must-be-ready-for-upload-on-itunes-connect-before-they-can-be-valid</a></p>\n<p>[3] <a href=\"http://anthonytietjen.blogspot.jp/2012/08/overcoming-trouble-validating-your.html\" target=\"_blank\" rel=\"external\">http://anthonytietjen.blogspot.jp/2012/08/overcoming-trouble-validating-your.html</a></p>\n","source":"_posts/2014-07-12-ios-dev-first-impression.md","raw":"---\nlayout: default\ntags : \n-cordova\n-ios\ncomments : true\ntitle : iOS 开发的第一印象\n---\n   \n\n第一、贵 ，$99 刀换成人民币要 699 圆\n\n第二、申请流程要填一大堆东西，还有各种申请，要登录各种系统，配置文件（Provisioning Profile） XCode 会代你生成，但是有些又要你自己申请\n\n1. Certificates xCode 会帮你生成，所以不用操心\n\n2. Identifiers 需要自己申请，申请后，要等一段时间才能生效[3] ，并且注意和 iTunes connect 上的 bunddle id 要对应上\n\n3. Provisioning Profiles 要自己生成\n\n第三、给开发者用的系统挺烂的：访问慢，提示在维护；在后台申请了一个 identities id，XCode 操作老是不成功，原来是这个id没有同步，上网一查，不是个案，要等一天左右才能同步\n\n第四、开发完了打包发布，发现再怎么都不能 achive ，解决办法是，device不要选择模拟器\n\n第五、发布时，不断的报错：choose a profile to sign with no identities were available，原因就是第三点里描述的，系统延迟！！而且还要延迟一天左右，见 [ref](http://stackoverflow.com/questions/10215530/no-identities-were-available-administrator-request)\n\n第六、使用 Webview 真的有点慢，在一个循环里面用了正则表达式测试，就把页面拖的卡死，但是我的这个应用又必须是网页的\n\n**附录**\n\n[1] http://docs.phonegap.com/en/edge/guide_platforms_ios_index.md.html\n\n[2] http://stackoverflow.com/questions/12825724/applications-must-be-ready-for-upload-on-itunes-connect-before-they-can-be-valid\n\n[3] http://anthonytietjen.blogspot.jp/2012/08/overcoming-trouble-validating-your.html\n","slug":"ios-dev-first-impression","date":1405094400000,"updated":1405769151000,"excerpt":"","_id":"uk6zdp09u2cabxwa","title":"","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"layout":"default","tags":["ws7487053zns8985"],"comments":true,"title":"学习 clojure 2 ： 《Clojure程序设计》 Clojure 简介","content":"<blockquote>Clojure 是一种基于 Java 虚拟机 （Java Virtual Machine）的动态编程语言，支持函数式编程，简化并发编程，能调用 Java 程序</blockquote>\n\n<p>什么函数式编程？程序的功能单位是无副作用的函数，输入确定，输出就确定，就像数学上的函数一样。</p>\n<p>相对传统的面向对象方式——复杂的对象关系图，基于状态变量，函数式编程提供了另外一种解决问题的思路。</p>\n<h3 id=\"示例：使用_use_和_require_引入非核心库\">示例：使用 <code>use</code> 和 <code>require</code> 引入非核心库</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">; CIDER <span class=\"number\">0.7</span><span class=\"number\">.0</span>alpha (<span class=\"keyword\">package</span>: <span class=\"number\">20140711.835</span>) (Java <span class=\"number\">1.7</span><span class=\"number\">.0</span>_55, Clojure <span class=\"number\">1.5</span><span class=\"number\">.1</span>, nREPL <span class=\"number\">0.2</span><span class=\"number\">.3</span>, cider-nrepl <span class=\"number\">0.7</span><span class=\"number\">.0</span>-snapshot)</div><div class=\"line\">user&gt; (<span class=\"keyword\">use</span> '[clojure.java.io :only (<span class=\"keyword\">file</span>)])</div><div class=\"line\">nil</div><div class=\"line\">user&gt; (<span class=\"keyword\">file</span> <span class=\"string\">\"README.md\"</span>)</div><div class=\"line\">#&lt;<span class=\"keyword\">File</span> README.md&gt;</div><div class=\"line\">user&gt; (require '[clojure.java.io :as io])</div><div class=\"line\">nil</div><div class=\"line\">user&gt; (io/<span class=\"keyword\">file</span> <span class=\"string\">\"README.md\"</span>)</div><div class=\"line\">#&lt;<span class=\"keyword\">File</span> README.md&gt;</div><div class=\"line\">user&gt; ;; user&gt; 标明了当前所在的 Clojure 名字空间</div></pre></td></tr></table></figure>\n\n<h3 id=\"示例：短小简洁的函数式风格代码\">示例：短小简洁的函数式风格代码</h3>\n<p>一个判断是否是空字符串的函数</p>\n<p><strong>用Java 来写：</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StringUtils</span> {</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> isBlank(String <span class=\"keyword\">str</span>){</div><div class=\"line\">    <span class=\"keyword\">int</span> strLen;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">str</span> == <span class=\"keyword\">null</span> || (strLen = <span class=\"keyword\">str</span>.length()) == <span class=\"number\">0</span>){</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; strLen;i++){</div><div class=\"line\">      <span class=\"keyword\">if</span>((Character.isWhiespace(<span class=\"keyword\">str</span>.charAt(i)) == <span class=\"keyword\">false</span>)){</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">      }</div><div class=\"line\">    }</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">  }</div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n<p><strong>用Clojure 来写：</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"list\">(<span class=\"title\"><span class=\"built_in\">defn</span></span> blank? <span class=\"collection\">[str]</span></span></div><div class=\"line\">  <span class=\"list\">(<span class=\"title\">every?</span> #<span class=\"list\">(<span class=\"title\">Character/isWhitespace</span> %)</span> str)</span>)</div></pre></td></tr></table></figure>\n\n<p>短小多了吧！</p>\n<p>值得的注意的是，Clojure版本的代码，噪音非常低，而Java的看起来很啰嗦，使用了更多的语法关键词，如 <code>public</code> , <code>class</code> , <code>boolean</code> 等</p>\n<p>与 Java 等其它 C 系的语言不同，Clojure 中 <code>?</code> 也是可以作为函数名字的，Lisp系的语法关键词要少，因此显得简单优雅，这种简单优雅，是因为 Lisp 语言的构成单位括号表达式所带来的，括号表达式对与很多人来说显得很怪异，不过习惯了，就会喜欢上括号表示的，特别是Emacs对括号表达式的支持非常好，有一个 <code>par-mode</code> 可以对括号表达式，进行非常快速高效的编辑变换。</p>\n<p>上面 Clojure 代码中的的 every? 是接受两个参数，一个函数 <code>f</code> <code>#(Character/isWhitespace %)</code> 和一个 <code>c</code> - <code>collection</code> 做为参数，注意，以函数为参数是函数式语言的特性，函数是可以参数传递的。对于<code>collection</code>中的元素，本例中即是<code>str</code> ，<code>f</code> 作用于 <code>c</code> 的每一个元素，都返回为真的话，那么 <code>every?</code> 也返回为真。</p>\n<h3 id=\"示例：defrecord\">示例：<code>defrecord</code></h3>\n<h4 id=\"创建_records\">创建 <code>records</code></h4>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">user&gt; (defrecord Person [<span class=\"keyword\">first</span>-<span class=\"property\">name</span> <span class=\"keyword\">last</span>-<span class=\"property\">name</span>])</div><div class=\"line\">user.Person</div><div class=\"line\">user&gt; (def foo (-&gt;Person <span class=\"string\">\"Jinwei\"</span> <span class=\"string\">\"Tang\"</span>))</div><div class=\"line\"><span class=\"comment\">#'user/foo</span></div><div class=\"line\">user&gt; foo</div><div class=\"line\"><span class=\"comment\">#user.Person{:first-name \"Jinwei\", :last-name \"Tang\"}</span></div><div class=\"line\">user&gt; (:<span class=\"keyword\">first</span>-<span class=\"property\">name</span> foo) ;; 访问</div><div class=\"line\"><span class=\"string\">\"Jinwei\"</span></div><div class=\"line\">user&gt; (:<span class=\"keyword\">last</span>-<span class=\"property\">name</span> foo)</div><div class=\"line\"><span class=\"string\">\"Tang\"</span></div></pre></td></tr></table></figure>\n\n<p>records 不可改变，records are immutable，但是可以通过 <code>assoc</code> 或者 <code>merge</code> 从原有的 records 创建新的 records</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">user<span class=\"subst\">&gt;</span> (assoc foo :sex <span class=\"string\">\"male\"</span>)</div><div class=\"line\"><span class=\"variable\">#user.Person</span>{:first<span class=\"attribute\">-name</span> <span class=\"string\">\"Jinwei\"</span>, :last<span class=\"attribute\">-name</span> <span class=\"string\">\"Tang\"</span>, :sex <span class=\"string\">\"male\"</span>}</div><div class=\"line\">user<span class=\"subst\">&gt;</span> foo                       ;; 原来的 foo 不变</div><div class=\"line\"><span class=\"variable\">#user.Person</span>{:first<span class=\"attribute\">-name</span> <span class=\"string\">\"Jinwei\"</span>, :last<span class=\"attribute\">-name</span> <span class=\"string\">\"Tang\"</span>}</div><div class=\"line\">user<span class=\"subst\">&gt;</span> (merge foo {:sex <span class=\"string\">\"male\"</span>}) ;; 也可以使用 merge 创建新的 <span class=\"keyword\">records</span></div><div class=\"line\"><span class=\"variable\">#user.Person</span>{:first<span class=\"attribute\">-name</span> <span class=\"string\">\"Jinwei\"</span>, :last<span class=\"attribute\">-name</span> <span class=\"string\">\"Tang\"</span>, :sex <span class=\"string\">\"male\"</span>}</div></pre></td></tr></table></figure>\n\n<h4 id=\"创建带默认值的_record_[1]\">创建带默认值的 <code>record</code> [1]</h4>\n<p>(defrecord Foo [a b c])</p>\n<p>(defn make-foo<br>  [&amp; {:keys [a b c] :or {a 5 c 7}}]<br>  (Foo. a b c))</p>\n<p>(make-foo :b 6)<br>(make-foo :b 6 :a 8)</p>\n<h4 id=\"什么时候使用_record\">什么时候使用 record</h4>\n<p>很多时候，<code>maps</code> 和 <code>structs</code> 即可完成大部分工作，可为什么还要使用 <code>record</code> 呢？ <a href=\"http://stackoverflow.com/questions/4575170/where-should-i-use-defrecord-in-clojure\" target=\"_blank\" rel=\"external\">这里</a> 有介绍.</p>\n<p><code>records</code> 就是 Java class instances (not Clojure maps)，具有更好的性能。</p>\n<h3 id=\"Clojure_的一些特性\">Clojure 的一些特性</h3>\n<ol>\n<li><p>参数的容器是一个向量 <code>[]</code> ，而不是列表 <code>()</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"list\">(<span class=\"title\"><span class=\"built_in\">defn</span></span> hello-world <span class=\"collection\">[user]</span></span></div><div class=\"line\">  <span class=\"list\">(<span class=\"title\">println</span> <span class=\"list\">(<span class=\"title\"><span class=\"built_in\">format</span></span> <span class=\"string\">\"Hello, %s\"</span> user)</span>)</span>)</div></pre></td></tr></table></figure></li>\n<li>相比Common Lisp简少了括号<br>Common Lisp<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"list\">(<span class=\"title\"><span class=\"built_in\">cond</span></span> <span class=\"list\">(<span class=\"list\">(<span class=\"title\"><span class=\"built_in\">=</span></span> x<span class=\"number\"> 10</span>)</span> <span class=\"string\">\"equal\"</span>)</span></span></div><div class=\"line\">       <span class=\"list\">(<span class=\"list\">(<span class=\"title\">&gt;</span> x<span class=\"number\"> 10</span>)</span> <span class=\"string\">\"more\"</span>)</span>)</div></pre></td></tr></table></figure><br>Clojure<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"list\">(<span class=\"title\"><span class=\"built_in\">cond</span></span> <span class=\"list\">(<span class=\"title\"><span class=\"built_in\">=</span></span> x<span class=\"number\"> 10</span>)</span> <span class=\"string\">\"equal\"</span></span></div><div class=\"line\">      <span class=\"list\">(<span class=\"title\">&gt;</span> x<span class=\"number\"> 10</span>)</span> <span class=\"string\">\"more\"</span>)</div></pre></td></tr></table></figure><h3 id=\"Clojure_中的并发编程示例：dosync\">Clojure 中的并发编程示例：<code>dosync</code></h3>\n</li>\n</ol>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">user&gt; (def accounts (<span class=\"keyword\">ref</span> <span class=\"comment\">#{}))</span></div><div class=\"line\"><span class=\"comment\">#'user/accounts</span></div><div class=\"line\">user&gt; (defrecord Account [<span class=\"property\">id</span> balance])</div><div class=\"line\">user.Account</div><div class=\"line\">user&gt; (dosync </div><div class=\"line\">       (alter accounts conj (Account. <span class=\"string\">\"CLJ\"</span> <span class=\"number\">1000.00</span>)))</div><div class=\"line\"><span class=\"comment\">#{#user.Account{:id \"CLJ\", :balance 1000.0}}</span></div></pre></td></tr></table></figure>\n\n<p><code>ref</code> 创建了一个引用，<code>dosync</code> 开启了一个事务，事务能不用Java的锁定机制来更新 <strong>可变数据</strong> 。事务使用了 (STM, software transactional memory) 来支持并发。</p>\n<p><strong>什么是 STM 呢？</strong></p>\n<blockquote><br>Software Transactional Memory (STM) is a concurrency control technique<br>analogous to database transactions for controlling access to shared<br>memory in concurrent computing. It is an alternative to lock based synchronization.<br></blockquote>\n\n<p>STM 通过过 <code>ref</code> and <code>dosync</code> 来构建。如上面的例子所示。</p>\n<p>上面的示例，可能不是特别好，可以看参考 [2] 的银行转账的示例 </p>\n<h3 id=\"直接访问_Java_API\">直接访问 Java API</h3>\n<h3 id=\"访问_JavaAPI\">访问 JavaAPI</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">user&gt; System</div><div class=\"line\">java.lang.System</div><div class=\"line\">user&gt; (System/getProperties)</div><div class=\"line\">{<span class=\"string\">\"java.runtime.name\"</span> <span class=\"string\">\"Java(TM) SE Runtime Environment\"</span>, <span class=\"string\">\"sun...</span></div><div class=\"line\">...many more...</div></pre></td></tr></table></figure>\n\n<h3 id=\"Clojure_为访问_JavaAPI_提供了语法糖\">Clojure 为访问 JavaAPI 提供了语法糖</h3>\n<p>在 Java 中的方式：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"hello\"</span><span class=\"preprocessor\">.getClass</span>()<span class=\"preprocessor\">.getProtectionDomain</span>()</div></pre></td></tr></table></figure>\n\n<p>Clojure 语法糖访问：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">user&gt; (.. <span class=\"string\">\"hello\"</span> getClass getProtectionDomain)</div><div class=\"line\"></div><div class=\"line\"><span class=\"preprocessor\">#&lt;ProtectionDomain ProtectionDomain  null</span></div><div class=\"line\"> null</div><div class=\"line\"> &lt;no principals&gt;</div><div class=\"line\"> java<span class=\"preprocessor\">.security</span><span class=\"preprocessor\">.Permissions</span><span class=\"localvars\">@7</span>e8027cd (</div><div class=\"line\"> (<span class=\"string\">\"java.security.AllPermission\"</span> <span class=\"string\">\"&lt;all permissions&gt;\"</span> <span class=\"string\">\"&lt;all actions&gt;\"</span>)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n\n<h3 id=\"Clojure_实现_Java_接口\">Clojure 实现 Java 接口</h3>\n<p>Clojure 提供了简单的函数用于实现 Java 接口，以及从 Java 基类派生。Clojure 的所有函数都实现了 Callable 和 Runnable 接口，下面使用匿名函数创建 Java 线程：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">user&gt; (.run (new <span class=\"keyword\">Thread</span> (fn [] (println <span class=\"string\">\"Hello\"</span> (<span class=\"keyword\">Thread</span>/currentThread)))))</div><div class=\"line\">Hello #&lt;<span class=\"keyword\">Thread</span> <span class=\"keyword\">Thread</span>[nREPL-worker-<span class=\"number\">15</span>,<span class=\"number\">5</span>,main]&gt;</div><div class=\"line\">nil</div></pre></td></tr></table></figure>\n\n\n<h3 id=\"REF\">REF</h3>\n<p>[1] <a href=\"http://stackoverflow.com/questions/5634188/how-to-set-default-values-for-fields-in-records-in-clojure\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/5634188/how-to-set-default-values-for-fields-in-records-in-clojure</a></p>\n<p>[2] <a href=\"http://sw1nn.com/blog/2012/04/11/clojure-stm-what-why-how/\" target=\"_blank\" rel=\"external\">http://sw1nn.com/blog/2012/04/11/clojure-stm-what-why-how/</a></p>\n","source":"_posts/2014-07-15-learning-clojure-2.md","raw":"---\nlayout: default\ntags : clojure\ncomments : true\ntitle : 学习 clojure 2 ： 《Clojure程序设计》 Clojure 简介\n---\n\n<blockquote>Clojure 是一种基于 Java 虚拟机 （Java Virtual Machine）的动态编程语言，支持函数式编程，简化并发编程，能调用 Java 程序</blockquote>\n\n什么函数式编程？程序的功能单位是无副作用的函数，输入确定，输出就确定，就像数学上的函数一样。\n\n相对传统的面向对象方式——复杂的对象关系图，基于状态变量，函数式编程提供了另外一种解决问题的思路。\n\n### 示例：使用 `use` 和 `require` 引入非核心库\n\n```\n; CIDER 0.7.0alpha (package: 20140711.835) (Java 1.7.0_55, Clojure 1.5.1, nREPL 0.2.3, cider-nrepl 0.7.0-snapshot)\nuser> (use '[clojure.java.io :only (file)])\nnil\nuser> (file \"README.md\")\n#<File README.md>\nuser> (require '[clojure.java.io :as io])\nnil\nuser> (io/file \"README.md\")\n#<File README.md>\nuser> ;; user> 标明了当前所在的 Clojure 名字空间\n```\n\n### 示例：短小简洁的函数式风格代码\n\n一个判断是否是空字符串的函数\n\n**用Java 来写：**\n\n\n```\npublic class StringUtils {\n  public static boolean isBlank(String str){\n    int strLen;\n    if(str == null || (strLen = str.length()) == 0){\n      return true;\n    }\n    for(int i = 0;i < strLen;i++){\n      if((Character.isWhiespace(str.charAt(i)) == false)){\n        return false;\n      }\n    }\n    return true;\n  }\n}\n```\n\n**用Clojure 来写：**\n\n```\n(defn blank? [str]\n  (every? #(Character/isWhitespace %) str))\n```\n\n短小多了吧！\n\n值得的注意的是，Clojure版本的代码，噪音非常低，而Java的看起来很啰嗦，使用了更多的语法关键词，如 `public` , `class` , `boolean` 等\n\n与 Java 等其它 C 系的语言不同，Clojure 中 `?` 也是可以作为函数名字的，Lisp系的语法关键词要少，因此显得简单优雅，这种简单优雅，是因为 Lisp 语言的构成单位括号表达式所带来的，括号表达式对与很多人来说显得很怪异，不过习惯了，就会喜欢上括号表示的，特别是Emacs对括号表达式的支持非常好，有一个 `par-mode ` 可以对括号表达式，进行非常快速高效的编辑变换。\n\n上面 Clojure 代码中的的 every? 是接受两个参数，一个函数 `f` `#(Character/isWhitespace %)` 和一个 `c` - `collection` 做为参数，注意，以函数为参数是函数式语言的特性，函数是可以参数传递的。对于`collection`中的元素，本例中即是`str` ，`f` 作用于 `c` 的每一个元素，都返回为真的话，那么 `every?` 也返回为真。\n\n\n\n### 示例：`defrecord`\n\n#### 创建 `records`\n\n```\nuser> (defrecord Person [first-name last-name])\nuser.Person\nuser> (def foo (->Person \"Jinwei\" \"Tang\"))\n#'user/foo\nuser> foo\n#user.Person{:first-name \"Jinwei\", :last-name \"Tang\"}\nuser> (:first-name foo) ;; 访问\n\"Jinwei\"\nuser> (:last-name foo)\n\"Tang\"\n```\n\nrecords 不可改变，records are immutable，但是可以通过 `assoc` 或者 `merge` 从原有的 records 创建新的 records\n\n```\nuser> (assoc foo :sex \"male\")\n#user.Person{:first-name \"Jinwei\", :last-name \"Tang\", :sex \"male\"}\nuser> foo                       ;; 原来的 foo 不变\n#user.Person{:first-name \"Jinwei\", :last-name \"Tang\"}\nuser> (merge foo {:sex \"male\"}) ;; 也可以使用 merge 创建新的 records\n#user.Person{:first-name \"Jinwei\", :last-name \"Tang\", :sex \"male\"}\n```\n\n#### 创建带默认值的 `record` [1]\n\n(defrecord Foo [a b c])\n\n(defn make-foo\n  [& {:keys [a b c] :or {a 5 c 7}}]\n  (Foo. a b c))\n\n(make-foo :b 6)\n(make-foo :b 6 :a 8)\n\n#### 什么时候使用 record \n\n很多时候，`maps` 和 `structs` 即可完成大部分工作，可为什么还要使用 `record` 呢？ [这里](http://stackoverflow.com/questions/4575170/where-should-i-use-defrecord-in-clojure) 有介绍.\n\n`records` 就是 Java class instances (not Clojure maps)，具有更好的性能。\n\n### Clojure 的一些特性\n\n1. 参数的容器是一个向量 `[]` ，而不是列表 `()`\n\n   ```\n   (defn hello-world [user]\n     (println (format \"Hello, %s\" user)))\n   ```\n2. 相比Common Lisp简少了括号\n   Common Lisp\n   ```\n   (cond ((= x 10) \"equal\")\n          ((> x 10) \"more\"))\n   ```\n   Clojure \n   ```\n   (cond (= x 10) \"equal\"\n         (> x 10) \"more\")\n   ```\n### Clojure 中的并发编程示例：`dosync` \n\n```\nuser> (def accounts (ref #{}))\n#'user/accounts\nuser> (defrecord Account [id balance])\nuser.Account\nuser> (dosync \n       (alter accounts conj (Account. \"CLJ\" 1000.00)))\n#{#user.Account{:id \"CLJ\", :balance 1000.0}}\n```\n\n`ref` 创建了一个引用，`dosync` 开启了一个事务，事务能不用Java的锁定机制来更新 **可变数据** 。事务使用了 (STM, software transactional memory) 来支持并发。\n\n**什么是 STM 呢？**\n\n<blockquote>\nSoftware Transactional Memory (STM) is a concurrency control technique\nanalogous to database transactions for controlling access to shared\nmemory in concurrent computing. It is an alternative to lock based synchronization.\n</blockquote>\n\nSTM 通过过 `ref` and `dosync` 来构建。如上面的例子所示。\n\n上面的示例，可能不是特别好，可以看参考 [2] 的银行转账的示例 \n\n### 直接访问 Java API \n\n### 访问 JavaAPI\n```\nuser> System\njava.lang.System\nuser> (System/getProperties)\n{\"java.runtime.name\" \"Java(TM) SE Runtime Environment\", \"sun...\n...many more...\n```\n\n### Clojure 为访问 JavaAPI 提供了语法糖\n\n在 Java 中的方式：\n```\n\"hello\".getClass().getProtectionDomain()\n```\n\nClojure 语法糖访问：\n\n```\nuser> (.. \"hello\" getClass getProtectionDomain)\n\n#<ProtectionDomain ProtectionDomain  null\n null\n <no principals>\n java.security.Permissions@7e8027cd (\n (\"java.security.AllPermission\" \"<all permissions>\" \"<all actions>\")\n)\n```\n\n### Clojure 实现 Java 接口\n\nClojure 提供了简单的函数用于实现 Java 接口，以及从 Java 基类派生。Clojure 的所有函数都实现了 Callable 和 Runnable 接口，下面使用匿名函数创建 Java 线程：\n\n```\nuser> (.run (new Thread (fn [] (println \"Hello\" (Thread/currentThread)))))\nHello #<Thread Thread[nREPL-worker-15,5,main]>\nnil\n```\n\n\n### REF\n\n[1] http://stackoverflow.com/questions/5634188/how-to-set-default-values-for-fields-in-records-in-clojure\n\n[2] http://sw1nn.com/blog/2012/04/11/clojure-stm-what-why-how/\n","slug":"learning-clojure-2","date":1405353600000,"updated":1405769151000,"excerpt":"","_id":"x17ukmfd45z0t159","categories":[],"photos":[],"link":""},{"layout":"default","tags":["ws7487053zns8985"],"comments":true,"title":"学习 clojure 1：缘起","content":"<p>想学 clojure 是因为看到一篇 blog ，在 pc 上支持 600k 的并发，太疯狂了，比 Node.js<br>的 250k 两倍还多，于是就心痒痒。并且 clojure 是 lisp 的方言，已知对 lisp 很有兴趣，<br>但是好像它被一些人人视为「玩具」——除非你特别牛，用它是找不到工作的。而clojure和<br>Java一样，是基于JVM的语言，所以它可以真的投入使用，比如 Storm 就是 clojure 的应用。</p>\n<ol>\n<li><p>clojure 的高并发能力</p>\n<ul>\n<li>因为它是 lock-free 的 [5]</li>\n</ul>\n</li>\n<li><p>Mac 下安装lein<br>在已经有 Java 环境的情况下，安装非常简单：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew <span class=\"keyword\">install</span> leiningen</div></pre></td></tr></table></figure>\n\n<p>然后执行下面的命令，开启 repl</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lein repl</div></pre></td></tr></table></figure>\n</li>\n<li><p>环境搭建：Emacs+cider [4]</p>\n<ul>\n<li>M-x package-install [RET] cider [RET]</li>\n<li><p>使用 lein 创建一个项目<br>lein new demo</p>\n<p><img src=\"/blog/images/2014-07-14-learning-clure-1/0.png\" alt=\"0.png\"></p>\n<p><img src=\"/blog/images/2014-07-14-learning-clure-1/1.png\" alt=\"1.png\"></p>\n<p><img src=\"/blog/images/2014-07-14-learning-clure-1/2.png\" alt=\"2.png\"></p>\n</li>\n<li><p>用 Emacs 打开 demo/src/demo/core.clj，执行 M-x cider-jack-in （或使用快捷键 C-c M-j ）开启 nREPL server 以及 Emacs client ，这样就可以在 Emacs 中和后台的 server 交互了<br>如果出现如下的报错：ider-jack-in can’t find cider-nrepl</p>\n<p>添加一个文件 ~/.lein/profiles.clj</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">{:user {:plugins <span class=\"string\">[[cider/cider-nrepl \"0.7.0-SNAPSHOT\"]]</span>}}</div></pre></td></tr></table></figure>\n</li>\n<li><p>在编辑器中测试代码：在 demo/src/demo/core.clj 里面</p>\n<ul>\n<li>C-x C-e 移动光标到s-exp括号后面，就是是执行这个表达式</li>\n<li><p>注意在执行 (foo “hello”) 之前，要执行前面的两个表达式</p>\n<p><img src=\"/blog/images/2014-07-14-learning-clure-1/3.png\" alt=\"3.png\"></p>\n</li>\n</ul>\n</li>\n<li><p>在repl中执行代码</p>\n<p><img src=\"/blog/images/2014-07-14-learning-clure-1/4.png\" alt=\"4.png\"></p>\n</li>\n<li><p>使用 lein 在 termial 中执行代码 </p>\n<p><img src=\"/blog/images/2014-07-14-learning-clure-1/5.png\" alt=\"5.png\"></p>\n<p>可以看到，缺少 main 函数，修改下代码</p>\n<p><img src=\"/blog/images/2014-07-14-learning-clure-1/6.png\" alt=\"6.png\"></p>\n<p>也可以指定为其它的函数为入口函数</p>\n<p><img src=\"/blog/images/2014-07-14-learning-clure-1/7.png\" alt=\"7.png\"></p>\n</li>\n<li><p>project.clj 的所有配置项目见 <a href=\"https://github.com/technomancy/leiningen/blob/stable/sample.project.clj\" target=\"_blank\" rel=\"external\">https://github.com/technomancy/leiningen/blob/stable/sample.project.clj</a></p>\n</li>\n<li>Emacs 的快捷键见 <a href=\"https://github.com/clojure-emacs/cider\" target=\"_blank\" rel=\"external\">https://github.com/clojure-emacs/cider</a> cider-mode Keyboard shortcut</li>\n</ul>\n</li>\n<li><p>学习 learning 需要 Java 的经验吗？[1]</p>\n<ul>\n<li>clojure 是lisp的方言，和Java很不相同，所以从语言角度来说，不需要</li>\n<li><p>使用已经存在的Java API，那必须还是要和Java打交道</p>\n<p>You don’t need to write any Java code to use Java APIs from Clojure, but you do need to know enough Java (method signatures, data types etc.) to be able to read the JavaDoc documentation of the APIs and convert this into an appropriate Clojure function call. Often, this is as simple as (.someJavaMethod someJavaObject param1 param2) but sometimes it can be more complex (e.g. when you need to instantiate a subclass of some Java class to pass as a parameter)</p>\n</li>\n<li><p>clojure 是最终会编译为JVM字节码，所以精通Java，应该是有好处的</p>\n</li>\n</ul>\n</li>\n<li><p>在哪里寻找第三方的库？</p>\n<ul>\n<li>clojure-contrib [8] </li>\n<li>leiningen [9]</li>\n</ul>\n</li>\n<li><p>clojure 的中小项目[2]</p>\n<ul>\n<li>cow-blog [7]</li>\n<li>使用 lein 构建一个web应用 guest-book</li>\n</ul>\n</li>\n<li><p>甚至有一个 clojure-android 的项目，可以让你在 android 上使用 clojure [6]</p>\n<p>但是这时一个 hobby project ，性能很成问题</p>\n</li>\n</ol>\n<h3 id=\"Footnotes\">Footnotes</h3>\n<p>[1] <a href=\"http://stackoverflow.com/questions/5721496/learning-java-so-i-can-get-at-clojure\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/5721496/learning-java-so-i-can-get-at-clojure</a></p>\n<p>[2] <a href=\"http://stackoverflow.com/questions/329221/medium-size-clojure-sample-application\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/329221/medium-size-clojure-sample-application</a></p>\n<p>[3] <a href=\"http://dev.clojure.org/display/community/Clojure%2BSuccess%2BStories\" target=\"_blank\" rel=\"external\">http://dev.clojure.org/display/community/Clojure%2BSuccess%2BStories</a></p>\n<p>[4] <a href=\"https://github.com/clojure-emacs/cider\" target=\"_blank\" rel=\"external\">https://github.com/clojure-emacs/cider</a></p>\n<p>[5] <a href=\"http://stackoverflow.com/questions/11031886/is-clojure-lockfree-by-using-lockfree-algorithms\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/11031886/is-clojure-lockfree-by-using-lockfree-algorithms</a></p>\n<p>[6] <a href=\"http://clojure-android.info/\" target=\"_blank\" rel=\"external\">http://clojure-android.info/</a></p>\n<p>[7] <a href=\"https://github.com/briancarper/cow-blog\" target=\"_blank\" rel=\"external\">https://github.com/briancarper/cow-blog</a></p>\n<p>[8] <a href=\"http://github.com/richhickey/clojure-contrib\" target=\"_blank\" rel=\"external\">http://github.com/richhickey/clojure-contrib</a></p>\n<p>[9] <a href=\"http://zef.me/2470/building-clojure-projects-with-leiningen\" target=\"_blank\" rel=\"external\">http://zef.me/2470/building-clojure-projects-with-leiningen</a></p>\n","source":"_posts/2014-07-14-learning-clojure-1.md","raw":"---\nlayout: default\ntags : clojure\ncomments : true\ntitle : 学习 clojure 1：缘起\n---\n\n想学 clojure 是因为看到一篇 blog ，在 pc 上支持 600k 的并发，太疯狂了，比 Node.js\n的 250k 两倍还多，于是就心痒痒。并且 clojure 是 lisp 的方言，已知对 lisp 很有兴趣，\n但是好像它被一些人人视为「玩具」——除非你特别牛，用它是找不到工作的。而clojure和\nJava一样，是基于JVM的语言，所以它可以真的投入使用，比如 Storm 就是 clojure 的应用。\n\n1. clojure 的高并发能力\n   - 因为它是 lock-free 的 [5]\n\n2. Mac 下安装lein \n   在已经有 Java 环境的情况下，安装非常简单：\n   \n   ```\n   brew install leiningen\n   ```\n   \n   然后执行下面的命令，开启 repl\n   \n   ```\n   lein repl\n   ```\n\n3. 环境搭建：Emacs+cider [4]\n   - M-x package-install [RET] cider [RET]\n   - 使用 lein 创建一个项目\n     lein new demo\n\n     ![0.png](/blog/images/2014-07-14-learning-clure-1/0.png)\n\n     ![1.png](/blog/images/2014-07-14-learning-clure-1/1.png)\n\n     ![2.png](/blog/images/2014-07-14-learning-clure-1/2.png)\n\n   - 用 Emacs 打开 demo/src/demo/core.clj，执行 M-x cider-jack-in （或使用快捷键 C-c M-j ）开启 nREPL server 以及 Emacs client ，这样就可以在 Emacs 中和后台的 server 交互了\n     如果出现如下的报错：ider-jack-in can't find cider-nrepl\n      \n     添加一个文件 ~/.lein/profiles.clj\n\n     ```\n       {:user {:plugins [[cider/cider-nrepl \"0.7.0-SNAPSHOT\"]]}}\n     ```\n\n   - 在编辑器中测试代码：在 demo/src/demo/core.clj 里面\n     - C-x C-e 移动光标到s-exp括号后面，就是是执行这个表达式\n     - 注意在执行 (foo \"hello\") 之前，要执行前面的两个表达式\n\n       ![3.png](/blog/images/2014-07-14-learning-clure-1/3.png)\n\n   - 在repl中执行代码\n\n     ![4.png](/blog/images/2014-07-14-learning-clure-1/4.png)\n\n   - 使用 lein 在 termial 中执行代码 \n\n     ![5.png](/blog/images/2014-07-14-learning-clure-1/5.png)\n    \n     可以看到，缺少 main 函数，修改下代码\n\n     ![6.png](/blog/images/2014-07-14-learning-clure-1/6.png)\n      \n     也可以指定为其它的函数为入口函数\n\n     ![7.png](/blog/images/2014-07-14-learning-clure-1/7.png)\n\n   - project.clj 的所有配置项目见 https://github.com/technomancy/leiningen/blob/stable/sample.project.clj\n   - Emacs 的快捷键见 https://github.com/clojure-emacs/cider cider-mode Keyboard shortcut\n\n4. 学习 learning 需要 Java 的经验吗？[1]\n   - clojure 是lisp的方言，和Java很不相同，所以从语言角度来说，不需要\n   - 使用已经存在的Java API，那必须还是要和Java打交道\n\n     You don't need to write any Java code to use Java APIs from Clojure, but you do need to know enough Java (method signatures, data types etc.) to be able to read the JavaDoc documentation of the APIs and convert this into an appropriate Clojure function call. Often, this is as simple as (.someJavaMethod someJavaObject param1 param2) but sometimes it can be more complex (e.g. when you need to instantiate a subclass of some Java class to pass as a parameter)\n\n   - clojure 是最终会编译为JVM字节码，所以精通Java，应该是有好处的\n\n5. 在哪里寻找第三方的库？\n   - clojure-contrib [8] \n   - leiningen [9]\n\n6. clojure 的中小项目[2]\n   - cow-blog [7]\n   - 使用 lein 构建一个web应用 guest-book\n\n7. 甚至有一个 clojure-android 的项目，可以让你在 android 上使用 clojure [6]\n   \n   但是这时一个 hobby project ，性能很成问题\n\n### Footnotes\n\n[1] http://stackoverflow.com/questions/5721496/learning-java-so-i-can-get-at-clojure\n\n[2] http://stackoverflow.com/questions/329221/medium-size-clojure-sample-application\n\n[3] http://dev.clojure.org/display/community/Clojure%2BSuccess%2BStories\n\n[4] https://github.com/clojure-emacs/cider\n    \n[5] http://stackoverflow.com/questions/11031886/is-clojure-lockfree-by-using-lockfree-algorithms\n\n[6] http://clojure-android.info/\n\n[7] https://github.com/briancarper/cow-blog\n\n[8] http://github.com/richhickey/clojure-contrib\n\n[9] http://zef.me/2470/building-clojure-projects-with-leiningen\n\n","slug":"learning-clojure-1","date":1405267200000,"updated":1405769151000,"excerpt":"","_id":"00pqfjqqifac0l51","categories":[],"photos":[],"link":""},{"layout":"default","tags":["ws7487053zns8985"],"comments":true,"title":"学习 clojure 3 ：《Clojure程序设计》 Clojure 编程入门 - 在 repl 中测试代码","content":"<h3 id=\"继续探索_repl\">继续探索 repl</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">; CIDER 0.7.0alpha (package: 20140711.835) (Java 1.7.0_55, Clojure 1.5.1, nREPL 0.2.3, cider-nrepl 0.7.0-snapshot)</span></div><div class=\"line\">user&gt; (defn hello [name] </div><div class=\"line\">        (str <span class=\"string\">\"Hello, \"</span> name)) <span class=\"comment\">;; str 将列表转为字符串</span></div><div class=\"line\"><span class=\"preprocessor\">#'user/hello</span></div><div class=\"line\">user&gt; (hello <span class=\"string\">\"tom\"</span>)</div><div class=\"line\"><span class=\"string\">\"Hello, tom\"</span></div><div class=\"line\">user&gt; *<span class=\"number\">1</span> <span class=\"comment\">; *1 *2 *3 分别存储了 repl 的最近3次求职</span></div><div class=\"line\"><span class=\"string\">\"Hello, tom\"</span></div><div class=\"line\">user&gt; (/ <span class=\"number\">1</span> <span class=\"number\">0</span>) <span class=\"comment\">;; 0 是不能作为分母的，会报错</span></div><div class=\"line\">ArithmeticException Divide by zero  clojure<span class=\"preprocessor\">.lang</span><span class=\"preprocessor\">.Numbers</span><span class=\"preprocessor\">.divide</span> (Numbers<span class=\"preprocessor\">.java</span>:<span class=\"number\">156</span>)</div><div class=\"line\">user&gt; <span class=\"comment\">;; *e 存储了最后一个异常的的信息</span></div><div class=\"line\">user&gt; *e</div><div class=\"line\"><span class=\"preprocessor\">#&lt;ArithmeticException java.lang.ArithmeticException: Divide by zero&gt;</span></div><div class=\"line\">user&gt; (pst) <span class=\"comment\">;; print stacktrace 得到堆栈信息 </span></div><div class=\"line\">CompilerException java<span class=\"preprocessor\">.lang</span><span class=\"preprocessor\">.RuntimeException</span>: Unable to resolve symbol: pst <span class=\"keyword\">in</span> this context, compiling:(/private/var/folders/nt/gkh1mbhn4pncwb79gmrfr9740000gn/T/form-init5253497584462403679<span class=\"preprocessor\">.clj</span>:<span class=\"number\">1</span>:<span class=\"number\">1</span>) </div><div class=\"line\"></div><div class=\"line\">user&gt; <span class=\"comment\">;; 额，好像 pst 这个函数不存在了：1.3.0 之后，pst 放到 clojure.repl/pst 了，需要引入 (use 'clojure.repl)，见后面</span></div><div class=\"line\"></div><div class=\"line\">user&gt; (load-file <span class=\"string\">\"tmp.clj\"</span>) <span class=\"comment\">;; 加载 tmp.clj ，里面的定义会导入 到 user 命名空间下来 : (def a 1)</span></div><div class=\"line\"><span class=\"preprocessor\">#'user/a</span></div><div class=\"line\">user&gt; a <span class=\"comment\">;;</span></div><div class=\"line\"><span class=\"number\">1</span></div></pre></td></tr></table></figure>\n\n<h3 id=\"查找文档\">查找文档</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">user&gt; (use '[clojure.repl :only (doc)]) ;; 从 coljure.repl 中导入 doc </div><div class=\"line\"></div><div class=\"line\">nil</div><div class=\"line\">user&gt; (doc str)                         ;; 使用 doc 来查找函数的文档</div><div class=\"line\"><span class=\"comment\">-------------------------</span></div><div class=\"line\">clojure.core/str</div><div class=\"line\">([] [x] [x & ys])</div><div class=\"line\">  With no args, returns <span class=\"keyword\">the</span> empty <span class=\"type\">string</span>. With one arg x, returns</div><div class=\"line\">  x.toString().  (str nil) returns <span class=\"keyword\">the</span> empty <span class=\"type\">string</span>. With more than</div><div class=\"line\">  one arg, returns <span class=\"keyword\">the</span> concatenation <span class=\"keyword\">of</span> <span class=\"keyword\">the</span> str values <span class=\"keyword\">of</span> <span class=\"keyword\">the</span> args.</div><div class=\"line\">nil</div><div class=\"line\"></div><div class=\"line\">user&gt; (use '[clojure.repl :only (find-doc)])</div><div class=\"line\">nil</div><div class=\"line\">user&gt; (find-doc <span class=\"string\">\"reduce\"</span>) ;; 在导入一个 find-doc 函数，支持正则或者字符串查找</div><div class=\"line\"><span class=\"comment\">-------------------------</span></div><div class=\"line\">clojure.core/areduce</div><div class=\"line\">([a idx ret init expr])</div><div class=\"line\">Macro</div><div class=\"line\">  Reduces an expression across an array a, using an index named idx,</div><div class=\"line\">  <span class=\"keyword\">and</span> <span class=\"constant\">return</span> value named ret, initialized <span class=\"keyword\">to</span> init, setting ret <span class=\"keyword\">to</span> <span class=\"keyword\">the</span> </div><div class=\"line\">  evaluation <span class=\"keyword\">of</span> expr <span class=\"keyword\">at</span> each step, <span class=\"keyword\">returning</span> ret.</div><div class=\"line\"><span class=\"comment\">-------------------------</span></div><div class=\"line\">clojure.core/reduce</div><div class=\"line\">([f coll] [f val coll])</div><div class=\"line\">  f should be a function <span class=\"keyword\">of</span> <span class=\"number\">2</span> arguments. If val <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> supplied,</div><div class=\"line\">  returns <span class=\"keyword\">the</span> <span class=\"constant\">result</span> <span class=\"keyword\">of</span> applying f <span class=\"keyword\">to</span> <span class=\"keyword\">the</span> <span class=\"keyword\">first</span> <span class=\"number\">2</span> items <span class=\"keyword\">in</span> coll, <span class=\"keyword\">then</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查看函数源码\">查看函数源码</h3>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">user&gt; (<span class=\"keyword\">use</span> '[clojure.repl :only (source)])</div><div class=\"line\">nil</div><div class=\"line\">user&gt; (source identity)</div><div class=\"line\">(defn identity</div><div class=\"line\">  <span class=\"string\">\"Returns its argument.\"</span></div><div class=\"line\">  {:added <span class=\"string\">\"1.0\"</span></div><div class=\"line\">   :<span class=\"keyword\">static</span> <span class=\"keyword\">true</span>}</div><div class=\"line\">  [x] x)</div><div class=\"line\">nil</div></pre></td></tr></table></figure>\n\n<h3 id=\"修改用户配置文件，引入常用的工具函数\">修改用户配置文件，引入常用的工具函数</h3>\n<p>像上面的 <code>doc</code> 、<code>find</code> 等函数需要 <code>use</code> 才能使用，为方便起见，可以在repl启动时，就载入，只需在 <code>~/.lein/user.clj</code>  添加</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">;; 1.3.0 之后，将 doc source 等放到了 clojure.repl 中，可以在启动 repl时导入</span></div><div class=\"line\"><span class=\"list\">(<span class=\"title\"><span class=\"built_in\">if</span></span> <span class=\"list\">(<span class=\"title\">&gt;=</span> <span class=\"list\">(<span class=\"title\">.compareTo</span> <span class=\"list\">(<span class=\"title\">clojure-version</span>)</span> <span class=\"string\">\"1.3.0\"</span>)</span><span class=\"number\"> 0</span>)</span></span></div><div class=\"line\">  <span class=\"list\">(<span class=\"title\"><span class=\"built_in\">do</span></span> <span class=\"list\">(<span class=\"title\"><span class=\"built_in\">use</span></span> 'clojure.repl)</span></span></div><div class=\"line\">      <span class=\"list\">(<span class=\"title\"><span class=\"built_in\">use</span></span> 'clojure.java.javadoc)</span>))</div></pre></td></tr></table></figure>\n\n<p>这样，每次启动 repl 都能直接使用这些函数了</p>\n","source":"_posts/2014-07-16-learning-clojure-3.md","raw":"---\nlayout: default\ntags : clojure\ncomments : true\ntitle : 学习 clojure 3 ：《Clojure程序设计》 Clojure 编程入门 - 在 repl 中测试代码\n---\n\n### 继续探索 repl\n\n```\n; CIDER 0.7.0alpha (package: 20140711.835) (Java 1.7.0_55, Clojure 1.5.1, nREPL 0.2.3, cider-nrepl 0.7.0-snapshot)\nuser> (defn hello [name] \n        (str \"Hello, \" name)) ;; str 将列表转为字符串\n#'user/hello\nuser> (hello \"tom\")\n\"Hello, tom\"\nuser> *1 ; *1 *2 *3 分别存储了 repl 的最近3次求职\n\"Hello, tom\"\nuser> (/ 1 0) ;; 0 是不能作为分母的，会报错\nArithmeticException Divide by zero  clojure.lang.Numbers.divide (Numbers.java:156)\nuser> ;; *e 存储了最后一个异常的的信息\nuser> *e\n#<ArithmeticException java.lang.ArithmeticException: Divide by zero>\nuser> (pst) ;; print stacktrace 得到堆栈信息 \nCompilerException java.lang.RuntimeException: Unable to resolve symbol: pst in this context, compiling:(/private/var/folders/nt/gkh1mbhn4pncwb79gmrfr9740000gn/T/form-init5253497584462403679.clj:1:1) \n\nuser> ;; 额，好像 pst 这个函数不存在了：1.3.0 之后，pst 放到 clojure.repl/pst 了，需要引入 (use 'clojure.repl)，见后面\n\nuser> (load-file \"tmp.clj\") ;; 加载 tmp.clj ，里面的定义会导入 到 user 命名空间下来 : (def a 1)\n#'user/a\nuser> a ;;\n1\n```\n\n### 查找文档\n\n```\nuser> (use '[clojure.repl :only (doc)]) ;; 从 coljure.repl 中导入 doc \n\nnil\nuser> (doc str)                         ;; 使用 doc 来查找函数的文档\n-------------------------\nclojure.core/str\n([] [x] [x & ys])\n  With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.\nnil\n\nuser> (use '[clojure.repl :only (find-doc)])\nnil\nuser> (find-doc \"reduce\") ;; 在导入一个 find-doc 函数，支持正则或者字符串查找\n-------------------------\nclojure.core/areduce\n([a idx ret init expr])\nMacro\n  Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the \n  evaluation of expr at each step, returning ret.\n-------------------------\nclojure.core/reduce\n([f coll] [f val coll])\n  f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n...\n```\n\n\n\n### 查看函数源码\n\n```\nuser> (use '[clojure.repl :only (source)])\nnil\nuser> (source identity)\n(defn identity\n  \"Returns its argument.\"\n  {:added \"1.0\"\n   :static true}\n  [x] x)\nnil\n```\n\n### 修改用户配置文件，引入常用的工具函数\n\n像上面的 `doc` 、`find` 等函数需要 `use` 才能使用，为方便起见，可以在repl启动时，就载入，只需在 `~/.lein/user.clj`  添加\n\n```\n;; 1.3.0 之后，将 doc source 等放到了 clojure.repl 中，可以在启动 repl时导入\n(if (>= (.compareTo (clojure-version) \"1.3.0\") 0)\n  (do (use 'clojure.repl)\n      (use 'clojure.java.javadoc)))\n```\n\n这样，每次启动 repl 都能直接使用这些函数了\n","slug":"learning-clojure-3","date":1405440000000,"updated":1405769151000,"excerpt":"","_id":"nk9r7pbe52zhxbo3","categories":[],"photos":[],"link":""},{"layout":"default","tags":["ws7487053zns8985"],"comments":true,"title":"Clojure 的发展情况","content":"<blockquote>Clojure 是 Lisp 对 JVM 的抱大腿行为</blockquote>\n\n<p>我猜，由于 Clojure 是 Lisp 方言的原因，在国内，Clojure 的使用真的很少很少，<a href=\"https://groups.google.com/forum/#!forum/cn-clojure\" target=\"_blank\" rel=\"external\">cn-clojure</a> 这个国内的 Clojure 用户组的人气也不高。</p>\n<p>于是，我提了一个问题， <a href=\"https://groups.google.com/forum/#!topic/cn-clojure/V03N0qJQ6_w\" target=\"_blank\" rel=\"external\">Clojure的发展情况如何？</a> ，也做了些查询，汇总下信息</p>\n<h3 id=\"国内使用_Clojure_的公司\">国内使用 Clojure 的公司</h3>\n<ol>\n<li>一个比较大的公司是 <a href=\"https://www.avoscloud.com/\" target=\"_blank\" rel=\"external\">AVOS</a>  ，是前 Youtube 创始人的公司，后端基本都是用 Clojure 来写的。</li>\n<li><a href=\"https://www.zrcaifu.com/\" target=\"_blank\" rel=\"external\">中瑞财富</a>  p2p 互联网金融项目</li>\n<li><a href=\"http://rd.kuaijianli.com/u102510\" target=\"_blank\" rel=\"external\">百思</a> 一个社交网站数据分析的公司</li>\n<li>深圳风林火山 - 一家游戏公司：深圳风林火山，游戏产品黄金岛牌类游戏，目前使用 Clojure 作为主力服 务器开发语言。我们目前使用的 Clojure 技术都在刀锋上，非常前卫。使用 ClojureScript 和 Clojure 结合的开发框架目前正在产品化中，其中使用到的 ClojureScript 和 One 的新特性由 Clojure Core 团队开发，使用 Datomic 数据库。 我们的项目在第一次 ClojureConj 大会上作为 Aaron Bedra 介绍的 Clojure in the Field (Clojure 用于实战)的重要项目介绍。</li>\n<li><a href=\"http://zbdang.com/\" target=\"_blank\" rel=\"external\">直播贴</a> 一家八卦网站，也 <a href=\"https://groups.google.com/forum/#!searchin/cn-clojure/%E6%8B%9B%E8%81%98/cn-clojure/c7GU9Q9X6ck/ADNvCr-X_pMJ\" target=\"_blank\" rel=\"external\">正在招人</a></li>\n</ol>\n<h3 id=\"金融系统\">金融系统</h3>\n<p>Clojure 的很多代码都是银行的业务作为例子，比如下面这个，所以以为会有比较多的金融行业应用，但是实际上没看到。。。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"list\">(<span class=\"title\">def</span> account<span class=\"number\">1</span> <span class=\"list\">(<span class=\"title\">ref</span> <span class=\"number\">100</span>)</span>)</span></div><div class=\"line\"><span class=\"list\">(<span class=\"title\">def</span> account<span class=\"number\">2</span> <span class=\"list\">(<span class=\"title\">ref</span> <span class=\"number\">0</span>)</span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">;; ; to read the current value of a ref, use (deref refname):</span></div><div class=\"line\"><span class=\"comment\">;; ;=&gt; (deref account1)</span></div><div class=\"line\"><span class=\"comment\">;; 100</span></div><div class=\"line\"><span class=\"comment\">;; ;=&gt; @account1 ; @refname is equivalent to (deref refname)</span></div><div class=\"line\"><span class=\"comment\">;; 100</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"list\">(<span class=\"title\">defn</span> transfer [amount from to]</span></div><div class=\"line\">  <span class=\"list\">(<span class=\"title\">dosync</span></span></div><div class=\"line\">   <span class=\"list\">(<span class=\"title\">alter</span> from - amount)</span>   <span class=\"comment\">; alter from =&gt; (- @from amount)</span></div><div class=\"line\">   <span class=\"list\">(<span class=\"title\">alter</span> to   + amount)</span>)) <span class=\"comment\">; alter to   =&gt; (+ @to amount)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">;; ;=&gt; @account1</span></div><div class=\"line\"><span class=\"comment\">;; 100</span></div><div class=\"line\"><span class=\"comment\">;; ;=&gt; @account2</span></div><div class=\"line\"><span class=\"comment\">;; 0</span></div><div class=\"line\"><span class=\"comment\">;; ;=&gt; (transfer 100 account1 account2)</span></div><div class=\"line\"><span class=\"comment\">;; 100</span></div><div class=\"line\"><span class=\"comment\">;; ;=&gt; @account1</span></div><div class=\"line\"><span class=\"comment\">;; 0</span></div><div class=\"line\"><span class=\"comment\">;; ;=&gt; @account2</span></div><div class=\"line\"><span class=\"comment\">;; 100</span></div></pre></td></tr></table></figure><br>这个例子中，应用了 Clojure 的 STM 机制保证转账操作能都完毕，参见 [1]<br><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"list\">(<span class=\"title\"><span class=\"built_in\">alter</span></span> from - amount)</span></div><div class=\"line\"><span class=\"list\">(<span class=\"title\"><span class=\"built_in\">alter</span></span> to   + amount)</span></div></pre></td></tr></table></figure>\n\n<p>搜索了下国外的情况，其实应用也不多，有 citi （花旗银行）、 UBS （瑞士联合银行） ，但是好像实际用的也不多。有一段评价[2]：</p>\n<blockquote><br>Based on my own experience and conversations with others who work in the City, there’s a small but increasing move towards functional languages. I have to say that by far the most common I’ve heard of are Scala or F#, with ML and Clojure far behind.<br></blockquote>\n\n<p>也就是说金融行业虽然也在往函数式语言靠，但是F# 和 Scala 的使用更广泛，远高于 ML 和 Clojure 这样的语言。</p>\n<h3 id=\"Clojure_语言本身的发展情况\">Clojure 语言本身的发展情况</h3>\n<ol>\n<li>特性变化还是挺多的，版本更新时，有 core.* 下面的更新</li>\n<li>库变更也比较频繁：我目前借的两本书，《Clojure 编程》 和 《Clojure 程序设计》，内容都稍微有点过时，导致有些例子不能运行</li>\n<li>语法发展也可以看下 <a href=\"https://groups.google.com/forum/#!topic/cn-clojure/V03N0qJQ6_w\" target=\"_blank\" rel=\"external\">这个帖子</a> ，dennis zhuang 的回复，他本人就是在 AVOS 工作</li>\n</ol>\n<h4 id=\"REFS\">REFS</h4>\n<p>[1] <a href=\"http://chaifeng.com/clojure-stm-what-why-how/\" target=\"_blank\" rel=\"external\">http://chaifeng.com/clojure-stm-what-why-how/</a></p>\n<p>[2] <a href=\"http://mdavey.wordpress.com/2013/05/24/clojure-in-finance/\" target=\"_blank\" rel=\"external\">http://mdavey.wordpress.com/2013/05/24/clojure-in-finance/</a> 的评论</p>\n","source":"_posts/2014-07-19-learning-clojure-company.md","raw":"---\nlayout: default\ntags : clojure\ncomments : true\ntitle : Clojure 的发展情况\n---\n\n\n<blockquote>Clojure 是 Lisp 对 JVM 的抱大腿行为</blockquote>\n\n我猜，由于 Clojure 是 Lisp 方言的原因，在国内，Clojure 的使用真的很少很少，[cn-clojure](https://groups.google.com/forum/#!forum/cn-clojure) 这个国内的 Clojure 用户组的人气也不高。\n\n于是，我提了一个问题， [Clojure的发展情况如何？](https://groups.google.com/forum/#!topic/cn-clojure/V03N0qJQ6_w) ，也做了些查询，汇总下信息\n\n### 国内使用 Clojure 的公司\n\n1. 一个比较大的公司是 [AVOS](https://www.avoscloud.com/)  ，是前 Youtube 创始人的公司，后端基本都是用 Clojure 来写的。\n2. [中瑞财富](https://www.zrcaifu.com/)  p2p 互联网金融项目\n3. [百思](http://rd.kuaijianli.com/u102510) 一个社交网站数据分析的公司\n4. 深圳风林火山 - 一家游戏公司：深圳风林火山，游戏产品黄金岛牌类游戏，目前使用 Clojure 作为主力服 务器开发语言。我们目前使用的 Clojure 技术都在刀锋上，非常前卫。使用 ClojureScript 和 Clojure 结合的开发框架目前正在产品化中，其中使用到的 ClojureScript 和 One 的新特性由 Clojure Core 团队开发，使用 Datomic 数据库。 我们的项目在第一次 ClojureConj 大会上作为 Aaron Bedra 介绍的 Clojure in the Field (Clojure 用于实战)的重要项目介绍。\n5. [直播贴](http://zbdang.com/) 一家八卦网站，也 [正在招人](https://groups.google.com/forum/#!searchin/cn-clojure/%E6%8B%9B%E8%81%98/cn-clojure/c7GU9Q9X6ck/ADNvCr-X_pMJ)\n\n\n### 金融系统\n\nClojure 的很多代码都是银行的业务作为例子，比如下面这个，所以以为会有比较多的金融行业应用，但是实际上没看到。。。\n\n```\n(def account1 (ref 100))\n(def account2 (ref 0))\n\n;; ; to read the current value of a ref, use (deref refname):\n;; ;=> (deref account1)\n;; 100\n;; ;=> @account1 ; @refname is equivalent to (deref refname)\n;; 100\n\n(defn transfer [amount from to]\n  (dosync\n   (alter from - amount)   ; alter from => (- @from amount)\n   (alter to   + amount))) ; alter to   => (+ @to amount)\n\n;; ;=> @account1\n;; 100\n;; ;=> @account2\n;; 0\n;; ;=> (transfer 100 account1 account2)\n;; 100\n;; ;=> @account1\n;; 0\n;; ;=> @account2\n;; 100\n```\n这个例子中，应用了 Clojure 的 STM 机制保证转账操作能都完毕，参见 [1]\n\n```\n(alter from - amount)\n(alter to   + amount)\n```\n\n搜索了下国外的情况，其实应用也不多，有 citi （花旗银行）、 UBS （瑞士联合银行） ，但是好像实际用的也不多。有一段评价[2]：\n\n<blockquote>\nBased on my own experience and conversations with others who work in the City, there’s a small but increasing move towards functional languages. I have to say that by far the most common I’ve heard of are Scala or F#, with ML and Clojure far behind.\n</blockquote>\n\n也就是说金融行业虽然也在往函数式语言靠，但是F# 和 Scala 的使用更广泛，远高于 ML 和 Clojure 这样的语言。\n\n### Clojure 语言本身的发展情况\n\n1. 特性变化还是挺多的，版本更新时，有 core.* 下面的更新\n2. 库变更也比较频繁：我目前借的两本书，《Clojure 编程》 和 《Clojure 程序设计》，内容都稍微有点过时，导致有些例子不能运行\n3. 语法发展也可以看下 [这个帖子](https://groups.google.com/forum/#!topic/cn-clojure/V03N0qJQ6_w) ，dennis zhuang 的回复，他本人就是在 AVOS 工作\n\n\n#### REFS\n[1] http://chaifeng.com/clojure-stm-what-why-how/\n\n[2] http://mdavey.wordpress.com/2013/05/24/clojure-in-finance/ 的评论\n","slug":"learning-clojure-company","date":1405699200000,"updated":1405769151000,"excerpt":"","_id":"05ouy6xrtkrve7f3","categories":[],"photos":[],"link":""},{"content":"<hr>\n<p>layout: default<br>tags : other<br>comments : true<br>codesyntax : true</p>\n<h2 id=\"-_other\">- other</h2>\n<h2 id=\"源码\">源码</h2>\n<pre><code class=\"javascript\">\nfunction hi(){\n  alert(\"hi , world\");\n}\n</code></pre>\n","source":"_posts/2013-10-26-jekyll-hilightjs.md","raw":"---\nlayout: default\ntags : other\ncomments : true\ncodesyntax : true\n- other\n---\n\n## 源码\n\n<pre><code class=\"javascript\">\nfunction hi(){\n  alert(\"hi , world\");\n}\n</code></pre>\n","slug":"jekyll-hilightjs","date":1382716800000,"updated":1405769711000,"excerpt":"","_id":"efib01j14qyd5bom","title":"","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"layout":"default","tags":["ekkfy6zjiuzggp33"],"comments":true,"codesyntax":true,"content":"<h2 id=\"语法\">语法</h2>\n<p><a href=\"http://daringfireball.net/projects/markdown/syntax\" target=\"_blank\" rel=\"external\">daringfireball</a></p>\n<h2 id=\"footnote语法\">footnote语法</h2>\n<p>只有phpmarkdown支持</p>\n<pre><code class=\"markdown\">\nThat's some text with a footnote.[^1]\n\n[^1]: And that's the footnote.\n</code></pre>\n\n<h2 id=\"table\">table</h2>\n<pre><code class=\"markdown\">| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | $1600 |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n</code></pre>\n\n\n<h2 id=\"链接复用\">链接复用</h2>\n<p>I get 10 times more traffic from <a href=\"http://google.com/\" title=\"Google\" target=\"_blank\" rel=\"external\">Google</a> than from<br><a href=\"http://search.yahoo.com/\" title=\"Yahoo Search\" target=\"_blank\" rel=\"external\">Yahoo</a> or <a href=\"http://search.msn.com/\" title=\"MSN Search\" target=\"_blank\" rel=\"external\">MSN</a>.</p>\n","source":"_posts/2013-10-26-md-syntax.md","raw":"---\nlayout: default\ntags : other\ncomments : true\ncodesyntax : true\n---\n\n## 语法\n\n[daringfireball](http://daringfireball.net/projects/markdown/syntax)\n\n## footnote语法\n只有phpmarkdown支持\n\n<pre><code class=\"markdown\">\nThat's some text with a footnote.[^1]\n    \n[^1]: And that's the footnote.\n</code></pre>\n\n## table\n\n<pre><code class=\"markdown\">| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | $1600 |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n</code></pre>\n\n\n## 链接复用\n\nI get 10 times more traffic from [Google] [1] than from\n[Yahoo] [2] or [MSN] [3].\n\n  [1]: http://google.com/        \"Google\"\n  [2]: http://search.yahoo.com/  \"Yahoo Search\"\n  [3]: http://search.msn.com/    \"MSN Search\"\n","slug":"md-syntax","date":1382716800000,"updated":1405769708000,"excerpt":"","_id":"7gxlv8jj5ty7h6jv","title":"","categories":[],"photos":[],"link":""}],"Tag":[{"name":"other","_id":"ekkfy6zjiuzggp33","posts":["ikwqxmv73ppeid1y","pnu2rjiedkgwjxqx","8ggogv6ykwhi18qs","bu274umq26pivpdd","n6uqayt0fmat5upr","3rpb5dlugkmt20ui","3iy9xhc5p10eh0q6","7gxlv8jj5ty7h6jv"]},{"name":"javascript","_id":"zykleiwdpei3e6bq","posts":["5v56x6puuzxzyotv","sxov4524hokineqp"]},{"name":"life","_id":"xa4wt96syccfb644","posts":["n8ry83aayu2y1150","jckbnz41e46joymm"]},{"name":"cordova","_id":"9tzjmzaq0co602sv","posts":["aznsezcpghdwgu82","xnjq9p4g2ett2hfm","b2tv9n11egsh2jkj"]},{"name":"mongodb","_id":"jj7q5mcc4b4cmavz","posts":["vv4r4z25lvsulfa4"]},{"name":"cordova,phonegap","_id":"bz702wgsvqjj4y6d","posts":[]},{"name":"startup","_id":"mh5s4o1lr78wfyzj","posts":["s815mrj0k8iyp7v3"]},{"name":"clojure","_id":"ws7487053zns8985","posts":["x17ukmfd45z0t159","00pqfjqqifac0l51","nk9r7pbe52zhxbo3","05ouy6xrtkrve7f3"]},{"name":"phonegap","_id":"z84ulbr8j38z8r3v","posts":["xnjq9p4g2ett2hfm"]}]}